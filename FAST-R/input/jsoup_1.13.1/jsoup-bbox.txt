package org.jsoup;  import org.junit.jupiter.api.extension.AfterEachCallback; import org.junit.jupiter.api.extension.ExtendWith; import org.junit.jupiter.api.extension.ExtensionContext; import org.junit.jupiter.params.ParameterizedTest; import org.junit.jupiter.params.provider.Arguments; import org.junit.jupiter.params.provider.ArgumentsProvider; import org.junit.jupiter.params.provider.ArgumentsSource;  import java.lang.annotation.*; import java.util.Locale; import java.util.stream.Stream;  public class MultiLocaleExtension implements AfterEachCallback, ArgumentsProvider {     private final Locale defaultLocale = Locale.getDefault();      @Override     public void afterEach(ExtensionContext context) {         Locale.setDefault(defaultLocale);     }      @Override     public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) {         return Stream.of(Arguments.of(Locale.ENGLISH), Arguments.arguments(new Locale("tr")));     }       @Documented     @Target(ElementType.METHOD)     @Retention(RetentionPolicy.RUNTIME)     @ArgumentsSource(MultiLocaleExtension.class)     @ExtendWith(MultiLocaleExtension.class)     @ParameterizedTest     public @interface MultiLocaleTest {     }  } 
package org.jsoup.internal;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import java.io.BufferedInputStream; import java.io.IOException; import java.nio.ByteBuffer; import java.nio.charset.StandardCharsets;  import static org.junit.jupiter.api.Assertions.*;  @Disabled public class ConstrainableInputStreamTest {     // todo - move these all to local jetty, don't ignore      @Test     public void remainingAfterFirstRead() throws IOException {         int bufferSize = 5 * 1024;         int capSize = 100 * 1024;          String url = "http://direct.infohound.net/tools/large.html"; // 280 K         BufferedInputStream inputStream = Jsoup.connect(url).maxBodySize(capSize)             .execute().bodyStream();          assertTrue(inputStream instanceof ConstrainableInputStream);         ConstrainableInputStream stream = (ConstrainableInputStream) inputStream;          // simulates parse which does a limited read first         stream.mark(bufferSize);         ByteBuffer firstBytes = stream.readToByteBuffer(bufferSize);          byte[] array = firstBytes.array();         String firstText = new String(array, StandardCharsets.UTF_8);         assertTrue(firstText.startsWith("<html><head><title>Large"));         assertEquals(bufferSize, array.length);          boolean fullyRead = stream.read() == -1;         assertFalse(fullyRead);          // reset and read again         stream.reset();         ByteBuffer fullRead = stream.readToByteBuffer(0);         byte[] fullArray = fullRead.array();         assertEquals(capSize, fullArray.length);         String fullText = new String(fullArray, StandardCharsets.UTF_8);         assertTrue(fullText.startsWith(firstText));     }      @Test     public void noLimitAfterFirstRead() throws IOException {         int bufferSize = 5 * 1024;          String url = "http://direct.infohound.net/tools/large.html"; // 280 K         BufferedInputStream inputStream = Jsoup.connect(url).execute().bodyStream();          assertTrue(inputStream instanceof ConstrainableInputStream);         ConstrainableInputStream stream = (ConstrainableInputStream) inputStream;          // simulates parse which does a limited read first         stream.mark(bufferSize);         ByteBuffer firstBytes = stream.readToByteBuffer(bufferSize);         byte[] array = firstBytes.array();         String firstText = new String(array, StandardCharsets.UTF_8);         assertTrue(firstText.startsWith("<html><head><title>Large"));         assertEquals(bufferSize, array.length);          // reset and read fully         stream.reset();         ByteBuffer fullRead = stream.readToByteBuffer(0);         byte[] fullArray = fullRead.array();         assertEquals(280735, fullArray.length);         String fullText = new String(fullArray, StandardCharsets.UTF_8);         assertTrue(fullText.startsWith(firstText));      } } 
package org.jsoup.internal;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import java.util.Arrays; import java.util.Collections;  import static org.jsoup.internal.StringUtil.normaliseWhitespace; import static org.jsoup.internal.StringUtil.resolve; import static org.junit.jupiter.api.Assertions.*;  public class StringUtilTest {      @Test     public void join() {         assertEquals("", StringUtil.join(Collections.singletonList(""), " "));         assertEquals("one", StringUtil.join(Collections.singletonList("one"), " "));         assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " "));     }      @Test public void padding() {         assertEquals("", StringUtil.padding(0));         assertEquals(" ", StringUtil.padding(1));         assertEquals("  ", StringUtil.padding(2));         assertEquals("               ", StringUtil.padding(15));         assertEquals("                                             ", StringUtil.padding(45));     }      @Test public void paddingInACan() {         String[] padding = StringUtil.padding;         assertEquals(21, padding.length);         for (int i = 0; i < padding.length; i++) {             assertEquals(i, padding[i].length());         }     }      @Test public void isBlank() {         assertTrue(StringUtil.isBlank(null));         assertTrue(StringUtil.isBlank(""));         assertTrue(StringUtil.isBlank("      "));         assertTrue(StringUtil.isBlank("   \r\n  "));          assertFalse(StringUtil.isBlank("hello"));         assertFalse(StringUtil.isBlank("   hello   "));     }      @Test public void isNumeric() {         assertFalse(StringUtil.isNumeric(null));         assertFalse(StringUtil.isNumeric(" "));         assertFalse(StringUtil.isNumeric("123 546"));         assertFalse(StringUtil.isNumeric("hello"));         assertFalse(StringUtil.isNumeric("123.334"));          assertTrue(StringUtil.isNumeric("1"));         assertTrue(StringUtil.isNumeric("1234"));     }      @Test public void isWhitespace() {         assertTrue(StringUtil.isWhitespace('\t'));         assertTrue(StringUtil.isWhitespace('\n'));         assertTrue(StringUtil.isWhitespace('\r'));         assertTrue(StringUtil.isWhitespace('\f'));         assertTrue(StringUtil.isWhitespace(' '));          assertFalse(StringUtil.isWhitespace('\u00a0'));         assertFalse(StringUtil.isWhitespace('\u2000'));         assertFalse(StringUtil.isWhitespace('\u3000'));     }      @Test public void normaliseWhiteSpace() {         assertEquals(" ", normaliseWhitespace("    \r \n \r\n"));         assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n"));         assertEquals("hello", normaliseWhitespace("hello"));         assertEquals("hello there", normaliseWhitespace("hello\nthere"));     }      @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {         String test71540chars = "\ud869\udeb2\u304b\u309a  1";         String test71540charsExpectedSingleWhitespace = "\ud869\udeb2\u304b\u309a 1";          assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars));         String extractedText = Jsoup.parse(test71540chars).text();         assertEquals(test71540charsExpectedSingleWhitespace, extractedText);     }      @Test public void resolvesRelativeUrls() {         assertEquals("http://example.com/one/two?three", resolve("http://example.com", "./one/two?three"));         assertEquals("http://example.com/one/two?three", resolve("http://example.com?one", "./one/two?three"));         assertEquals("http://example.com/one/two?three#four", resolve("http://example.com", "./one/two?three#four"));         assertEquals("https://example.com/one", resolve("http://example.com/", "https://example.com/one"));         assertEquals("http://example.com/one/two.html", resolve("http://example.com/two/", "../one/two.html"));         assertEquals("https://example2.com/one", resolve("https://example.com/", "//example2.com/one"));         assertEquals("https://example.com:8080/one", resolve("https://example.com:8080", "./one"));         assertEquals("https://example2.com/one", resolve("http://example.com/", "https://example2.com/one"));         assertEquals("https://example.com/one", resolve("wrong", "https://example.com/one"));         assertEquals("https://example.com/one", resolve("https://example.com/one", ""));         assertEquals("", resolve("wrong", "also wrong"));         assertEquals("ftp://example.com/one", resolve("ftp://example.com/two/", "../one"));         assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "./two.c"));         assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "two.c"));     } } 
package org.jsoup.helper;  import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.parser.Parser; import org.junit.jupiter.api.Test;  import java.io.*; import java.nio.charset.StandardCharsets;  import static org.jsoup.integration.ParseTest.getFile; import static org.junit.jupiter.api.Assertions.*;  public class DataUtilTest {     @Test     public void testCharset() {         assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "));         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"));         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"));         assertNull(DataUtil.getCharsetFromContentType("text/html"));         assertNull(DataUtil.getCharsetFromContentType(null));         assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));     }      @Test     public void testQuotedCharset() {         assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""));         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));         assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"));     }      private InputStream stream(String data) {         return new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));     }      private InputStream stream(String data, String charset) {         try {             return new ByteArrayInputStream(data.getBytes(charset));         } catch (UnsupportedEncodingException e) {             fail();         }         return null;     }      @Test     public void discardsSpuriousByteOrderMark() throws IOException {         String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";         Document doc = DataUtil.parseInputStream(stream(html), "UTF-8", "http://foo.com/", Parser.htmlParser());         assertEquals("One", doc.head().text());     }      @Test     public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {         String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";         Document doc = DataUtil.parseInputStream(stream(html), null, "http://foo.com/", Parser.htmlParser());         assertEquals("One", doc.head().text());         assertEquals("UTF-8", doc.outputSettings().charset().displayName());     }      @Test     public void shouldNotThrowExceptionOnEmptyCharset() {         assertNull(DataUtil.getCharsetFromContentType("text/html; charset="));         assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"));     }      @Test     public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"));     }      @Test     public void shouldCorrectCharsetForDuplicateCharsetString() {         assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"));     }      @Test     public void shouldReturnNullForIllegalCharsetNames() {         assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/("));     }      @Test     public void generatesMimeBoundaries() {         String m1 = DataUtil.mimeBoundary();         String m2 = DataUtil.mimeBoundary();          assertEquals(DataUtil.boundaryLength, m1.length());         assertEquals(DataUtil.boundaryLength, m2.length());         assertNotSame(m1, m2);     }      @Test     public void wrongMetaCharsetFallback() throws IOException {         String html = "<html><head><meta charset=iso-8></head><body></body></html>";          Document doc = DataUtil.parseInputStream(stream(html), null, "http://example.com", Parser.htmlParser());          final String expected = "<html>\n" +                 " <head>\n" +                 "  <meta charset=\"iso-8\">\n" +                 " </head>\n" +                 " <body></body>\n" +                 "</html>";          assertEquals(expected, doc.toString());     }      @Test     public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {         String html = "<html><head>" +                 "<meta http-equiv=\"Content-Type\" content=\"text/html\">" +                 "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=euc-kr\">" +                 "</head><body>한국어</body></html>";          Document doc = DataUtil.parseInputStream(stream(html, "euc-kr"), null, "http://example.com", Parser.htmlParser());          assertEquals("한국어", doc.body().text());     }      @Test     public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {         String html = "<html><head>" +                 "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">" +                 "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=koi8-u\">" +                 "</head><body>Übergrößenträger</body></html>";          Document doc = DataUtil.parseInputStream(stream(html, "iso-8859-1"), null, "http://example.com", Parser.htmlParser());          assertEquals("Übergrößenträger", doc.body().text());     }      @Test     public void supportsBOMinFiles() throws IOException {         // test files from http://www.i18nl10n.com/korean/utftest/         File in = getFile("/bomtests/bom_utf16be.html");         Document doc = Jsoup.parse(in, null, "http://example.com");         assertTrue(doc.title().contains("UTF-16BE"));         assertTrue(doc.text().contains("가각갂갃간갅"));          in = getFile("/bomtests/bom_utf16le.html");         doc = Jsoup.parse(in, null, "http://example.com");         assertTrue(doc.title().contains("UTF-16LE"));         assertTrue(doc.text().contains("가각갂갃간갅"));          in = getFile("/bomtests/bom_utf32be.html");         doc = Jsoup.parse(in, null, "http://example.com");         assertTrue(doc.title().contains("UTF-32BE"));         assertTrue(doc.text().contains("가각갂갃간갅"));          in = getFile("/bomtests/bom_utf32le.html");         doc = Jsoup.parse(in, null, "http://example.com");         assertTrue(doc.title().contains("UTF-32LE"));         assertTrue(doc.text().contains("가각갂갃간갅"));     }      @Test     public void supportsUTF8BOM() throws IOException {         File in = getFile("/bomtests/bom_utf8.html");         Document doc = Jsoup.parse(in, null, "http://example.com");         assertEquals("OK", doc.head().select("title").text());     }      @Test     public void supportsZippedUTF8BOM() throws IOException {         File in = getFile("/bomtests/bom_utf8.html.gz");         Document doc = Jsoup.parse(in, null, "http://example.com");         assertEquals("OK", doc.head().select("title").text());         assertEquals("There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.", doc.body().text());     }      @Test     public void supportsXmlCharsetDeclaration() throws IOException {         String encoding = "iso-8859-1";         InputStream soup = new ByteArrayInputStream((                 "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" +                         "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +                         "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">Hellö Wörld!</html>"         ).getBytes(encoding));          Document doc = Jsoup.parse(soup, null, "");         assertEquals("Hellö Wörld!", doc.body().text());     }       @Test     public void lLoadsGzipFile() throws IOException {         File in = getFile("/htmltests/gzip.html.gz");         Document doc = Jsoup.parse(in, null);         assertEquals("Gzip test", doc.title());         assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());     }      @Test     public void loadsZGzipFile() throws IOException {         // compressed on win, with z suffix         File in = getFile("/htmltests/gzip.html.z");         Document doc = Jsoup.parse(in, null);         assertEquals("Gzip test", doc.title());         assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());     }      @Test     public void handlesFakeGzipFile() throws IOException {         File in = getFile("/htmltests/fake-gzip.html.gz");         Document doc = Jsoup.parse(in, null);         assertEquals("This is not gzipped", doc.title());         assertEquals("And should still be readable.", doc.selectFirst("p").text());     } } 
package org.jsoup.helper;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.integration.ParseTest; import org.jsoup.nodes.Element; import org.junit.jupiter.api.Test; import org.w3c.dom.Document; import org.w3c.dom.DocumentType; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.xml.sax.InputSource;  import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.transform.OutputKeys; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathExpression; import javax.xml.xpath.XPathExpressionException; import javax.xml.xpath.XPathFactory; import java.io.ByteArrayInputStream; import java.io.File; import java.io.IOException; import java.io.StringReader; import java.nio.charset.StandardCharsets; import java.util.Map;  import static org.junit.jupiter.api.Assertions.*;  public class W3CDomTest {      private static Document parseXml(String xml, boolean nameSpaceAware) {         try {             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();             factory.setNamespaceAware(nameSpaceAware);             DocumentBuilder builder = factory.newDocumentBuilder();             builder.setEntityResolver((publicId, systemId) -> {                 if (systemId.contains("about:legacy-compat")) { // <!doctype html>                     return new InputSource(new StringReader(""));                 } else {                     return null;                 }             });             Document dom = builder.parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));             dom.normalizeDocument();             return dom;         } catch (Exception e) {             throw new IllegalStateException(e);         }     }      @Test     public void simpleConversion() {         String html = "<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')";         org.jsoup.nodes.Document doc = Jsoup.parse(html);          W3CDom w3c = new W3CDom();         Document wDoc = w3c.fromJsoup(doc);         NodeList meta = wDoc.getElementsByTagName("META");         assertEquals(0, meta.getLength());          String out = W3CDom.asString(wDoc, W3CDom.OutputXml());         String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";         assertEquals(expected, TextUtil.stripNewlines(out));          Document roundTrip = parseXml(out, true);         assertEquals("Text", roundTrip.getElementsByTagName("p").item(0).getTextContent());          // check we can set properties         Map<String, String> properties = W3CDom.OutputXml();         properties.put(OutputKeys.INDENT, "yes");         String furtherOut = W3CDom.asString(wDoc, properties);         assertTrue(furtherOut.length() > out.length()); // wanted to assert formatting, but actual indentation is platform specific so breaks in CI         String furtherExpected =             "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";         assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut)); // on windows, DOM will write newlines as \r\n     }      @Test     public void convertsGoogle() throws IOException {         File in = ParseTest.getFile("/htmltests/google-ipod.html.gz");         org.jsoup.nodes.Document doc = Jsoup.parse(in, "UTF8");          W3CDom w3c = new W3CDom();         Document wDoc = w3c.fromJsoup(doc);         Node htmlEl = wDoc.getChildNodes().item(1);         assertNull(htmlEl.getNamespaceURI());         assertEquals("html", htmlEl.getLocalName());         assertEquals("html", htmlEl.getNodeName());          DocumentType doctype = wDoc.getDoctype();         Node doctypeNode = wDoc.getChildNodes().item(0);         assertSame(doctype, doctypeNode);         assertEquals("html", doctype.getName());          String xml = W3CDom.asString(wDoc, W3CDom.OutputXml());         assertTrue(xml.contains("ipod"));          Document roundTrip = parseXml(xml, true);         assertEquals("Images", roundTrip.getElementsByTagName("a").item(0).getTextContent());     }      @Test     public void convertsGoogleLocation() throws IOException {         File in = ParseTest.getFile("/htmltests/google-ipod.html.gz");         org.jsoup.nodes.Document doc = Jsoup.parse(in, "UTF8");          W3CDom w3c = new W3CDom();         Document wDoc = w3c.fromJsoup(doc);          String out = w3c.asString(wDoc);         assertEquals(doc.location(), wDoc.getDocumentURI());     }      @Test     public void namespacePreservation() throws IOException {         File in = ParseTest.getFile("/htmltests/namespaces.xhtml");         org.jsoup.nodes.Document jsoupDoc;         jsoupDoc = Jsoup.parse(in, "UTF-8");          Document doc;         org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();         doc = jDom.fromJsoup(jsoupDoc);          Node htmlEl = doc.getChildNodes().item(0);         assertEquals("http://www.w3.org/1999/xhtml", htmlEl.getNamespaceURI());         assertEquals("html", htmlEl.getLocalName());         assertEquals("html", htmlEl.getNodeName());          // inherits default namespace         Node head = htmlEl.getFirstChild().getNextSibling();         assertEquals("http://www.w3.org/1999/xhtml", head.getNamespaceURI());         assertEquals("head", head.getLocalName());         assertEquals("head", head.getNodeName());          Node epubTitle = htmlEl.getChildNodes().item(3).getChildNodes().item(3);         assertEquals("Check", epubTitle.getTextContent());         assertEquals("http://www.idpf.org/2007/ops", epubTitle.getNamespaceURI());         assertEquals("title", epubTitle.getLocalName());         assertEquals("epub:title", epubTitle.getNodeName());          Node xSection = epubTitle.getNextSibling().getNextSibling();         assertEquals("urn:test", xSection.getNamespaceURI());         assertEquals("section", xSection.getLocalName());         assertEquals("x:section", xSection.getNodeName());          // https://github.com/jhy/jsoup/issues/977         // does not keep last set namespace         Node svg = xSection.getNextSibling().getNextSibling();         assertEquals("http://www.w3.org/2000/svg", svg.getNamespaceURI());         assertEquals("svg", svg.getLocalName());         assertEquals("svg", svg.getNodeName());          Node path = svg.getChildNodes().item(1);         assertEquals("http://www.w3.org/2000/svg", path.getNamespaceURI());         assertEquals("path", path.getLocalName());         assertEquals("path", path.getNodeName());          Node clip = path.getChildNodes().item(1);         assertEquals("http://example.com/clip", clip.getNamespaceURI());         assertEquals("clip", clip.getLocalName());         assertEquals("clip", clip.getNodeName());         assertEquals("456", clip.getTextContent());          Node picture = svg.getNextSibling().getNextSibling();         assertEquals("http://www.w3.org/1999/xhtml", picture.getNamespaceURI());         assertEquals("picture", picture.getLocalName());         assertEquals("picture", picture.getNodeName());          Node img = picture.getFirstChild();         assertEquals("http://www.w3.org/1999/xhtml", img.getNamespaceURI());         assertEquals("img", img.getLocalName());         assertEquals("img", img.getNodeName());      }      @Test     public void handlesInvalidAttributeNames() {         String html = "<html><head></head><body style=\"color: red\" \" name\"></body></html>";         org.jsoup.nodes.Document jsoupDoc;         jsoupDoc = Jsoup.parse(html);         Element body = jsoupDoc.select("body").first();         assertTrue(body.hasAttr("\"")); // actually an attribute with key '"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it         assertTrue(body.hasAttr("name\""));          Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);     }      @Test     public void treatsUndeclaredNamespaceAsLocalName() {         String html = "<fb:like>One</fb:like>";         org.jsoup.nodes.Document doc = Jsoup.parse(html);          Document w3Doc = new W3CDom().fromJsoup(doc);         Node htmlEl = w3Doc.getFirstChild();          assertNull(htmlEl.getNamespaceURI());         assertEquals("html", htmlEl.getLocalName());         assertEquals("html", htmlEl.getNodeName());          Node fb = htmlEl.getFirstChild().getNextSibling().getFirstChild();         assertNull(fb.getNamespaceURI());         assertEquals("like", fb.getLocalName());         assertEquals("fb:like", fb.getNodeName());     }      @Test     public void xmlnsXpathTest() throws XPathExpressionException {         W3CDom w3c = new W3CDom();         String html = "<html><body><div>hello</div></body></html>";         Document dom = w3c.fromJsoup(Jsoup.parse(html));         NodeList nodeList = xpath(dom, "//body");// no ns, so needs no prefix         assertEquals("div", nodeList.item(0).getLocalName());          // default output is namespace aware, so query needs to be as well         html = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";         dom = w3c.fromJsoup(Jsoup.parse(html));         nodeList = xpath(dom, "//body");         assertNull(nodeList); // no matches          dom = w3c.fromJsoup(Jsoup.parse(html));         nodeList = xpath(dom, "//*[local-name()=\"body\"]");         assertNotNull(nodeList);         assertEquals(1, nodeList.getLength());         assertEquals("div", nodeList.item(0).getLocalName());         assertEquals("http://www.w3.org/1999/xhtml", nodeList.item(0).getNamespaceURI());         assertNull(nodeList.item(0).getPrefix());          // get rid of the name space awareness         String xml = w3c.asString(dom);         dom = parseXml(xml, false);         Node item = (Node) xpath(dom, "//body");         assertEquals("body", item.getNodeName());         assertNull(item.getNamespaceURI());         assertNull(item.getPrefix());          // put back, will get zero         dom = parseXml(xml, true);         nodeList = xpath(dom, "//body");         assertNull(nodeList);     }      private NodeList xpath(Document w3cDoc, String query) throws XPathExpressionException {         XPathExpression xpath = XPathFactory.newInstance().newXPath().compile(query);         return ((NodeList) xpath.evaluate(w3cDoc, XPathConstants.NODE));     }      @Test     public void testRoundTripDoctype() {         // TODO - not super happy with this output - but plain DOM doesn't let it out, and don't want to rebuild the writer         String base = "<!DOCTYPE html><p>One</p>";         assertEquals("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>",             output(base, true));         assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body><p>One</p></body></html>", output(base, false));          String publicDoc = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";         assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(publicDoc, true));         // different impls will have different XML formatting. OpenJDK 13 default gives this: <body /> but others have <body/>, so just check start         assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"));          String systemDoc = "<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">";         assertEquals("<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(systemDoc, true));         assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head/><body/></html>", output(systemDoc, false));          String legacyDoc = "<!DOCTYPE html SYSTEM \"about:legacy-compat\">";         assertEquals("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(legacyDoc, true));         assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body/></html>", output(legacyDoc, false));          String noDoctype = "<p>One</p>";         assertEquals("<html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(noDoctype, true));         assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body><p>One</p></body></html>", output(noDoctype, false));     }      private String output(String in, boolean modeHtml) {         org.jsoup.nodes.Document jdoc = Jsoup.parse(in);         Document w3c = W3CDom.convert(jdoc);          Map<String, String> properties = modeHtml ? W3CDom.OutputHtml() : W3CDom.OutputXml();         return TextUtil.stripNewlines(W3CDom.asString(w3c, properties));     }  }  
package org.jsoup.helper;  import org.jsoup.Connection; import org.jsoup.MultiLocaleExtension.MultiLocaleTest; import org.jsoup.integration.ParseTest; import org.junit.jupiter.api.Test;  import java.io.IOException; import java.net.MalformedURLException; import java.net.URL; import java.util.*;  import static org.junit.jupiter.api.Assertions.*;  public class HttpConnectionTest {     /* most actual network http connection tests are in integration */      @Test public void throwsExceptionOnParseWithoutExecute() {         assertThrows(IllegalArgumentException.class, () -> {             Connection con = HttpConnection.connect("http://example.com");             con.response().parse();         });     }      @Test public void throwsExceptionOnBodyWithoutExecute() {         assertThrows(IllegalArgumentException.class, () -> {             Connection con = HttpConnection.connect("http://example.com");             con.response().body();         });     }      @Test public void throwsExceptionOnBodyAsBytesWithoutExecute() {         assertThrows(IllegalArgumentException.class, () -> {             Connection con = HttpConnection.connect("http://example.com");             con.response().bodyAsBytes();         });     }      @MultiLocaleTest     public void caseInsensitiveHeaders(Locale locale) {         Locale.setDefault(locale);          Connection.Response res = new HttpConnection.Response();         res.header("Accept-Encoding", "gzip");         res.header("content-type", "text/html");         res.header("refErrer", "http://example.com");          assertTrue(res.hasHeader("Accept-Encoding"));         assertTrue(res.hasHeader("accept-encoding"));         assertTrue(res.hasHeader("accept-Encoding"));         assertTrue(res.hasHeader("ACCEPT-ENCODING"));          assertEquals("gzip", res.header("accept-Encoding"));         assertEquals("gzip", res.header("ACCEPT-ENCODING"));         assertEquals("text/html", res.header("Content-Type"));         assertEquals("http://example.com", res.header("Referrer"));          res.removeHeader("Content-Type");         assertFalse(res.hasHeader("content-type"));          res.removeHeader("ACCEPT-ENCODING");         assertFalse(res.hasHeader("Accept-Encoding"));          res.header("ACCEPT-ENCODING", "deflate");         assertEquals("deflate", res.header("Accept-Encoding"));         assertEquals("deflate", res.header("accept-Encoding"));     }      @Test public void headers() {         Connection con = HttpConnection.connect("http://example.com");         Map<String, String> headers = new HashMap<>();         headers.put("content-type", "text/html");         headers.put("Connection", "keep-alive");         headers.put("Host", "http://example.com");         con.headers(headers);         assertEquals("text/html", con.request().header("content-type"));         assertEquals("keep-alive", con.request().header("Connection"));         assertEquals("http://example.com", con.request().header("Host"));     }      @Test public void sameHeadersCombineWithComma() {         Map<String, List<String>> headers = new HashMap<>();         List<String> values = new ArrayList<>();         values.add("no-cache");         values.add("no-store");         headers.put("Cache-Control", values);         HttpConnection.Response res = new HttpConnection.Response();         res.processResponseHeaders(headers);         assertEquals("no-cache, no-store", res.header("Cache-Control"));     }      @Test public void multipleHeaders() {         Connection.Request req = new HttpConnection.Request();         req.addHeader("Accept", "Something");         req.addHeader("Accept", "Everything");         req.addHeader("Foo", "Bar");          assertTrue(req.hasHeader("Accept"));         assertTrue(req.hasHeader("ACCEpt"));         assertEquals("Something, Everything", req.header("accept"));         assertTrue(req.hasHeader("fOO"));         assertEquals("Bar", req.header("foo"));          List<String> accept = req.headers("accept");         assertEquals(2, accept.size());         assertEquals("Something", accept.get(0));         assertEquals("Everything", accept.get(1));          Map<String, List<String>> headers = req.multiHeaders();         assertEquals(accept, headers.get("Accept"));         assertEquals("Bar", headers.get("Foo").get(0));          assertTrue(req.hasHeader("Accept"));         assertTrue(req.hasHeaderWithValue("accept", "Something"));         assertTrue(req.hasHeaderWithValue("accept", "Everything"));         assertFalse(req.hasHeaderWithValue("accept", "Something for nothing"));          req.removeHeader("accept");         headers = req.multiHeaders();         assertEquals("Bar", headers.get("Foo").get(0));         assertFalse(req.hasHeader("Accept"));         assertNull(headers.get("Accept"));     }      @Test public void ignoresEmptySetCookies() {         // prep http response header map         Map<String, List<String>> headers = new HashMap<>();         headers.put("Set-Cookie", Collections.emptyList());         HttpConnection.Response res = new HttpConnection.Response();         res.processResponseHeaders(headers);         assertEquals(0, res.cookies().size());     }      @Test public void ignoresEmptyCookieNameAndVals() {         // prep http response header map         Map<String, List<String>> headers = new HashMap<>();         List<String> cookieStrings = new ArrayList<>();         cookieStrings.add(null);         cookieStrings.add("");         cookieStrings.add("one");         cookieStrings.add("two=");         cookieStrings.add("three=;");         cookieStrings.add("four=data; Domain=.example.com; Path=/");          headers.put("Set-Cookie", cookieStrings);         HttpConnection.Response res = new HttpConnection.Response();         res.processResponseHeaders(headers);         assertEquals(4, res.cookies().size());         assertEquals("", res.cookie("one"));         assertEquals("", res.cookie("two"));         assertEquals("", res.cookie("three"));         assertEquals("data", res.cookie("four"));     }      @Test public void connectWithUrl() throws MalformedURLException {         Connection con = HttpConnection.connect(new URL("http://example.com"));         assertEquals("http://example.com", con.request().url().toExternalForm());     }      @Test public void throwsOnMalformedUrl() {         assertThrows(IllegalArgumentException.class, () -> HttpConnection.connect("bzzt"));     }      @Test public void userAgent() {         Connection con = HttpConnection.connect("http://example.com/");         assertEquals(HttpConnection.DEFAULT_UA, con.request().header("User-Agent"));         con.userAgent("Mozilla");         assertEquals("Mozilla", con.request().header("User-Agent"));     }      @Test public void timeout() {         Connection con = HttpConnection.connect("http://example.com/");         assertEquals(30 * 1000, con.request().timeout());         con.timeout(1000);         assertEquals(1000, con.request().timeout());     }      @Test public void referrer() {         Connection con = HttpConnection.connect("http://example.com/");         con.referrer("http://foo.com");         assertEquals("http://foo.com", con.request().header("Referer"));     }      @Test public void method() {         Connection con = HttpConnection.connect("http://example.com/");         assertEquals(Connection.Method.GET, con.request().method());         con.method(Connection.Method.POST);         assertEquals(Connection.Method.POST, con.request().method());     }      @Test public void throwsOnOddData() {         assertThrows(IllegalArgumentException.class, () -> {             Connection con = HttpConnection.connect("http://example.com/");             con.data("Name", "val", "what");         });     }      @Test public void data() {         Connection con = HttpConnection.connect("http://example.com/");         con.data("Name", "Val", "Foo", "bar");         Collection<Connection.KeyVal> values = con.request().data();         Object[] data =  values.toArray();         Connection.KeyVal one = (Connection.KeyVal) data[0];         Connection.KeyVal two = (Connection.KeyVal) data[1];         assertEquals("Name", one.key());         assertEquals("Val", one.value());         assertEquals("Foo", two.key());         assertEquals("bar", two.value());     }      @Test public void cookie() {         Connection con = HttpConnection.connect("http://example.com/");         con.cookie("Name", "Val");         assertEquals("Val", con.request().cookie("Name"));     }      @Test public void inputStream() {         Connection.KeyVal kv = HttpConnection.KeyVal.create("file", "thumb.jpg", ParseTest.inputStreamFrom("Check"));         assertEquals("file", kv.key());         assertEquals("thumb.jpg", kv.value());         assertTrue(kv.hasInputStream());          kv = HttpConnection.KeyVal.create("one", "two");         assertEquals("one", kv.key());         assertEquals("two", kv.value());         assertFalse(kv.hasInputStream());     }      @Test public void requestBody() {         Connection con = HttpConnection.connect("http://example.com/");         con.requestBody("foo");         assertEquals("foo", con.request().requestBody());     }      @Test public void encodeUrl() throws MalformedURLException {         URL url1 = new URL("http://test.com/?q=white space");         URL url2 = HttpConnection.encodeUrl(url1);         assertEquals("http://test.com/?q=white%20space", url2.toExternalForm());     }      @Test public void noUrlThrowsValidationError() throws IOException {         HttpConnection con = new HttpConnection();         boolean threw = false;         try {             con.execute();         } catch (IllegalArgumentException e) {             threw = true;             assertEquals("URL must be specified to connect", e.getMessage());         }         assertTrue(threw);     }      @Test public void handlesHeaderEncodingOnRequest() {         Connection.Request req = new HttpConnection.Request();         req.addHeader("xxx", "é");     } } 
package org.jsoup.safety;  import org.jsoup.Jsoup; import org.jsoup.MultiLocaleExtension.MultiLocaleTest; import org.jsoup.TextUtil; import org.jsoup.nodes.Document; import org.jsoup.nodes.Entities; import org.junit.jupiter.api.Test;  import java.util.Locale;  import static org.junit.jupiter.api.Assertions.*;  /**  Tests for the cleaner.   @author Jonathan Hedley, jonathan@hedley.net */ public class CleanerTest {     @Test public void simpleBehaviourTest() {         String h = "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>";         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());          assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));     }      @Test public void simpleBehaviourTest2() {         String h = "Hello <b>there</b>!";         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());          assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));     }      @Test public void basicBehaviourTest() {         String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic());          assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>",                 TextUtil.stripNewlines(cleanHtml));     }      @Test public void basicWithImagesTest() {         String h = "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>";         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());         assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>", TextUtil.stripNewlines(cleanHtml));     }      @Test public void testRelaxed() {         String h = "<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml));     }      @Test public void testRemoveTags() {         String h = "<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeTags("a"));          assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml));     }      @Test public void testRemoveAttributes() {         String h = "<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeAttributes("blockquote", "cite"));          assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml));     }      @Test public void testRemoveEnforcedAttributes() {         String h = "<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeEnforcedAttribute("a", "rel"));          assertEquals("<p><a href=\"http://nice.com\">Nice</a></p><blockquote>Hello</blockquote>",                 TextUtil.stripNewlines(cleanHtml));     }      @Test public void testRemoveProtocols() {         String h = "<p>Contact me <a href='mailto:info@example.com'>here</a></p>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeProtocols("a", "href", "ftp", "mailto"));          assertEquals("<p>Contact me <a rel=\"nofollow\">here</a></p>",                 TextUtil.stripNewlines(cleanHtml));     }      @MultiLocaleTest     public void whitelistedProtocolShouldBeRetained(Locale locale) {         Locale.setDefault(locale);          Whitelist whitelist = Whitelist.none()                 .addTags("a")                 .addAttributes("a", "href")                 .addProtocols("a", "href", "something");          String cleanHtml = Jsoup.clean("<a href=\"SOMETHING://x\"></a>", whitelist);          assertEquals("<a href=\"SOMETHING://x\"></a>", TextUtil.stripNewlines(cleanHtml));     }      @Test public void testDropComments() {         String h = "<p>Hello<!-- no --></p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Hello</p>", cleanHtml);     }      @Test public void testDropXmlProc() {         String h = "<?import namespace=\"xss\"><p>Hello</p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Hello</p>", cleanHtml);     }      @Test public void testDropScript() {         String h = "<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("", cleanHtml);     }      @Test public void testDropImageScript() {         String h = "<IMG SRC=\"javascript:alert('XSS')\">";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<img>", cleanHtml);     }      @Test public void testCleanJavascriptHref() {         String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<a>XSS</a>", cleanHtml);     }      @Test public void testCleanAnchorProtocol() {         String validAnchor = "<a href=\"#valid\">Valid anchor</a>";         String invalidAnchor = "<a href=\"#anchor with spaces\">Invalid anchor</a>";          // A Whitelist that does not allow anchors will strip them out.         String cleanHtml = Jsoup.clean(validAnchor, Whitelist.relaxed());         assertEquals("<a>Valid anchor</a>", cleanHtml);          cleanHtml = Jsoup.clean(invalidAnchor, Whitelist.relaxed());         assertEquals("<a>Invalid anchor</a>", cleanHtml);          // A Whitelist that allows them will keep them.         Whitelist relaxedWithAnchor = Whitelist.relaxed().addProtocols("a", "href", "#");          cleanHtml = Jsoup.clean(validAnchor, relaxedWithAnchor);         assertEquals(validAnchor, cleanHtml);          // An invalid anchor is never valid.         cleanHtml = Jsoup.clean(invalidAnchor, relaxedWithAnchor);         assertEquals("<a>Invalid anchor</a>", cleanHtml);     }      @Test public void testDropsUnknownTags() {         String h = "<p><custom foo=true>Test</custom></p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Test</p>", cleanHtml);     }      @Test public void testHandlesEmptyAttributes() {         String h = "<img alt=\"\" src= unknown=''>";         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());         assertEquals("<img alt=\"\">", cleanHtml);     }      @Test public void testIsValidBodyHtml() {         String ok = "<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>";         String ok1 = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; // missing enforced is OK because still needs run thru cleaner         String nok1 = "<p><script></script>Not <b>OK</b></p>";         String nok2 = "<p align=right>Test Not <b>OK</b></p>";         String nok3 = "<!-- comment --><p>Not OK</p>"; // comments and the like will be cleaned         String nok4 = "<html><head>Foo</head><body><b>OK</b></body></html>"; // not body html         String nok5 = "<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>";         String nok6 = "<p>Test <b><a href='http://example.com/'>OK</b></p>"; // missing close tag         String nok7 = "</div>What";         assertTrue(Jsoup.isValid(ok, Whitelist.basic()));         assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));         assertFalse(Jsoup.isValid(ok, Whitelist.none()));         assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));     }      @Test public void testIsValidDocument() {         String ok = "<html><head></head><body><p>Hello</p></body><html>";         String nok = "<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>";          Whitelist relaxed = Whitelist.relaxed();         Cleaner cleaner = new Cleaner(relaxed);         Document okDoc = Jsoup.parse(ok);         assertTrue(cleaner.isValid(okDoc));         assertFalse(cleaner.isValid(Jsoup.parse(nok)));         assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));     }      @Test public void resolvesRelativeLinks() {         String html = "<a href='/foo'>Link</a><img src='/bar'>";         String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basicWithImages());         assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">", clean);     }      @Test public void preservesRelativeLinksIfConfigured() {         String html = "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>";         String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basicWithImages().preserveRelativeLinks(true));         assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\"> \n<img>", clean);     }      @Test public void dropsUnresolvableRelativeLinks() {         String html = "<a href='/foo'>Link</a>";         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("<a rel=\"nofollow\">Link</a>", clean);     }      @Test public void handlesCustomProtocols() {         String html = "<img src='cid:12345' /> <img src='data:gzzt' />";         String dropped = Jsoup.clean(html, Whitelist.basicWithImages());         assertEquals("<img> \n<img>", dropped);          String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols("img", "src", "cid", "data"));         assertEquals("<img src=\"cid:12345\"> \n<img src=\"data:gzzt\">", preserved);     }      @Test public void handlesAllPseudoTag() {         String html = "<p class='foo' src='bar'><a class='qux'>link</a></p>";         Whitelist whitelist = new Whitelist()                 .addAttributes(":all", "class")                 .addAttributes("p", "style")                 .addTags("p", "a");          String clean = Jsoup.clean(html, whitelist);         assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean);     }      @Test public void addsTagOnAttributesIfNotSet() {         String html = "<p class='foo' src='bar'>One</p>";         Whitelist whitelist = new Whitelist()             .addAttributes("p", "class");         // ^^ whitelist does not have explicit tag add for p, inferred from add attributes.         String clean = Jsoup.clean(html, whitelist);         assertEquals("<p class=\"foo\">One</p>", clean);     }      @Test public void supplyOutputSettings() {         // test that one can override the default document output settings         Document.OutputSettings os = new Document.OutputSettings();         os.prettyPrint(false);         os.escapeMode(Entities.EscapeMode.extended);         os.charset("ascii");          String html = "<div><p>&bernou;</p></div>";         String customOut = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed(), os);         String defaultOut = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed());         assertNotSame(defaultOut, customOut);          assertEquals("<div><p>&Bscr;</p></div>", customOut); // entities now prefers shorted names if aliased         assertEquals("<div>\n" +             " <p>ℬ</p>\n" +             "</div>", defaultOut);          os.charset("ASCII");         os.escapeMode(Entities.EscapeMode.base);         String customOut2 = Jsoup.clean(html, "http://foo.com/", Whitelist.relaxed(), os);         assertEquals("<div><p>&#x212c;</p></div>", customOut2);     }      @Test public void handlesFramesets() {         String dirty = "<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset></html>";         String clean = Jsoup.clean(dirty, Whitelist.basic());         assertEquals("", clean); // nothing good can come out of that          Document dirtyDoc = Jsoup.parse(dirty);         Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);         assertNotNull(cleanDoc);         assertEquals(0, cleanDoc.body().childNodeSize());     }      @Test public void cleansInternationalText() {         assertEquals("привет", Jsoup.clean("привет", Whitelist.none()));     }      @Test     public void testScriptTagInWhiteList() {         Whitelist whitelist = Whitelist.relaxed();         whitelist.addTags( "script" );         assertTrue( Jsoup.isValid("Hello<script>alert('Doh')</script>World !", whitelist ) );     }      @Test     public void bailsIfRemovingProtocolThatsNotSet() {         assertThrows(IllegalArgumentException.class, () -> {             // a case that came up on the email list             Whitelist w = Whitelist.none();              // note no add tag, and removing protocol without adding first             w.addAttributes("a", "href");             w.removeProtocols("a", "href", "javascript"); // with no protocols enforced, this was a noop. Now validates.         });     }      @Test public void handlesControlCharactersAfterTagName() {         String html = "<a/\06>";         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("<a rel=\"nofollow\"></a>", clean);     }      @Test public void handlesAttributesWithNoValue() {         // https://github.com/jhy/jsoup/issues/973         String clean = Jsoup.clean("<a href>Clean</a>", Whitelist.basic());          assertEquals("<a rel=\"nofollow\">Clean</a>", clean);     }      @Test public void handlesNoHrefAttribute() {         String dirty = "<a>One</a> <a href>Two</a>";         Whitelist relaxedWithAnchor = Whitelist.relaxed().addProtocols("a", "href", "#");         String clean = Jsoup.clean(dirty, relaxedWithAnchor);         assertEquals("<a>One</a> <a>Two</a>", clean);     }      @Test public void handlesNestedQuotesInAttribute() {         // https://github.com/jhy/jsoup/issues/1243 - no repro         String orig = "<div style=\"font-family: 'Calibri'\">Will (not) fail</div>";         Whitelist allow = Whitelist.relaxed()             .addAttributes("div", "style");          String clean = Jsoup.clean(orig, allow);         boolean isValid = Jsoup.isValid(orig, allow);          assertEquals(orig, TextUtil.stripNewlines(clean)); // only difference is pretty print wrap & indent         assertTrue(isValid);     } } 
package org.jsoup;  import java.util.regex.Pattern;  /**  Text utils to ease testing   @author Jonathan Hedley, jonathan@hedley.net */ public class TextUtil {     static Pattern stripper = Pattern.compile("\\r?\\n\\s*");     static Pattern stripCRs = Pattern.compile("\\r*");      public static String stripNewlines(String text) {         return stripper.matcher(text).replaceAll("");     }      public static String stripCRs(String text) {         return stripCRs.matcher(text).replaceAll("");     } } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Node; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals;  public class TraversorTest {     // Note: NodeTraversor.traverse(new NodeVisitor) is tested in     // ElementsTest#traverse()      @Test     public void filterVisit() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         NodeTraversor.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 accum.append("<").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }         }, doc.select("div"));         assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString());     }      @Test     public void filterSkipChildren() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         NodeTraversor.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 accum.append("<").append(node.nodeName()).append(">");                 // OMIT contents of p:                 return ("p".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }         }, doc.select("div"));         assertEquals("<div><p></p></div><div><#text></#text></div>", accum.toString());     }      @Test     public void filterSkipEntirely() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         NodeTraversor.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 // OMIT p:                 if ("p".equals(node.nodeName()))                     return FilterResult.SKIP_ENTIRELY;                 accum.append("<").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }         }, doc.select("div"));         assertEquals("<div></div><div><#text></#text></div>", accum.toString());     }      @Test     public void filterRemove() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There be <b>bold</b></div>");         NodeTraversor.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 // Delete "p" in head:                 return ("p".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 // Delete "b" in tail:                 return ("b".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;             }         }, doc.select("div"));         assertEquals("<div></div>\n<div>\n There be \n</div>", doc.select("body").html());     }      @Test     public void filterStop() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         NodeTraversor.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 accum.append("<").append(node.nodeName()).append(">");                 return FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");                 // Stop after p.                 return ("p".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;             }         }, doc.select("div"));         assertEquals("<div><p><#text></#text></p>", accum.toString());     } } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.parser.Tag; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.*;   public class CssTest {  	private Document html = null; 	private static String htmlString;  	@BeforeAll 	public static void initClass() { 		StringBuilder sb = new StringBuilder("<html><head></head><body>");  		sb.append("<div id='pseudo'>"); 		for (int i = 1; i <= 10; i++) { 			sb.append(String.format("<p>%d</p>",i)); 		} 		sb.append("</div>");  		sb.append("<div id='type'>"); 		for (int i = 1; i <= 10; i++) { 			sb.append(String.format("<p>%d</p>",i)); 			sb.append(String.format("<span>%d</span>",i)); 			sb.append(String.format("<em>%d</em>",i));             sb.append(String.format("<svg>%d</svg>",i)); 		} 		sb.append("</div>");  		sb.append("<span id='onlySpan'><br /></span>"); 		sb.append("<p class='empty'><!-- Comment only is still empty! --></p>");  		sb.append("<div id='only'>"); 		sb.append("Some text before the <em>only</em> child in this div"); 		sb.append("</div>");  		sb.append("</body></html>"); 		htmlString = sb.toString(); 	}  	@BeforeEach 	public void init() { 		html  = Jsoup.parse(htmlString); 	}  	@Test 	public void firstChild() { 		check(html.select("#pseudo :first-child"), "1"); 		check(html.select("html:first-child")); 	}  	@Test 	public void lastChild() { 		check(html.select("#pseudo :last-child"), "10"); 		check(html.select("html:last-child")); 	}  	@Test 	public void nthChild_simple() { 		for(int i = 1; i <=10; i++) { 			check(html.select(String.format("#pseudo :nth-child(%d)", i)), String.valueOf(i)); 		} 	}      @Test     public void nthOfType_unknownTag() {         for(int i = 1; i <=10; i++) {             check(html.select(String.format("#type svg:nth-of-type(%d)", i)), String.valueOf(i));         }     }  	@Test 	public void nthLastChild_simple() { 		for(int i = 1; i <=10; i++) { 			check(html.select(String.format("#pseudo :nth-last-child(%d)", i)), String.valueOf(11-i)); 		} 	}  	@Test 	public void nthOfType_simple() { 		for(int i = 1; i <=10; i++) { 			check(html.select(String.format("#type p:nth-of-type(%d)", i)), String.valueOf(i)); 		} 	}  	@Test 	public void nthLastOfType_simple() { 		for(int i = 1; i <=10; i++) { 			check(html.select(String.format("#type :nth-last-of-type(%d)", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i)); 		} 	}  	@Test 	public void nthChild_advanced() { 		check(html.select("#pseudo :nth-child(-5)")); 		check(html.select("#pseudo :nth-child(odd)"), "1", "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-child(2n-1)"), "1", "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-child(2n+1)"), "1", "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-child(2n+3)"), "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-child(even)"), "2", "4", "6", "8", "10"); 		check(html.select("#pseudo :nth-child(2n)"), "2", "4", "6", "8", "10"); 		check(html.select("#pseudo :nth-child(3n-1)"), "2", "5", "8"); 		check(html.select("#pseudo :nth-child(-2n+5)"), "1", "3", "5"); 		check(html.select("#pseudo :nth-child(+5)"), "5"); 	}  	@Test 	public void nthOfType_advanced() { 		check(html.select("#type :nth-of-type(-5)")); 		check(html.select("#type p:nth-of-type(odd)"), "1", "3", "5", "7", "9"); 		check(html.select("#type em:nth-of-type(2n-1)"), "1", "3", "5", "7", "9"); 		check(html.select("#type p:nth-of-type(2n+1)"), "1", "3", "5", "7", "9"); 		check(html.select("#type span:nth-of-type(2n+3)"), "3", "5", "7", "9"); 		check(html.select("#type p:nth-of-type(even)"), "2", "4", "6", "8", "10"); 		check(html.select("#type p:nth-of-type(2n)"), "2", "4", "6", "8", "10"); 		check(html.select("#type p:nth-of-type(3n-1)"), "2", "5", "8"); 		check(html.select("#type p:nth-of-type(-2n+5)"), "1", "3", "5"); 		check(html.select("#type :nth-of-type(+5)"), "5", "5", "5", "5"); 	}   	@Test 	public void nthLastChild_advanced() { 		check(html.select("#pseudo :nth-last-child(-5)")); 		check(html.select("#pseudo :nth-last-child(odd)"), "2", "4", "6", "8", "10"); 		check(html.select("#pseudo :nth-last-child(2n-1)"), "2", "4", "6", "8", "10"); 		check(html.select("#pseudo :nth-last-child(2n+1)"), "2", "4", "6", "8", "10"); 		check(html.select("#pseudo :nth-last-child(2n+3)"), "2", "4", "6", "8"); 		check(html.select("#pseudo :nth-last-child(even)"), "1", "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-last-child(2n)"), "1", "3", "5", "7", "9"); 		check(html.select("#pseudo :nth-last-child(3n-1)"), "3", "6", "9");  		check(html.select("#pseudo :nth-last-child(-2n+5)"), "6", "8", "10"); 		check(html.select("#pseudo :nth-last-child(+5)"), "6"); 	}  	@Test 	public void nthLastOfType_advanced() { 		check(html.select("#type :nth-last-of-type(-5)")); 		check(html.select("#type p:nth-last-of-type(odd)"), "2", "4", "6", "8", "10"); 		check(html.select("#type em:nth-last-of-type(2n-1)"), "2", "4", "6", "8", "10"); 		check(html.select("#type p:nth-last-of-type(2n+1)"), "2", "4", "6", "8", "10"); 		check(html.select("#type span:nth-last-of-type(2n+3)"), "2", "4", "6", "8"); 		check(html.select("#type p:nth-last-of-type(even)"), "1", "3", "5", "7", "9"); 		check(html.select("#type p:nth-last-of-type(2n)"), "1", "3", "5", "7", "9"); 		check(html.select("#type p:nth-last-of-type(3n-1)"), "3", "6", "9");  		check(html.select("#type span:nth-last-of-type(-2n+5)"), "6", "8", "10"); 		check(html.select("#type :nth-last-of-type(+5)"), "6", "6", "6", "6"); 	}  	@Test 	public void firstOfType() { 		check(html.select("div:not(#only) :first-of-type"), "1", "1", "1", "1", "1"); 	}  	@Test 	public void lastOfType() { 		check(html.select("div:not(#only) :last-of-type"), "10", "10", "10", "10", "10"); 	}  	@Test 	public void empty() { 		final Elements sel = html.select(":empty"); 		assertEquals(3, sel.size()); 		assertEquals("head", sel.get(0).tagName()); 		assertEquals("br", sel.get(1).tagName()); 		assertEquals("p", sel.get(2).tagName()); 	}  	@Test 	public void onlyChild() { 		final Elements sel = html.select("span :only-child"); 		assertEquals(1, sel.size()); 		assertEquals("br", sel.get(0).tagName());  		check(html.select("#only :only-child"), "only"); 	}  	@Test 	public void onlyOfType() { 		final Elements sel = html.select(":only-of-type"); 		assertEquals(6, sel.size()); 		assertEquals("head", sel.get(0).tagName()); 		assertEquals("body", sel.get(1).tagName()); 		assertEquals("span", sel.get(2).tagName()); 		assertEquals("br", sel.get(3).tagName()); 		assertEquals("p", sel.get(4).tagName()); 		assertTrue(sel.get(4).hasClass("empty")); 		assertEquals("em", sel.get(5).tagName()); 	}  	protected void check(Elements result, String...expectedContent ) { 		assertEquals(expectedContent.length, result.size(), "Number of elements"); 		for (int i = 0; i < expectedContent.length; i++) { 			assertNotNull(result.get(i)); 			assertEquals(expectedContent[i], result.get(i).ownText(), "Expected element"); 		} 	}  	@Test 	public void root() { 		Elements sel = html.select(":root"); 		assertEquals(1, sel.size()); 		assertNotNull(sel.get(0)); 		assertEquals(Tag.valueOf("html"), sel.get(0).tag());  		Elements sel2 = html.select("body").select(":root"); 		assertEquals(1, sel2.size()); 		assertNotNull(sel2.get(0)); 		assertEquals(Tag.valueOf("body"), sel2.get(0).tag()); 	}  } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.MultiLocaleExtension.MultiLocaleTest; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.parser.Parser; import org.junit.jupiter.api.Test;  import java.util.Locale;  import static org.junit.jupiter.api.Assertions.*;  /**  * Tests that the selector selects correctly.  *  * @author Jonathan Hedley, jonathan@hedley.net  */ public class SelectorTest {     @Test public void testByTag() {         // should be case insensitive         Elements els = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>").select("DIV");         assertEquals(3, els.size());         assertEquals("1", els.get(0).id());         assertEquals("2", els.get(1).id());         assertEquals("3", els.get(2).id());          Elements none = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>").select("span");         assertEquals(0, none.size());     }      @Test public void testById() {         Elements els = Jsoup.parse("<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>").select("#foo");         assertEquals(2, els.size());         assertEquals("Hello", els.get(0).text());         assertEquals("Foo two!", els.get(1).text());          Elements none = Jsoup.parse("<div id=1></div>").select("#foo");         assertEquals(0, none.size());     }      @Test public void testByClass() {         Elements els = Jsoup.parse("<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>").select("P.One");         assertEquals(2, els.size());         assertEquals("0", els.get(0).id());         assertEquals("1", els.get(1).id());          Elements none = Jsoup.parse("<div class='one'></div>").select(".foo");         assertEquals(0, none.size());          Elements els2 = Jsoup.parse("<div class='One-Two'></div>").select(".one-two");         assertEquals(1, els2.size());     }      @Test public void testByClassCaseInsensitive() {         String html = "<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four";         Elements elsFromClass = Jsoup.parse(html).select("P.Foo");         Elements elsFromAttr = Jsoup.parse(html).select("p[class=foo]");          assertEquals(elsFromAttr.size(), elsFromClass.size());         assertEquals(3, elsFromClass.size());         assertEquals("Two", elsFromClass.get(1).text());     }       @MultiLocaleTest     public void testByAttribute(Locale locale) {         Locale.setDefault(locale);          String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />" +                 "<div data-name='with spaces'/>";         Document doc = Jsoup.parse(h);          Elements withTitle = doc.select("[title]");         assertEquals(4, withTitle.size());          Elements foo = doc.select("[TITLE=foo]");         assertEquals(1, foo.size());          Elements foo2 = doc.select("[title=\"foo\"]");         assertEquals(1, foo2.size());          Elements foo3 = doc.select("[title=\"Foo\"]");         assertEquals(1, foo3.size());          Elements dataName = doc.select("[data-name=\"with spaces\"]");         assertEquals(1, dataName.size());         assertEquals("with spaces", dataName.first().attr("data-name"));          Elements not = doc.select("div[title!=bar]");         assertEquals(5, not.size());         assertEquals("Foo", not.first().attr("title"));          Elements starts = doc.select("[title^=ba]");         assertEquals(2, starts.size());         assertEquals("Bar", starts.first().attr("title"));         assertEquals("Balim", starts.last().attr("title"));          Elements ends = doc.select("[title$=im]");         assertEquals(2, ends.size());         assertEquals("Balim", ends.first().attr("title"));         assertEquals("SLIM", ends.last().attr("title"));          Elements contains = doc.select("[title*=i]");         assertEquals(2, contains.size());         assertEquals("Balim", contains.first().attr("title"));         assertEquals("SLIM", contains.last().attr("title"));     }      @Test public void testNamespacedTag() {         Document doc = Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>");         Elements byTag = doc.select("abc|def");         assertEquals(2, byTag.size());         assertEquals("1", byTag.first().id());         assertEquals("2", byTag.last().id());          Elements byAttr = doc.select(".bold");         assertEquals(1, byAttr.size());         assertEquals("2", byAttr.last().id());          Elements byTagAttr = doc.select("abc|def.bold");         assertEquals(1, byTagAttr.size());         assertEquals("2", byTagAttr.last().id());          Elements byContains = doc.select("abc|def:contains(e)");         assertEquals(2, byContains.size());         assertEquals("1", byContains.first().id());         assertEquals("2", byContains.last().id());     }      @Test public void testWildcardNamespacedTag() {         Document doc = Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>");         Elements byTag = doc.select("*|def");         assertEquals(2, byTag.size());         assertEquals("1", byTag.first().id());         assertEquals("2", byTag.last().id());          Elements byAttr = doc.select(".bold");         assertEquals(1, byAttr.size());         assertEquals("2", byAttr.last().id());          Elements byTagAttr = doc.select("*|def.bold");         assertEquals(1, byTagAttr.size());         assertEquals("2", byTagAttr.last().id());          Elements byContains = doc.select("*|def:contains(e)");         assertEquals(2, byContains.size());         assertEquals("1", byContains.first().id());         assertEquals("2", byContains.last().id());     }      @Test public void testWildcardNamespacedXmlTag() {         Document doc = Jsoup.parse(             "<div><Abc:Def id=1>Hello</Abc:Def></div> <Abc:Def class=bold id=2>There</abc:def>",             "", Parser.xmlParser()         );          Elements byTag = doc.select("*|Def");         assertEquals(2, byTag.size());         assertEquals("1", byTag.first().id());         assertEquals("2", byTag.last().id());          Elements byAttr = doc.select(".bold");         assertEquals(1, byAttr.size());         assertEquals("2", byAttr.last().id());          Elements byTagAttr = doc.select("*|Def.bold");         assertEquals(1, byTagAttr.size());         assertEquals("2", byTagAttr.last().id());          Elements byContains = doc.select("*|Def:contains(e)");         assertEquals(2, byContains.size());         assertEquals("1", byContains.first().id());         assertEquals("2", byContains.last().id());     }      @Test public void testWildCardNamespacedCaseVariations() {         Document doc = Jsoup.parse("<One:Two>One</One:Two><three:four>Two</three:four>", "", Parser.xmlParser());         Elements els1 = doc.select("One|Two");         Elements els2 = doc.select("one|two");         Elements els3 = doc.select("Three|Four");         Elements els4 = doc.select("three|Four");          assertEquals(els1, els2);         assertEquals(els3, els4);         assertEquals("One", els1.text());         assertEquals(1, els1.size());         assertEquals("Two", els3.text());         assertEquals(1, els2.size());     }      @MultiLocaleTest     public void testByAttributeStarting(Locale locale) {         Locale.setDefault(locale);          Document doc = Jsoup.parse("<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>");         Elements withData = doc.select("[^data-]");         assertEquals(2, withData.size());         assertEquals("1", withData.first().id());         assertEquals("2", withData.last().id());          withData = doc.select("p[^data-]");         assertEquals(1, withData.size());         assertEquals("2", withData.first().id());          assertEquals(1, doc.select("[^attrib]").size());     }      @Test public void testByAttributeRegex() {         Document doc = Jsoup.parse("<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>");         Elements imgs = doc.select("img[src~=(?i)\\.(png|jpe?g)]");         assertEquals(3, imgs.size());         assertEquals("1", imgs.get(0).id());         assertEquals("2", imgs.get(1).id());         assertEquals("3", imgs.get(2).id());     }      @Test public void testByAttributeRegexCharacterClass() {         Document doc = Jsoup.parse("<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>");         Elements imgs = doc.select("img[src~=[o]]");         assertEquals(2, imgs.size());         assertEquals("1", imgs.get(0).id());         assertEquals("4", imgs.get(1).id());     }      @Test public void testByAttributeRegexCombined() {         Document doc = Jsoup.parse("<div><table class=x><td>Hello</td></table></div>");         Elements els = doc.select("div table[class~=x|y]");         assertEquals(1, els.size());         assertEquals("Hello", els.text());     }      @Test public void testCombinedWithContains() {         Document doc = Jsoup.parse("<p id=1>One</p><p>Two +</p><p>Three +</p>");         Elements els = doc.select("p#1 + :contains(+)");         assertEquals(1, els.size());         assertEquals("Two +", els.text());         assertEquals("p", els.first().tagName());     }      @Test public void testAllElements() {         String h = "<div><p>Hello</p><p><b>there</b></p></div>";         Document doc = Jsoup.parse(h);         Elements allDoc = doc.select("*");         Elements allUnderDiv = doc.select("div *");         assertEquals(8, allDoc.size());         assertEquals(3, allUnderDiv.size());         assertEquals("p", allUnderDiv.first().tagName());     }      @Test public void testAllWithClass() {         String h = "<p class=first>One<p class=first>Two<p>Three";         Document doc = Jsoup.parse(h);         Elements ps = doc.select("*.first");         assertEquals(2, ps.size());     }      @Test public void testGroupOr() {         String h = "<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("p,div,[title]");          assertEquals(5, els.size());         assertEquals("div", els.get(0).tagName());         assertEquals("foo", els.get(0).attr("title"));         assertEquals("div", els.get(1).tagName());         assertEquals("bar", els.get(1).attr("title"));         assertEquals("div", els.get(2).tagName());         assertEquals(0, els.get(2).attr("title").length()); // missing attributes come back as empty string         assertFalse(els.get(2).hasAttr("title"));         assertEquals("p", els.get(3).tagName());         assertEquals("span", els.get(4).tagName());     }      @Test public void testGroupOrAttribute() {         String h = "<div id=1 /><div id=2 /><div title=foo /><div title=bar />";         Elements els = Jsoup.parse(h).select("[id],[title=foo]");          assertEquals(3, els.size());         assertEquals("1", els.get(0).id());         assertEquals("2", els.get(1).id());         assertEquals("foo", els.get(2).attr("title"));     }      @Test public void descendant() {         String h = "<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>";         Document doc = Jsoup.parse(h);         Element root = doc.getElementsByClass("HEAD").first();          Elements els = root.select(".head p");         assertEquals(2, els.size());         assertEquals("Hello", els.get(0).text());         assertEquals("There", els.get(1).text());          Elements p = root.select("p.first");         assertEquals(1, p.size());         assertEquals("Hello", p.get(0).text());          Elements empty = root.select("p .first"); // self, not descend, should not match         assertEquals(0, empty.size());          Elements aboveRoot = root.select("body div.head");         assertEquals(0, aboveRoot.size());     }      @Test public void and() {         String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div";         Document doc = Jsoup.parse(h);          Elements div = doc.select("div.foo");         assertEquals(1, div.size());         assertEquals("div", div.first().tagName());          Elements p = doc.select("div .foo"); // space indicates like "div *.foo"         assertEquals(1, p.size());         assertEquals("p", p.first().tagName());          Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); // very specific!         assertEquals(1, div2.size());         assertEquals("div", div2.first().tagName());          Elements p2 = doc.select("div *.foo"); // space indicates like "div *.foo"         assertEquals(1, p2.size());         assertEquals("p", p2.first().tagName());     }      @Test public void deeperDescendant() {         String h = "<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>";         Document doc = Jsoup.parse(h);         Element root = doc.getElementsByClass("head").first();          Elements els = root.select("div p .first");         assertEquals(1, els.size());         assertEquals("Hello", els.first().text());         assertEquals("span", els.first().tagName());          Elements aboveRoot = root.select("body p .first");         assertEquals(0, aboveRoot.size());     }      @Test public void parentChildElement() {         String h = "<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>";         Document doc = Jsoup.parse(h);          Elements divs = doc.select("div > div");         assertEquals(2, divs.size());         assertEquals("2", divs.get(0).id()); // 2 is child of 1         assertEquals("3", divs.get(1).id()); // 3 is child of 2          Elements div2 = doc.select("div#1 > div");         assertEquals(1, div2.size());         assertEquals("2", div2.get(0).id());     }      @Test public void parentWithClassChild() {         String h = "<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>";         Document doc = Jsoup.parse(h);          Elements allAs = doc.select("h1 > a");         assertEquals(3, allAs.size());         assertEquals("a", allAs.first().tagName());          Elements fooAs = doc.select("h1.foo > a");         assertEquals(2, fooAs.size());         assertEquals("a", fooAs.first().tagName());          Elements barAs = doc.select("h1.foo > a.bar");         assertEquals(1, barAs.size());     }      @Test public void parentChildStar() {         String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>";         Document doc = Jsoup.parse(h);         Elements divChilds = doc.select("div > *");         assertEquals(3, divChilds.size());         assertEquals("p", divChilds.get(0).tagName());         assertEquals("p", divChilds.get(1).tagName());         assertEquals("span", divChilds.get(2).tagName());     }      @Test public void multiChildDescent() {         String h = "<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("div#foo > h1.bar > a[href*=example]");         assertEquals(1, els.size());         assertEquals("a", els.first().tagName());     }      @Test public void caseInsensitive() {         String h = "<dIv tItle=bAr><div>"; // mixed case so a simple toLowerCase() on value doesn't catch         Document doc = Jsoup.parse(h);          assertEquals(2, doc.select("DiV").size());         assertEquals(1, doc.select("DiV[TiTLE]").size());         assertEquals(1, doc.select("DiV[TiTLE=BAR]").size());         assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size());     }      @Test public void adjacentSiblings() {         String h = "<ol><li>One<li>Two<li>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li + li");         assertEquals(2, sibs.size());         assertEquals("Two", sibs.get(0).text());         assertEquals("Three", sibs.get(1).text());     }      @Test public void adjacentSiblingsWithId() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li#1 + li#2");         assertEquals(1, sibs.size());         assertEquals("Two", sibs.get(0).text());     }      @Test public void notAdjacent() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li#1 + li#3");         assertEquals(0, sibs.size());     }      @Test public void mixCombinator() {         String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("body > div.foo li + li");          assertEquals(2, sibs.size());         assertEquals("Two", sibs.get(0).text());         assertEquals("Three", sibs.get(1).text());     }      @Test public void mixCombinatorGroup() {         String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select(".foo > ol, ol > li + li");          assertEquals(3, els.size());         assertEquals("ol", els.get(0).tagName());         assertEquals("Two", els.get(1).text());         assertEquals("Three", els.get(2).text());     }      @Test public void generalSiblings() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("#1 ~ #3");         assertEquals(1, els.size());         assertEquals("Three", els.first().text());     }      // for http://github.com/jhy/jsoup/issues#issue/10     @Test public void testCharactersInIdAndClass() {         // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)         String h = "<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>";         Document doc = Jsoup.parse(h);          Element el1 = doc.getElementById("a1-foo_bar");         assertEquals("One", el1.text());         Element el2 = doc.getElementsByClass("b2-qux_bif").first();         assertEquals("Two", el2.text());          Element el3 = doc.select("#a1-foo_bar").first();         assertEquals("One", el3.text());         Element el4 = doc.select(".b2-qux_bif").first();         assertEquals("Two", el4.text());     }      // for http://github.com/jhy/jsoup/issues#issue/13     @Test public void testSupportsLeadingCombinator() {         String h = "<div><p><span>One</span><span>Two</span></p></div>";         Document doc = Jsoup.parse(h);          Element p = doc.select("div > p").first();         Elements spans = p.select("> span");         assertEquals(2, spans.size());         assertEquals("One", spans.first().text());          // make sure doesn't get nested         h = "<div id=1><div id=2><div id=3></div></div></div>";         doc = Jsoup.parse(h);         Element div = doc.select("div").select(" > div").first();         assertEquals("2", div.id());     }      @Test public void testPseudoLessThan() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:lt(2)");         assertEquals(3, ps.size());         assertEquals("One", ps.get(0).text());         assertEquals("Two", ps.get(1).text());         assertEquals("Four", ps.get(2).text());     }      @Test public void testPseudoGreaterThan() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>");         Elements ps = doc.select("div p:gt(0)");         assertEquals(2, ps.size());         assertEquals("Two", ps.get(0).text());         assertEquals("Three", ps.get(1).text());     }      @Test public void testPseudoEquals() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:eq(0)");         assertEquals(2, ps.size());         assertEquals("One", ps.get(0).text());         assertEquals("Four", ps.get(1).text());          Elements ps2 = doc.select("div:eq(0) p:eq(0)");         assertEquals(1, ps2.size());         assertEquals("One", ps2.get(0).text());         assertEquals("p", ps2.get(0).tagName());     }      @Test public void testPseudoBetween() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:gt(0):lt(2)");         assertEquals(1, ps.size());         assertEquals("Two", ps.get(0).text());     }      @Test public void testPseudoCombined() {         Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>");         Elements ps = doc.select("div.foo p:gt(0)");         assertEquals(1, ps.size());         assertEquals("Two", ps.get(0).text());     }      @Test public void testPseudoHas() {         Document doc = Jsoup.parse("<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>");          Elements divs1 = doc.select("div:has(span)");         assertEquals(2, divs1.size());         assertEquals("0", divs1.get(0).id());         assertEquals("1", divs1.get(1).id());          Elements divs2 = doc.select("div:has([class])");         assertEquals(1, divs2.size());         assertEquals("1", divs2.get(0).id());          Elements divs3 = doc.select("div:has(span, p)");         assertEquals(3, divs3.size());         assertEquals("0", divs3.get(0).id());         assertEquals("1", divs3.get(1).id());         assertEquals("2", divs3.get(2).id());          Elements els1 = doc.body().select(":has(p)");         assertEquals(3, els1.size()); // body, div, dib         assertEquals("body", els1.first().tagName());         assertEquals("0", els1.get(1).id());         assertEquals("2", els1.get(2).id());          Elements els2 = doc.body().select(":has(> span)");         assertEquals(2,els2.size()); // p, div         assertEquals("p",els2.first().tagName());         assertEquals("1", els2.get(1).id());     }      @Test public void testNestedHas() {         Document doc = Jsoup.parse("<div><p><span>One</span></p></div> <div><p>Two</p></div>");         Elements divs = doc.select("div:has(p:has(span))");         assertEquals(1, divs.size());         assertEquals("One", divs.first().text());          // test matches in has         divs = doc.select("div:has(p:matches((?i)two))");         assertEquals(1, divs.size());         assertEquals("div", divs.first().tagName());         assertEquals("Two", divs.first().text());          // test contains in has         divs = doc.select("div:has(p:contains(two))");         assertEquals(1, divs.size());         assertEquals("div", divs.first().tagName());         assertEquals("Two", divs.first().text());     }      @MultiLocaleTest     public void testPseudoContains(Locale locale) {         Locale.setDefault(locale);          Document doc = Jsoup.parse("<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>");          Elements ps1 = doc.select("p:contains(Rain)");         assertEquals(3, ps1.size());          Elements ps2 = doc.select("p:contains(the rain)");         assertEquals(2, ps2.size());         assertEquals("The Rain.", ps2.first().html());         assertEquals("The <i>RAIN</i>.", ps2.last().html());          Elements ps3 = doc.select("p:contains(the Rain):has(i)");         assertEquals(1, ps3.size());         assertEquals("light", ps3.first().className());          Elements ps4 = doc.select(".light:contains(rain)");         assertEquals(1, ps4.size());         assertEquals("light", ps3.first().className());          Elements ps5 = doc.select(":contains(rain)");         assertEquals(8, ps5.size()); // html, body, div,...          Elements ps6 = doc.select(":contains(RAIN)");         assertEquals(8, ps6.size());     }      @Test public void testPsuedoContainsWithParentheses() {         Document doc = Jsoup.parse("<div><p id=1>This (is good)</p><p id=2>This is bad)</p>");          Elements ps1 = doc.select("p:contains(this (is good))");         assertEquals(1, ps1.size());         assertEquals("1", ps1.first().id());          Elements ps2 = doc.select("p:contains(this is bad\\))");         assertEquals(1, ps2.size());         assertEquals("2", ps2.first().id());     }      @MultiLocaleTest     public void containsOwn(Locale locale) {         Locale.setDefault(locale);          Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> igor</p>");         Elements ps = doc.select("p:containsOwn(Hello IGOR)");         assertEquals(1, ps.size());         assertEquals("1", ps.first().id());          assertEquals(0, doc.select("p:containsOwn(there)").size());          Document doc2 = Jsoup.parse("<p>Hello <b>there</b> IGOR</p>");         assertEquals(1, doc2.select("p:containsOwn(igor)").size());      }      @Test public void testMatches() {         Document doc = Jsoup.parse("<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>");          Elements p1 = doc.select("p:matches(The rain)"); // no match, case sensitive         assertEquals(0, p1.size());          Elements p2 = doc.select("p:matches((?i)the rain)"); // case insense. should include root, html, body         assertEquals(1, p2.size());         assertEquals("1", p2.first().id());          Elements p4 = doc.select("p:matches((?i)^rain$)"); // bounding         assertEquals(1, p4.size());         assertEquals("4", p4.first().id());          Elements p5 = doc.select("p:matches(\\d+)");         assertEquals(1, p5.size());         assertEquals("2", p5.first().id());          Elements p6 = doc.select("p:matches(\\w+\\s+\\(\\w+\\))"); // test bracket matching         assertEquals(1, p6.size());         assertEquals("3", p6.first().id());          Elements p7 = doc.select("p:matches((?i)the):has(i)"); // multi         assertEquals(1, p7.size());         assertEquals("1", p7.first().id());     }      @Test public void matchesOwn() {         Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>");          Elements p1 = doc.select("p:matchesOwn((?i)hello now)");         assertEquals(1, p1.size());         assertEquals("1", p1.first().id());          assertEquals(0, doc.select("p:matchesOwn(there)").size());     }      @Test public void testRelaxedTags() {         Document doc = Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>");          Elements el1 = doc.select("abc_def");         assertEquals(1, el1.size());         assertEquals("1", el1.first().id());          Elements el2 = doc.select("abc-def");         assertEquals(1, el2.size());         assertEquals("2", el2.first().id());     }      @Test public void notParas() {         Document doc = Jsoup.parse("<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>");          Elements el1 = doc.select("p:not([id=1])");         assertEquals(2, el1.size());         assertEquals("Two", el1.first().text());         assertEquals("Three", el1.last().text());          Elements el2 = doc.select("p:not(:has(span))");         assertEquals(2, el2.size());         assertEquals("One", el2.first().text());         assertEquals("Two", el2.last().text());     }      @Test public void notAll() {         Document doc = Jsoup.parse("<p>Two</p> <p><span>Three</span></p>");          Elements el1 = doc.body().select(":not(p)"); // should just be the span         assertEquals(2, el1.size());         assertEquals("body", el1.first().tagName());         assertEquals("span", el1.last().tagName());     }      @Test public void notClass() {         Document doc = Jsoup.parse("<div class=left>One</div><div class=right id=1><p>Two</p></div>");          Elements el1 = doc.select("div:not(.left)");         assertEquals(1, el1.size());         assertEquals("1", el1.first().id());     }      @Test public void handlesCommasInSelector() {         Document doc = Jsoup.parse("<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>");          Elements ps = doc.select("[name=1,2]");         assertEquals(1, ps.size());          Elements containers = doc.select("div, li:matches([0-9,]+)");         assertEquals(2, containers.size());         assertEquals("div", containers.get(0).tagName());         assertEquals("li", containers.get(1).tagName());         assertEquals("123", containers.get(1).text());     }      @Test public void selectSupplementaryCharacter() {         String s = new String(Character.toChars(135361));         Document doc = Jsoup.parse("<div k" + s + "='" + s + "'>^" + s +"$/div>");         assertEquals("div", doc.select("div[k" + s + "]").first().tagName());         assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName());     }      @Test     public void selectClassWithSpace() {         final String html = "<div class=\"value\">class without space</div>\n"                           + "<div class=\"value \">class with space</div>";          Document doc = Jsoup.parse(html);          Elements found = doc.select("div[class=value ]");         assertEquals(2, found.size());         assertEquals("class without space", found.get(0).text());         assertEquals("class with space", found.get(1).text());          found = doc.select("div[class=\"value \"]");         assertEquals(2, found.size());         assertEquals("class without space", found.get(0).text());         assertEquals("class with space", found.get(1).text());          found = doc.select("div[class=\"value\\ \"]");         assertEquals(0, found.size());     }      @Test public void selectSameElements() {         final String html = "<div>one</div><div>one</div>";          Document doc = Jsoup.parse(html);         Elements els = doc.select("div");         assertEquals(2, els.size());          Elements subSelect = els.select(":contains(one)");         assertEquals(2, subSelect.size());     }      @Test public void attributeWithBrackets() {         String html = "<div data='End]'>One</div> <div data='[Another)]]'>Two</div>";         Document doc = Jsoup.parse(html);         assertEquals("One", doc.select("div[data='End]']").first().text());         assertEquals("Two", doc.select("div[data='[Another)]]']").first().text());         assertEquals("One", doc.select("div[data=\"End]\"]").first().text());         assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text());     }      @MultiLocaleTest     public void containsData(Locale locale) {         Locale.setDefault(locale);          String html = "<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>";         Document doc = Jsoup.parse(html);         Element body = doc.body();          Elements dataEls1 = body.select(":containsData(function)");         Elements dataEls2 = body.select("script:containsData(function)");         Elements dataEls3 = body.select("span:containsData(comments)");         Elements dataEls4 = body.select(":containsData(o)");         Elements dataEls5 = body.select("style:containsData(ITEM)");          assertEquals(2, dataEls1.size()); // body and script         assertEquals(1, dataEls2.size());         assertEquals(dataEls1.last(), dataEls2.first());         assertEquals("<script>FUNCTION</script>", dataEls2.outerHtml());         assertEquals(1, dataEls3.size());         assertEquals("span", dataEls3.first().tagName());         assertEquals(3, dataEls4.size());         assertEquals("body", dataEls4.first().tagName());         assertEquals("script", dataEls4.get(1).tagName());         assertEquals("span", dataEls4.get(2).tagName());         assertEquals(1, dataEls5.size());     }      @Test public void containsWithQuote() {         String html = "<p>One'One</p><p>One'Two</p>";         Document doc = Jsoup.parse(html);         Elements els = doc.select("p:contains(One\\'One)");         assertEquals(1, els.size());         assertEquals("One'One", els.text());     }      @Test public void selectFirst() {         String html = "<p>One<p>Two<p>Three";         Document doc = Jsoup.parse(html);         assertEquals("One", doc.selectFirst("p").text());     }      @Test public void selectFirstWithAnd() {         String html = "<p>One<p class=foo>Two<p>Three";         Document doc = Jsoup.parse(html);         assertEquals("Two", doc.selectFirst("p.foo").text());     }      @Test public void selectFirstWithOr() {         String html = "<p>One<p>Two<p>Three<div>Four";         Document doc = Jsoup.parse(html);         assertEquals("One", doc.selectFirst("p, div").text());     }      @Test public void matchText() {         String html = "<p>One<br>Two</p>";         Document doc = Jsoup.parse(html);         String origHtml = doc.html();          Elements one = doc.select("p:matchText:first-child");         assertEquals("One", one.first().text());          Elements two = doc.select("p:matchText:last-child");         assertEquals("Two", two.first().text());          assertEquals(origHtml, doc.html());          assertEquals("Two", doc.select("p:matchText + br + *").text());     }      @Test public void splitOnBr() {         String html = "<div><p>One<br>Two<br>Three</p></div>";         Document doc = Jsoup.parse(html);          Elements els = doc.select("p:matchText");         assertEquals(3, els.size());         assertEquals("One", els.get(0).text());         assertEquals("Two", els.get(1).text());         assertEquals("Three", els.get(2).toString());     }      @Test public void matchTextAttributes() {         Document doc = Jsoup.parse("<div><p class=one>One<br>Two<p class=two>Three<br>Four");         Elements els = doc.select("p.two:matchText:last-child");          assertEquals(1, els.size());         assertEquals("Four", els.text());     }      @Test public void findBetweenSpan() {         Document doc = Jsoup.parse("<p><span>One</span> Two <span>Three</span>");         Elements els = doc.select("span ~ p:matchText"); // the Two becomes its own p, sibling of the span          assertEquals(1, els.size());         assertEquals("Two", els.text());     }      @Test public void startsWithBeginsWithSpace() {         Document doc = Jsoup.parse("<small><a href=\" mailto:abc@def.net\">(abc@def.net)</a></small>");         Elements els = doc.select("a[href^=' mailto']");          assertEquals(1, els.size());     }      @Test public void endsWithEndsWithSpaces() {         Document doc = Jsoup.parse("<small><a href=\" mailto:abc@def.net \">(abc@def.net)</a></small>");         Elements els = doc.select("a[href$='.net ']");          assertEquals(1, els.size());     }      // https://github.com/jhy/jsoup/issues/1257     private final String mixedCase =         "<html xmlns:n=\"urn:ns\"><n:mixedCase>text</n:mixedCase></html>";     private final String lowercase =         "<html xmlns:n=\"urn:ns\"><n:lowercase>text</n:lowercase></html>";      @Test     public void html_mixed_case_simple_name() {         Document doc = Jsoup.parse(mixedCase, "", Parser.htmlParser());         assertEquals(0, doc.select("mixedCase").size());     }      @Test     public void html_mixed_case_wildcard_name() {         Document doc = Jsoup.parse(mixedCase, "", Parser.htmlParser());         assertEquals(1, doc.select("*|mixedCase").size());     }      @Test     public void html_lowercase_simple_name() {         Document doc = Jsoup.parse(lowercase, "", Parser.htmlParser());         assertEquals(0, doc.select("lowercase").size());     }      @Test     public void html_lowercase_wildcard_name() {         Document doc = Jsoup.parse(lowercase, "", Parser.htmlParser());         assertEquals(1, doc.select("*|lowercase").size());     }      @Test     public void xml_mixed_case_simple_name() {         Document doc = Jsoup.parse(mixedCase, "", Parser.xmlParser());         assertEquals(0, doc.select("mixedCase").size());     }      @Test     public void xml_mixed_case_wildcard_name() {         Document doc = Jsoup.parse(mixedCase, "", Parser.xmlParser());         assertEquals(1, doc.select("*|mixedCase").size());     }      @Test     public void xml_lowercase_simple_name() {         Document doc = Jsoup.parse(lowercase, "", Parser.xmlParser());         assertEquals(0, doc.select("lowercase").size());     }      @Test     public void xml_lowercase_wildcard_name() {         Document doc = Jsoup.parse(lowercase, "", Parser.xmlParser());         assertEquals(1, doc.select("*|lowercase").size());     }      @Test     public void trimSelector() {         // https://github.com/jhy/jsoup/issues/1274         Document doc = Jsoup.parse("<p><span>Hello");         Elements els = doc.select(" p span ");         assertEquals(1, els.size());         assertEquals("Hello", els.first().text());     }      @Test     public void xmlWildcardNamespaceTest() {         // https://github.com/jhy/jsoup/issues/1208         Document doc = Jsoup.parse("<ns1:MyXmlTag>1111</ns1:MyXmlTag><ns2:MyXmlTag>2222</ns2:MyXmlTag>", "", Parser.xmlParser());         Elements select = doc.select("*|MyXmlTag");         assertEquals(2, select.size());         assertEquals("1111", select.get(0).text());         assertEquals("2222", select.get(1).text());     }      @Test     public void childElements() {         // https://github.com/jhy/jsoup/issues/1292         String html = "<body><span id=1>One <span id=2>Two</span></span></body>";         Document doc = Jsoup.parse(html);          Element outer = doc.selectFirst("span");         Element span = outer.selectFirst("span");         Element inner = outer.selectFirst("* span");          assertEquals("1", outer.id());         assertEquals("1", span.id());         assertEquals("2", inner.id());         assertEquals(outer, span);         assertNotEquals(outer, inner);     } } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.nodes.*; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  Tests for ElementList.   @author Jonathan Hedley, jonathan@hedley.net */ public class ElementsTest {     @Test public void filter() {         String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select(".headline").select("p");         assertEquals(2, els.size());         assertEquals("Hello", els.get(0).text());         assertEquals("There", els.get(1).text());     }      @Test public void attributes() {         String h = "<p title=foo><p title=bar><p class=foo><p class=bar>";         Document doc = Jsoup.parse(h);         Elements withTitle = doc.select("p[title]");         assertEquals(2, withTitle.size());         assertTrue(withTitle.hasAttr("title"));         assertFalse(withTitle.hasAttr("class"));         assertEquals("foo", withTitle.attr("title"));          withTitle.removeAttr("title");         assertEquals(2, withTitle.size()); // existing Elements are not reevaluated         assertEquals(0, doc.select("p[title]").size());          Elements ps = doc.select("p").attr("style", "classy");         assertEquals(4, ps.size());         assertEquals("classy", ps.last().attr("style"));         assertEquals("bar", ps.last().attr("class"));     }      @Test public void hasAttr() {         Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>");         Elements ps = doc.select("p");         assertTrue(ps.hasAttr("class"));         assertFalse(ps.hasAttr("style"));     }      @Test public void hasAbsAttr() {         Document doc = Jsoup.parse("<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>");         Elements one = doc.select("#1");         Elements two = doc.select("#2");         Elements both = doc.select("a");         assertFalse(one.hasAttr("abs:href"));         assertTrue(two.hasAttr("abs:href"));         assertTrue(both.hasAttr("abs:href")); // hits on #2     }      @Test public void attr() {         Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>");         String classVal = doc.select("p").attr("class");         assertEquals("foo", classVal);     }      @Test public void absAttr() {         Document doc = Jsoup.parse("<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>");         Elements one = doc.select("#1");         Elements two = doc.select("#2");         Elements both = doc.select("a");          assertEquals("", one.attr("abs:href"));         assertEquals("https://jsoup.org", two.attr("abs:href"));         assertEquals("https://jsoup.org", both.attr("abs:href"));     }      @Test public void classes() {         Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>");          Elements els = doc.select("p");         assertTrue(els.hasClass("red"));         assertFalse(els.hasClass("blue"));         els.addClass("blue");         els.removeClass("yellow");         els.toggleClass("mellow");          assertEquals("blue", els.get(0).className());         assertEquals("red green blue mellow", els.get(1).className());     }      @Test public void hasClassCaseInsensitive() {         Elements els = Jsoup.parse("<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE").select("p");         Element one = els.get(0);         Element two = els.get(1);         Element thr = els.get(2);          assertTrue(one.hasClass("One"));         assertTrue(one.hasClass("ONE"));          assertTrue(two.hasClass("TWO"));         assertTrue(two.hasClass("Two"));          assertTrue(thr.hasClass("ThreE"));         assertTrue(thr.hasClass("three"));     }      @Test public void text() {         String h = "<div><p>Hello<p>there<p>world</div>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there world", doc.select("div > *").text());     }      @Test public void hasText() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>");         Elements divs = doc.select("div");         assertTrue(divs.hasText());         assertFalse(doc.select("div + div").hasText());     }      @Test public void html() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>");         Elements divs = doc.select("div");         assertEquals("<p>Hello</p>\n<p>There</p>", divs.html());     }      @Test public void outerHtml() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>");         Elements divs = doc.select("div");         assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()));     }      @Test public void setHtml() {         Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>");         Elements ps = doc.select("p");          ps.prepend("<b>Bold</b>").append("<i>Ital</i>");         assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()));          ps.html("<span>Gone</span>");         assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()));     }      @Test public void val() {         Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>");         Elements els = doc.select("input, textarea");         assertEquals(2, els.size());         assertEquals("one", els.val());         assertEquals("two", els.last().val());          els.val("three");         assertEquals("three", els.first().val());         assertEquals("three", els.last().val());         assertEquals("<textarea>three</textarea>", els.last().outerHtml());     }      @Test public void before() {         Document doc = Jsoup.parse("<p>This <a>is</a> <a>jsoup</a>.</p>");         doc.select("a").before("<span>foo</span>");         assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void after() {         Document doc = Jsoup.parse("<p>This <a>is</a> <a>jsoup</a>.</p>");         doc.select("a").after("<span>foo</span>");         assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void wrap() {         String h = "<p><b>This</b> is <b>jsoup</b></p>";         Document doc = Jsoup.parse(h);         doc.select("b").wrap("<i></i>");         assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html());     }      @Test public void wrapDiv() {         String h = "<p><b>This</b> is <b>jsoup</b>.</p> <p>How do you like it?</p>";         Document doc = Jsoup.parse(h);         doc.select("p").wrap("<div></div>");         assertEquals("<div><p><b>This</b> is <b>jsoup</b>.</p></div> <div><p>How do you like it?</p></div>",                 TextUtil.stripNewlines(doc.body().html()));     }      @Test public void unwrap() {         String h = "<div><font>One</font> <font><a href=\"/\">Two</a></font></div";         Document doc = Jsoup.parse(h);         doc.select("font").unwrap();         assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void unwrapP() {         String h = "<p><a>One</a> Two</p> Three <i>Four</i> <p>Fix <i>Six</i></p>";         Document doc = Jsoup.parse(h);         doc.select("p").unwrap();         assertEquals("<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void unwrapKeepsSpace() {         String h = "<p>One <span>two</span> <span>three</span> four</p>";         Document doc = Jsoup.parse(h);         doc.select("span").unwrap();         assertEquals("<p>One two three four</p>", doc.body().html());     }      @Test public void empty() {         Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> <p>now!</p></div>");         doc.outputSettings().prettyPrint(false);          doc.select("p").empty();         assertEquals("<div><p></p> <p></p></div>", doc.body().html());     }      @Test public void remove() {         Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>");         doc.outputSettings().prettyPrint(false);          doc.select("p").remove();         assertEquals("<div> jsoup </div>", doc.body().html());     }      @Test public void eq() {         String h = "<p>Hello<p>there<p>world";         Document doc = Jsoup.parse(h);         assertEquals("there", doc.select("p").eq(1).text());         assertEquals("there", doc.select("p").get(1).text());     }      @Test public void is() {         String h = "<p>Hello<p title=foo>there<p>world";         Document doc = Jsoup.parse(h);         Elements ps = doc.select("p");         assertTrue(ps.is("[title=foo]"));         assertFalse(ps.is("[title=bar]"));     }      @Test public void parents() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><p>There</p>");         Elements parents = doc.select("p").parents();          assertEquals(3, parents.size());         assertEquals("div", parents.get(0).tagName());         assertEquals("body", parents.get(1).tagName());         assertEquals("html", parents.get(2).tagName());     }      @Test public void not() {         Document doc = Jsoup.parse("<div id=1><p>One</p></div> <div id=2><p><span>Two</span></p></div>");          Elements div1 = doc.select("div").not(":has(p > span)");         assertEquals(1, div1.size());         assertEquals("1", div1.first().id());          Elements div2 = doc.select("div").not("#1");         assertEquals(1, div2.size());         assertEquals("2", div2.first().id());     }      @Test public void tagNameSet() {         Document doc = Jsoup.parse("<p>Hello <i>there</i> <i>now</i></p>");         doc.select("i").tagName("em");          assertEquals("<p>Hello <em>there</em> <em>now</em></p>", doc.body().html());     }      @Test public void traverse() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         doc.select("div").traverse(new NodeVisitor() {             @Override             public void head(Node node, int depth) {                 accum.append("<").append(node.nodeName()).append(">");             }              @Override             public void tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");             }         });         assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString());     }      @Test public void forms() {         Document doc = Jsoup.parse("<form id=1><input name=q></form><div /><form id=2><input name=f></form>");         Elements els = doc.select("*");         assertEquals(9, els.size());          List<FormElement> forms = els.forms();         assertEquals(2, forms.size());         assertNotNull(forms.get(0));         assertNotNull(forms.get(1));         assertEquals("1", forms.get(0).id());         assertEquals("2", forms.get(1).id());     }      @Test public void comments() {         Document doc = Jsoup.parse("<!-- comment1 --><p><!-- comment2 --><p class=two><!-- comment3 -->");         List<Comment> comments = doc.select("p").comments();         assertEquals(2, comments.size());         assertEquals(" comment2 ", comments.get(0).getData());         assertEquals(" comment3 ", comments.get(1).getData());          List<Comment> comments1 = doc.select("p.two").comments();         assertEquals(1, comments1.size());         assertEquals(" comment3 ", comments1.get(0).getData());     }      @Test public void textNodes() {         Document doc = Jsoup.parse("One<p>Two<a>Three</a><p>Four</p>Five");         List<TextNode> textNodes = doc.select("p").textNodes();         assertEquals(2, textNodes.size());         assertEquals("Two", textNodes.get(0).text());         assertEquals("Four", textNodes.get(1).text());     }      @Test public void dataNodes() {         Document doc = Jsoup.parse("<p>One</p><script>Two</script><style>Three</style>");         List<DataNode> dataNodes = doc.select("p, script, style").dataNodes();         assertEquals(2, dataNodes.size());         assertEquals("Two", dataNodes.get(0).getWholeData());         assertEquals("Three", dataNodes.get(1).getWholeData());          doc = Jsoup.parse("<head><script type=application/json><crux></script><script src=foo>Blah</script>");         Elements script = doc.select("script[type=application/json]");         List<DataNode> scriptNode = script.dataNodes();         assertEquals(1, scriptNode.size());         DataNode dataNode = scriptNode.get(0);         assertEquals("<crux>", dataNode.getWholeData());          // check if they're live         dataNode.setWholeData("<cromulent>");         assertEquals("<script type=\"application/json\"><cromulent></script>", script.outerHtml());     }      @Test public void nodesEmpty() {         Document doc = Jsoup.parse("<p>");         assertEquals(0, doc.select("form").textNodes().size());     }      @Test public void formElementsDescendButNotAccumulate() {         Document doc = Jsoup.parse("<div><div><form id=1>");         assertEquals(1, doc.select("div").forms().size());     }      @Test public void classWithHyphen() {         Document doc = Jsoup.parse("<p class='tab-nav'>Check</p>");         Elements els = doc.getElementsByClass("tab-nav");         assertEquals(1, els.size());         assertEquals("Check", els.text());     }      @Test public void siblings() {         Document doc = Jsoup.parse("<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12</div>");          Elements els = doc.select("p:eq(3)"); // gets p4 and p10         assertEquals(2, els.size());          Elements next = els.next();         assertEquals(2, next.size());         assertEquals("5", next.first().text());         assertEquals("11", next.last().text());          assertEquals(0, els.next("p:contains(6)").size());         final Elements nextF = els.next("p:contains(5)");         assertEquals(1, nextF.size());         assertEquals("5", nextF.first().text());          Elements nextA = els.nextAll();         assertEquals(4, nextA.size());         assertEquals("5", nextA.first().text());         assertEquals("12", nextA.last().text());          Elements nextAF = els.nextAll("p:contains(6)");         assertEquals(1, nextAF.size());         assertEquals("6", nextAF.first().text());          Elements prev = els.prev();         assertEquals(2, prev.size());         assertEquals("3", prev.first().text());         assertEquals("9", prev.last().text());          assertEquals(0, els.prev("p:contains(1)").size());         final Elements prevF = els.prev("p:contains(3)");         assertEquals(1, prevF.size());         assertEquals("3", prevF.first().text());          Elements prevA = els.prevAll();         assertEquals(6, prevA.size());         assertEquals("3", prevA.first().text());         assertEquals("7", prevA.last().text());          Elements prevAF = els.prevAll("p:contains(1)");         assertEquals(1, prevAF.size());         assertEquals("1", prevAF.first().text());     }      @Test public void eachText() {         Document doc = Jsoup.parse("<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12<p></p></div>");         List<String> divText = doc.select("div").eachText();         assertEquals(2, divText.size());         assertEquals("1 2 3 4 5 6", divText.get(0));         assertEquals("7 8 9 10 11 12", divText.get(1));          List<String> pText = doc.select("p").eachText();         Elements ps = doc.select("p");         assertEquals(13, ps.size());         assertEquals(12, pText.size()); // not 13, as last doesn't have text         assertEquals("1", pText.get(0));         assertEquals("2", pText.get(1));         assertEquals("5", pText.get(4));         assertEquals("7", pText.get(6));         assertEquals("12", pText.get(11));     }      @Test public void eachAttr() {         Document doc = Jsoup.parse(             "<div><a href='/foo'>1</a><a href='http://example.com/bar'>2</a><a href=''>3</a><a>4</a>",             "http://example.com");          List<String> hrefAttrs = doc.select("a").eachAttr("href");         assertEquals(3, hrefAttrs.size());         assertEquals("/foo", hrefAttrs.get(0));         assertEquals("http://example.com/bar", hrefAttrs.get(1));         assertEquals("", hrefAttrs.get(2));         assertEquals(4, doc.select("a").size());          List<String> absAttrs = doc.select("a").eachAttr("abs:href");         assertEquals(3, absAttrs.size());         assertEquals(3, absAttrs.size());         assertEquals("http://example.com/foo", absAttrs.get(0));         assertEquals("http://example.com/bar", absAttrs.get(1));         assertEquals("http://example.com", absAttrs.get(2));     } } 
package org.jsoup.select;  import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.*;  /**  * Tests for the Selector Query Parser.  *  * @author Jonathan Hedley  */ public class QueryParserTest {     @Test public void testOrGetsCorrectPrecedence() {         // tests that a selector "a b, c d, e f" evals to (a AND b) OR (c AND d) OR (e AND f)"         // top level or, three child ands         Evaluator eval = QueryParser.parse("a b, c d, e f");         assertTrue(eval instanceof CombiningEvaluator.Or);         CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;         assertEquals(3, or.evaluators.size());         for (Evaluator innerEval: or.evaluators) {             assertTrue(innerEval instanceof CombiningEvaluator.And);             CombiningEvaluator.And and = (CombiningEvaluator.And) innerEval;             assertEquals(2, and.evaluators.size());             assertTrue(and.evaluators.get(0) instanceof Evaluator.Tag);             assertTrue(and.evaluators.get(1) instanceof StructuralEvaluator.Parent);         }     }      @Test public void testParsesMultiCorrectly() {         Evaluator eval = QueryParser.parse(".foo > ol, ol > li + li");         assertTrue(eval instanceof CombiningEvaluator.Or);         CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;         assertEquals(2, or.evaluators.size());          CombiningEvaluator.And andLeft = (CombiningEvaluator.And) or.evaluators.get(0);         CombiningEvaluator.And andRight = (CombiningEvaluator.And) or.evaluators.get(1);          assertEquals("ol :ImmediateParent.foo", andLeft.toString());         assertEquals(2, andLeft.evaluators.size());         assertEquals("li :prevli :ImmediateParentol", andRight.toString());         assertEquals(2, andLeft.evaluators.size());     }      @Test public void exceptionOnUncloseAttribute() {         assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse("section > a[href=\"]"));     }      @Test public void testParsesSingleQuoteInContains() {         assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse("p:contains(One \" One)"));     }       @Test public void exceptOnEmptySelector() {         assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(""));     }      @Test public void exceptOnNullSelector() {         assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(null));     }      @Test public void okOnSpacesForeAndAft() {         Evaluator parse = QueryParser.parse(" span div  ");         assertEquals("div :parentspan", parse.toString()); // TODO - don't really love that toString() result...     } } 
package org.jsoup.parser;   import org.junit.jupiter.api.Test;  import java.util.Arrays;  import static org.junit.jupiter.api.Assertions.assertArrayEquals;  public class HtmlTreeBuilderTest {     @Test     public void ensureSearchArraysAreSorted() {         String[][] arrays = {             HtmlTreeBuilder.TagsSearchInScope,             HtmlTreeBuilder.TagSearchList,             HtmlTreeBuilder.TagSearchButton,             HtmlTreeBuilder.TagSearchTableScope,             HtmlTreeBuilder.TagSearchSelectScope,             HtmlTreeBuilder.TagSearchEndTags,             HtmlTreeBuilder.TagSearchSpecial         };          for (String[] array : arrays) {             String[] copy = Arrays.copyOf(array, array.length);             Arrays.sort(array);             assertArrayEquals(array, copy);         }     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.*; import org.jsoup.select.Elements; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.net.URISyntaxException; import java.nio.charset.StandardCharsets; import java.util.List;  import static org.jsoup.nodes.Document.OutputSettings.Syntax; import static org.junit.jupiter.api.Assertions.*;  /**  * Tests XmlTreeBuilder.  *  * @author Jonathan Hedley  */ public class XmlTreeBuilderTest {     @Test     public void testSimpleXmlParse() {         String xml = "<doc id=2 href='/bar'>Foo <br /><link>One</link><link>Two</link></doc>";         XmlTreeBuilder tb = new XmlTreeBuilder();         Document doc = tb.parse(xml, "http://foo.com/");         assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>",                 TextUtil.stripNewlines(doc.html()));         assertEquals(doc.getElementById("2").absUrl("href"), "http://foo.com/bar");     }      @Test     public void testPopToClose() {         // test: </val> closes Two, </bar> ignored         String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";         XmlTreeBuilder tb = new XmlTreeBuilder();         Document doc = tb.parse(xml, "http://foo.com/");         assertEquals("<doc><val>One<val>Two</val>Three</val></doc>",                 TextUtil.stripNewlines(doc.html()));     }      @Test     public void testCommentAndDocType() {         String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";         XmlTreeBuilder tb = new XmlTreeBuilder();         Document doc = tb.parse(xml, "http://foo.com/");         assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two",                 TextUtil.stripNewlines(doc.html()));     }      @Test     public void testSupplyParserToJsoupClass() {         String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";         Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());         assertEquals("<doc><val>One<val>Two</val>Three</val></doc>",                 TextUtil.stripNewlines(doc.html()));     }      @Disabled     @Test     public void testSupplyParserToConnection() throws IOException {         String xmlUrl = "http://direct.infohound.net/tools/jsoup-xml-test.xml";          // parse with both xml and html parser, ensure different         Document xmlDoc = Jsoup.connect(xmlUrl).parser(Parser.xmlParser()).get();         Document htmlDoc = Jsoup.connect(xmlUrl).parser(Parser.htmlParser()).get();         Document autoXmlDoc = Jsoup.connect(xmlUrl).get(); // check connection auto detects xml, uses xml parser          assertEquals("<doc><val>One<val>Two</val>Three</val></doc>",                 TextUtil.stripNewlines(xmlDoc.html()));         assertNotEquals(htmlDoc, xmlDoc);         assertEquals(xmlDoc, autoXmlDoc);         assertEquals(1, htmlDoc.select("head").size()); // html parser normalises         assertEquals(0, xmlDoc.select("head").size()); // xml parser does not         assertEquals(0, autoXmlDoc.select("head").size()); // xml parser does not     }      @Test     public void testSupplyParserToDataStream() throws IOException, URISyntaxException {         File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());         InputStream inStream = new FileInputStream(xmlFile);         Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());         assertEquals("<doc><val>One<val>Two</val>Three</val></doc>",                 TextUtil.stripNewlines(doc.html()));     }      @Test     public void testDoesNotForceSelfClosingKnownTags() {         // html will force "<br>one</br>" to logically "<br />One<br />". XML should be stay "<br>one</br> -- don't recognise tag.         Document htmlDoc = Jsoup.parse("<br>one</br>");         assertEquals("<br>one\n<br>", htmlDoc.body().html());          Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());         assertEquals("<br>one</br>", xmlDoc.html());     }      @Test public void handlesXmlDeclarationAsDeclaration() {         String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";         Document doc = Jsoup.parse(html, "", Parser.xmlParser());         assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body><!-- comment -->",                 StringUtil.normaliseWhitespace(doc.outerHtml()));         assertEquals("#declaration", doc.childNode(0).nodeName());         assertEquals("#comment", doc.childNode(2).nodeName());     }      @Test public void xmlFragment() {         String xml = "<one src='/foo/' />Two<three><four /></three>";         List<Node> nodes = Parser.parseXmlFragment(xml, "http://example.com/");         assertEquals(3, nodes.size());          assertEquals("http://example.com/foo/", nodes.get(0).absUrl("src"));         assertEquals("one", nodes.get(0).nodeName());         assertEquals("Two", ((TextNode)nodes.get(1)).text());     }      @Test public void xmlParseDefaultsToHtmlOutputSyntax() {         Document doc = Jsoup.parse("x", "", Parser.xmlParser());         assertEquals(Syntax.xml, doc.outputSettings().syntax());     }      @Test     public void testDoesHandleEOFInTag() {         String html = "<img src=asdf onerror=\"alert(1)\" x=";         Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());         assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", xmlDoc.html());     }      @Test     public void testDetectCharsetEncodingDeclaration() throws IOException, URISyntaxException {         File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());         InputStream inStream = new FileInputStream(xmlFile);         Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());         assertEquals("ISO-8859-1", doc.charset().name());         assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><data>äöåéü</data>",             TextUtil.stripNewlines(doc.html()));     }      @Test     public void testParseDeclarationAttributes() {         String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);         assertEquals("1", decl.attr("version"));         assertEquals("UTF-8", decl.attr("encoding"));         assertEquals("else", decl.attr("something"));         assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", decl.getWholeDeclaration());         assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", decl.outerHtml());     }      @Test     public void caseSensitiveDeclaration() {         String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", doc.outerHtml());     }      @Test     public void testCreatesValidProlog() {         Document document = Document.createShell("");         document.outputSettings().syntax(Syntax.xml);         document.charset(StandardCharsets.UTF_8);         assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +             "<html>\n" +             " <head></head>\n" +             " <body></body>\n" +             "</html>", document.outerHtml());     }      @Test     public void preservesCaseByDefault() {         String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", TextUtil.stripNewlines(doc.html()));     }      @Test     public void appendPreservesCaseByDefault() {         String xml = "<One>One</One>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         Elements one = doc.select("One");         one.append("<Two ID=2>Two</Two>");         assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", TextUtil.stripNewlines(doc.html()));     }      @Test     public void canNormalizeCase() {         String xml = "<TEST ID=1>Check</TEST>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));         assertEquals("<test id=\"1\">Check</test>", TextUtil.stripNewlines(doc.html()));     }      @Test public void normalizesDiscordantTags() {         Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);         Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);         assertEquals("<div>\n test\n</div>\n<p></p>", document.html());         // was failing -> toString() = "<div>\n test\n <p></p>\n</div>"     }      @Test public void roundTripsCdata() {         String xml = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());          Element div = doc.getElementById("1");         assertEquals("<html>\n <foo><&amp;", div.text());         assertEquals(0, div.children().size());         assertEquals(1, div.childNodeSize()); // no elements, one text node          assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml());          CDataNode cdata = (CDataNode) div.textNodes().get(0);         assertEquals("\n<html>\n <foo><&amp;", cdata.text());     }      @Test public void cdataPreservesWhiteSpace() {         String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         assertEquals(xml, doc.outerHtml());          assertEquals("//\n\n  foo();\n//", doc.selectFirst("script").text());     }      @Test     public void handlesDodgyXmlDecl() {         String xml = "<?xml version='1.0'><val>One</val>";         Document doc = Jsoup.parse(xml, "", Parser.xmlParser());         assertEquals("One", doc.select("val").text());     }      @Test     public void handlesLTinScript() {         // https://github.com/jhy/jsoup/issues/1139         String html = "<script> var a=\"<?\"; var b=\"?>\"; </script>";         Document doc = Jsoup.parse(html, "", Parser.xmlParser());         assertEquals("<script> var a=\"<!--?\"; var b=\"?-->\"; </script>", doc.html()); // converted from pseudo xmldecl to comment     }      @Test public void dropsDuplicateAttributes() {         // case sensitive, so should drop Four and Five         String html = "<p One=One ONE=Two one=Three One=Four ONE=Five two=Six two=Seven Two=Eight>Text</p>";         Parser parser = Parser.xmlParser().setTrackErrors(10);         Document doc = parser.parseInput(html, "");          assertEquals("<p One=\"One\" ONE=\"Two\" one=\"Three\" two=\"Six\" Two=\"Eight\">Text</p>", doc.selectFirst("p").outerHtml());     }      @Test public void readerClosedAfterParse() {         Document doc = Jsoup.parse("Hello", "", Parser.xmlParser());         TreeBuilder treeBuilder = doc.parser().getTreeBuilder();         assertNull(treeBuilder.reader);         assertNull(treeBuilder.tokeniser);     }  } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.nodes.Comment; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import org.junit.jupiter.api.Test;  import java.util.Arrays;  import static org.junit.jupiter.api.Assertions.assertArrayEquals; import static org.junit.jupiter.api.Assertions.assertEquals;  public class TokeniserStateTest {      final char[] whiteSpace = { '\t', '\n', '\r', '\f', ' ' };     final char[] quote = { '\'', '"' };      @Test     public void ensureSearchArraysAreSorted() {         char[][] arrays = {             TokeniserState.attributeNameCharsSorted,             TokeniserState.attributeValueUnquoted         };          for (char[] array : arrays) {             char[] copy = Arrays.copyOf(array, array.length);             Arrays.sort(array);             assertArrayEquals(array, copy);         }     }      @Test     public void testCharacterReferenceInRcdata() {         String body = "<textarea>You&I</textarea>";         Document doc = Jsoup.parse(body);         Elements els = doc.select("textarea");         assertEquals("You&I", els.text());     }      @Test     public void testBeforeTagName() {         for (char c : whiteSpace) {             String body = String.format("<div%c>test</div>", c);             Document doc = Jsoup.parse(body);             Elements els = doc.select("div");             assertEquals("test", els.text());         }     }      @Test     public void testEndTagOpen() {         String body;         Document doc;         Elements els;          body = "<div>hello world</";         doc = Jsoup.parse(body);         els = doc.select("div");         assertEquals("hello world</", els.text());          body = "<div>hello world</div>";         doc = Jsoup.parse(body);         els = doc.select("div");         assertEquals("hello world", els.text());          body = "<div>fake</></div>";         doc = Jsoup.parse(body);         els = doc.select("div");         assertEquals("fake", els.text());          body = "<div>fake</?</div>";         doc = Jsoup.parse(body);         els = doc.select("div");         assertEquals("fake", els.text());     }      @Test     public void testRcdataLessthanSign() {         String body;         Document doc;         Elements els;          body = "<textarea><fake></textarea>";         doc = Jsoup.parse(body);         els = doc.select("textarea");         assertEquals("<fake>", els.text());          body = "<textarea><open";         doc = Jsoup.parse(body);         els = doc.select("textarea");         assertEquals("", els.text());          body = "<textarea>hello world</?fake</textarea>";         doc = Jsoup.parse(body);         els = doc.select("textarea");         assertEquals("hello world</?fake", els.text());     }      @Test     public void testRCDATAEndTagName() {         for (char c : whiteSpace) {             String body = String.format("<textarea>data</textarea%c>", c);             Document doc = Jsoup.parse(body);             Elements els = doc.select("textarea");             assertEquals("data", els.text());         }     }      @Test     public void testCommentEndCoverage() {         String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --! --- --><p>Hello</p></body></html>";         Document doc = Jsoup.parse(html);          Element body = doc.body();         Comment comment = (Comment) body.childNode(1);         assertEquals(" <table><tr><td></table> --! --- ", comment.getData());         Element p = body.child(1);         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());     }      @Test     public void testCommentEndBangCoverage() {         String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --!---!>--><p>Hello</p></body></html>";         Document doc = Jsoup.parse(html);          Element body = doc.body();         Comment comment = (Comment) body.childNode(1);         assertEquals(" <table><tr><td></table> --!-", comment.getData());         Element p = body.child(1);         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());     }      @Test     public void testPublicIdentifiersWithWhitespace() {         String expectedOutput = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0//EN\">";         for (char q : quote) {             for (char ws : whiteSpace) {                 String[] htmls = {                         String.format("<!DOCTYPE html%cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>", ws, q, q),                         String.format("<!DOCTYPE html %cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>", ws, q, q),                         String.format("<!DOCTYPE html PUBLIC%c%c-//W3C//DTD HTML 4.0//EN%c>", ws, q, q),                         String.format("<!DOCTYPE html PUBLIC %c%c-//W3C//DTD HTML 4.0//EN%c>", ws, q, q),                         String.format("<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c%c>", q, q, ws),                         String.format("<!DOCTYPE html PUBLIC%c-//W3C//DTD HTML 4.0//EN%c%c>", q, q, ws)                     };                 for (String html : htmls) {                     Document doc = Jsoup.parse(html);                     assertEquals(expectedOutput, doc.childNode(0).outerHtml());                 }             }         }     }      @Test     public void testSystemIdentifiersWithWhitespace() {         String expectedOutput = "<!DOCTYPE html SYSTEM \"http://www.w3.org/TR/REC-html40/strict.dtd\">";         for (char q : quote) {             for (char ws : whiteSpace) {                 String[] htmls = {                         String.format("<!DOCTYPE html%cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", ws, q, q),                         String.format("<!DOCTYPE html %cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", ws, q, q),                         String.format("<!DOCTYPE html SYSTEM%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", ws, q, q),                         String.format("<!DOCTYPE html SYSTEM %c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", ws, q, q),                         String.format("<!DOCTYPE html SYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>", q, q, ws),                         String.format("<!DOCTYPE html SYSTEM%chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>", q, q, ws)                     };                 for (String html : htmls) {                     Document doc = Jsoup.parse(html);                     assertEquals(expectedOutput, doc.childNode(0).outerHtml());                 }             }         }     }      @Test     public void testPublicAndSystemIdentifiersWithWhitespace() {         String expectedOutput = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0//EN\""                 + " \"http://www.w3.org/TR/REC-html40/strict.dtd\">";     	for (char q : quote) {             for (char ws : whiteSpace) {                 String[] htmls = {                         String.format("<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c"                                 + "%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", q, q, ws, q, q),                         String.format("<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c"                                 + "%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>", q, q, q, q)                     };                 for (String html : htmls) {                     Document doc = Jsoup.parse(html);                     assertEquals(expectedOutput, doc.childNode(0).outerHtml());                 }             }         }     }      @Test public void handlesLessInTagThanAsNewTag() {         // out of spec, but clear author intent         String html = "<p\n<p<div id=one <span>Two";         Document doc = Jsoup.parse(html);         assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test     public void testUnconsumeAtBufferBoundary() {         String triggeringSnippet = "<a href=\"\"foo";         char[] padding = new char[CharacterReader.readAheadLimit - triggeringSnippet.length() + 2]; // The "foo" part must be just at the limit.         Arrays.fill(padding, ' ');         String paddedSnippet = String.valueOf(padding) + triggeringSnippet;         ParseErrorList errorList = ParseErrorList.tracking(1);          Parser.parseFragment(paddedSnippet, null, "", errorList);          assertEquals(CharacterReader.readAheadLimit - 1, errorList.get(0).getPosition());     }      @Test     public void testOpeningAngleBracketInsteadOfAttribute() {         String triggeringSnippet = "<html <";         ParseErrorList errorList = ParseErrorList.tracking(1);          Parser.parseFragment(triggeringSnippet, null, "", errorList);          assertEquals(6, errorList.get(0).getPosition());     }      @Test     public void testMalformedSelfClosingTag() {         String triggeringSnippet = "<html /ouch";         ParseErrorList errorList = ParseErrorList.tracking(1);          Parser.parseFragment(triggeringSnippet, null, "", errorList);          assertEquals(7, errorList.get(0).getPosition());     }      @Test     public void testOpeningAngleBracketInTagName() {         String triggeringSnippet = "<html<";         ParseErrorList errorList = ParseErrorList.tracking(1);          Parser.parseFragment(triggeringSnippet, null, "", errorList);          assertEquals(5, errorList.get(0).getPosition());     }      @Test     public void rcData() {         Document doc = Jsoup.parse("<title>One \0Two</title>");         assertEquals("One �Two", doc.title());     }      @Test     public void plaintext() {         Document doc = Jsoup.parse("<div>One<plaintext><div>Two</plaintext>\0no < Return");         assertEquals("<html><head></head><body><div>One<plaintext>&lt;div&gt;Two&lt;/plaintext&gt;�no &lt; Return</plaintext></div></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test     public void nullInTag() {         Document doc = Jsoup.parse("<di\0v>One</di\0v>Two");         assertEquals("<di�v>\n One\n</di�v>Two", doc.body().html());     }      @Test     public void attributeValUnquoted() {         Document doc = Jsoup.parse("<p name=foo&lt;bar>");         Element p = doc.selectFirst("p");         assertEquals("foo<bar", p.attr("name"));          doc = Jsoup.parse("<p foo=");         assertEquals("<p foo></p>", doc.body().html());     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.nodes.*; import org.jsoup.select.Elements; import org.junit.jupiter.api.Test;  import java.io.UnsupportedEncodingException; import java.util.Arrays;  import static org.jsoup.parser.CharacterReader.maxBufferLen; import static org.junit.jupiter.api.Assertions.*;  public class TokeniserTest {     @Test     public void bufferUpInAttributeVal() {         // https://github.com/jhy/jsoup/issues/967          // check each double, singlem, unquoted impls         String[] quotes = {"\"", "'", ""};         for (String quote : quotes) {             String preamble = "<img src=" + quote;             String tail = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";             StringBuilder sb = new StringBuilder(preamble);              final int charsToFillBuffer = maxBufferLen - preamble.length();             for (int i = 0; i < charsToFillBuffer; i++) {                 sb.append('a');             }              sb.append('X'); // First character to cross character buffer boundary             sb.append(tail).append(quote).append(">\n");              String html = sb.toString();             Document doc = Jsoup.parse(html);             String src = doc.select("img").attr("src");              assertTrue(src.contains("X"), "Handles for quote " + quote);             assertTrue(src.contains(tail));         }     }      @Test public void handleSuperLargeTagNames() {         // unlikely, but valid. so who knows.          StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("LargeTagName");         } while (sb.length() < maxBufferLen);         String tag = sb.toString();         String html = "<" + tag + ">One</" + tag + ">";          Document doc = Parser.htmlParser().settings(ParseSettings.preserveCase).parseInput(html, "");         Elements els = doc.select(tag);         assertEquals(1, els.size());         Element el = els.first();         assertNotNull(el);         assertEquals("One", el.text());         assertEquals(tag, el.tagName());     }      @Test public void handleSuperLargeAttributeName() {         StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("LargAttributeName");         } while (sb.length() < maxBufferLen);         String attrName = sb.toString();         String html = "<p " + attrName + "=foo>One</p>";          Document doc = Jsoup.parse(html);         Elements els = doc.getElementsByAttribute(attrName);         assertEquals(1, els.size());         Element el = els.first();         assertNotNull(el);         assertEquals("One", el.text());         Attribute attribute = el.attributes().asList().get(0);         assertEquals(attrName.toLowerCase(), attribute.getKey());         assertEquals("foo", attribute.getValue());     }      @Test public void handleLargeText() {         StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("A Large Amount of Text");         } while (sb.length() < maxBufferLen);         String text = sb.toString();         String html = "<p>" + text + "</p>";          Document doc = Jsoup.parse(html);         Elements els = doc.select("p");         assertEquals(1, els.size());         Element el = els.first();          assertNotNull(el);         assertEquals(text, el.text());     }      @Test public void handleLargeComment() {         StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("Quite a comment ");         } while (sb.length() < maxBufferLen);         String comment = sb.toString();         String html = "<p><!-- " + comment + " --></p>";          Document doc = Jsoup.parse(html);         Elements els = doc.select("p");         assertEquals(1, els.size());         Element el = els.first();          assertNotNull(el);         Comment child = (Comment) el.childNode(0);         assertEquals(" " + comment + " ", child.getData());     }      @Test public void handleLargeCdata() {         StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("Quite a lot of CDATA <><><><>");         } while (sb.length() < maxBufferLen);         String cdata = sb.toString();         String html = "<p><![CDATA[" + cdata + "]]></p>";          Document doc = Jsoup.parse(html);         Elements els = doc.select("p");         assertEquals(1, els.size());         Element el = els.first();          assertNotNull(el);         TextNode child = (TextNode) el.childNode(0);         assertEquals(cdata, el.text());         assertEquals(cdata, child.getWholeText());     }      @Test public void handleLargeTitle() {         StringBuilder sb = new StringBuilder(maxBufferLen);         do {             sb.append("Quite a long title");         } while (sb.length() < maxBufferLen);         String title = sb.toString();         String html = "<title>" + title + "</title>";          Document doc = Jsoup.parse(html);         Elements els = doc.select("title");         assertEquals(1, els.size());         Element el = els.first();          assertNotNull(el);         TextNode child = (TextNode) el.childNode(0);         assertEquals(title, el.text());         assertEquals(title, child.getWholeText());         assertEquals(title, doc.title());     }      @Test public void cp1252Entities() {         assertEquals("\u20ac", Jsoup.parse("&#0128;").text());         assertEquals("\u201a", Jsoup.parse("&#0130;").text());         assertEquals("\u20ac", Jsoup.parse("&#x80;").text());     }      @Test public void cp1252EntitiesProduceError() {         Parser parser = new Parser(new HtmlTreeBuilder());         parser.setTrackErrors(10);         assertEquals("\u20ac", parser.parseInput("<html><body>&#0128;</body></html>", "").text());         assertEquals(1, parser.getErrors().size());     }      @Test public void cp1252SubstitutionTable() throws UnsupportedEncodingException {         for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {             String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, "Windows-1252");             assertEquals(1, s.length());              // some of these characters are illegal             if (s.charAt(0) == '\ufffd') { continue; }              assertEquals(s.charAt(0), Tokeniser.win1252Extensions[i], "At: " + i);         }     }      @Test public void canParseVeryLongBogusComment() {         StringBuilder commentData = new StringBuilder(maxBufferLen);         do {             commentData.append("blah blah blah blah ");         } while (commentData.length() < maxBufferLen);         String expectedCommentData = commentData.toString();         String testMarkup = "<html><body><!" + expectedCommentData + "></body></html>";         Parser parser = new Parser(new HtmlTreeBuilder());          Document doc = parser.parseInput(testMarkup, "");          Node commentNode = doc.body().childNode(0);         assertTrue(commentNode instanceof Comment, "Expected comment node");         assertEquals(expectedCommentData, ((Comment)commentNode).getData());     }      @Test public void canParseCdataEndingAtEdgeOfBuffer() {         String cdataStart = "<![CDATA[";         String cdataEnd = "]]>";         int bufLen = maxBufferLen - cdataStart.length() - 1;    // also breaks with -2, but not with -3 or 0         char[] cdataContentsArray = new char[bufLen];         Arrays.fill(cdataContentsArray, 'x');         String cdataContents = new String(cdataContentsArray);         String testMarkup = cdataStart + cdataContents + cdataEnd;         Parser parser = new Parser(new HtmlTreeBuilder());          Document doc = parser.parseInput(testMarkup, "");          Node cdataNode = doc.body().childNode(0);         assertTrue(cdataNode instanceof CDataNode, "Expected CDATA node");         assertEquals(cdataContents, ((CDataNode)cdataNode).text());     } } 
package org.jsoup.parser;  import org.jsoup.MultiLocaleExtension.MultiLocaleTest; import org.junit.jupiter.api.Test;  import java.util.Locale;  import static org.junit.jupiter.api.Assertions.*;  /**  Tag tests.  @author Jonathan Hedley, jonathan@hedley.net */ public class TagTest {     @Test public void isCaseSensitive() {         Tag p1 = Tag.valueOf("P");         Tag p2 = Tag.valueOf("p");         assertNotEquals(p1, p2);     }      @MultiLocaleTest     public void canBeInsensitive(Locale locale) {         Locale.setDefault(locale);          Tag script1 = Tag.valueOf("script", ParseSettings.htmlDefault);         Tag script2 = Tag.valueOf("SCRIPT", ParseSettings.htmlDefault);         assertSame(script1, script2);     }      @Test public void trims() {         Tag p1 = Tag.valueOf("p");         Tag p2 = Tag.valueOf(" p ");         assertEquals(p1, p2);     }      @Test public void equality() {         Tag p1 = Tag.valueOf("p");         Tag p2 = Tag.valueOf("p");         assertEquals(p1, p2);         assertSame(p1, p2);     }      @Test public void divSemantics() {         Tag div = Tag.valueOf("div");          assertTrue(div.isBlock());         assertTrue(div.formatAsBlock());     }      @Test public void pSemantics() {         Tag p = Tag.valueOf("p");          assertTrue(p.isBlock());         assertFalse(p.formatAsBlock());     }      @Test public void imgSemantics() {         Tag img = Tag.valueOf("img");         assertTrue(img.isInline());         assertTrue(img.isSelfClosing());         assertFalse(img.isBlock());     }      @Test public void defaultSemantics() {         Tag foo = Tag.valueOf("FOO"); // not defined         Tag foo2 = Tag.valueOf("FOO");          assertEquals(foo, foo2);         assertTrue(foo.isInline());         assertTrue(foo.formatAsBlock());     }      @Test public void valueOfChecksNotNull() {         assertThrows(IllegalArgumentException.class, () -> Tag.valueOf(null));     }      @Test public void valueOfChecksNotEmpty() {         assertThrows(IllegalArgumentException.class, () -> Tag.valueOf(" "));     }      @Test public void knownTags() {         assertTrue(Tag.isKnownTag("div"));         assertFalse(Tag.isKnownTag("explain"));     } } 
package org.jsoup.parser;  import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals;  public class ParserTest {      @Test     public void unescapeEntities() {         String s = Parser.unescapeEntities("One &amp; Two", false);         assertEquals("One & Two", s);     }      @Test     public void unescapeEntitiesHandlesLargeInput() {         StringBuilder longBody = new StringBuilder(500000);         do {             longBody.append("SomeNonEncodedInput");         } while (longBody.length() < 64 * 1024);          String body = longBody.toString();         assertEquals(body, Parser.unescapeEntities(body, false));     } } 
package org.jsoup.parser;  import org.jsoup.nodes.Document; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue;  /**  * Longer running Parser tests.  */  public class ParserIT {     @Test     public void testIssue1251() {         // https://github.com/jhy/jsoup/issues/1251         StringBuilder str = new StringBuilder("<a href=\"\"ca");         for (int countSpaces = 0; countSpaces < 100000; countSpaces++) {             try {                 Parser.htmlParser().setTrackErrors(1).parseInput(str.toString(), "");             } catch (Exception e) {                 throw new AssertionError("failed at length " + str.length(), e);             }             str.insert(countSpaces, ' ');         }     }      @Test     public void handlesDeepStack() {         // inspired by http://sv.stargate.wikia.com/wiki/M2J and https://github.com/jhy/jsoup/issues/955         // I didn't put it in the integration tests, because explorer and intellij kept dieing trying to preview/index it          // Arrange         StringBuilder longBody = new StringBuilder(500000);         for (int i = 0; i < 25000; i++) {             longBody.append(i).append("<dl><dd>");         }         for (int i = 0; i < 25000; i++) {             longBody.append(i).append("</dd></dl>");         }          // Act         long start = System.currentTimeMillis();         Document doc = Parser.parseBodyFragment(longBody.toString(), "");          // Assert         assertEquals(2, doc.body().childNodeSize());         assertEquals(25000, doc.select("dd").size());         assertTrue(System.currentTimeMillis() - start < 20000); // I get ~ 1.5 seconds, but others have reported slower         // was originally much longer, or stack overflow.     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  Test suite for attribute parser.   @author Jonathan Hedley, jonathan@hedley.net */ public class AttributeParseTest {      @Test public void parsesRoughAttributeString() {         String html = "<a id=\"123\" class=\"baz = 'bar'\" style = 'border: 2px'qux zim foo = 12 mux=18 />";         // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>          Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(7, attr.size());         assertEquals("123", attr.get("id"));         assertEquals("baz = 'bar'", attr.get("class"));         assertEquals("border: 2px", attr.get("style"));         assertEquals("", attr.get("qux"));         assertEquals("", attr.get("zim"));         assertEquals("12", attr.get("foo"));         assertEquals("18", attr.get("mux"));     }      @Test public void handlesNewLinesAndReturns() {         String html = "<a\r\nfoo='bar\r\nqux'\r\nbar\r\n=\r\ntwo>One</a>";         Element el = Jsoup.parse(html).select("a").first();         assertEquals(2, el.attributes().size());         assertEquals("bar\r\nqux", el.attr("foo")); // currently preserves newlines in quoted attributes. todo confirm if should.         assertEquals("two", el.attr("bar"));     }      @Test public void parsesEmptyString() {         String html = "<a />";         Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(0, attr.size());     }      @Test public void canStartWithEq() {         String html = "<a =empty />";         // TODO this is the weirdest thing in the spec - why not consider this an attribute with an empty name, not where name is '='?         // am I reading it wrong? https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state         Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(1, attr.size());         assertTrue(attr.hasKey("=empty"));         assertEquals("", attr.get("=empty"));     }      @Test public void strictAttributeUnescapes() {         String html = "<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>";         Elements els = Jsoup.parse(html).select("a");         assertEquals("?foo=bar&mid&lt=true", els.first().attr("href"));         assertEquals("?foo=bar<qux&lg=1", els.last().attr("href"));     }      @Test public void moreAttributeUnescapes() {         String html = "<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>";         Elements els = Jsoup.parse(html).select("a");         assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href"));     }      @Test public void parsesBooleanAttributes() {         String html = "<a normal=\"123\" boolean empty=\"\"></a>";         Element el = Jsoup.parse(html).select("a").first();          assertEquals("123", el.attr("normal"));         assertEquals("", el.attr("boolean"));         assertEquals("", el.attr("empty"));          List<Attribute> attributes = el.attributes().asList();         assertEquals(3, attributes.size(), "There should be 3 attribute present");          assertEquals(html, el.outerHtml()); // vets boolean syntax     }      @Test public void dropsSlashFromAttributeName() {         String html = "<img /onerror='doMyJob'/>";         Document doc = Jsoup.parse(html);         assertFalse(doc.select("img[onerror]").isEmpty(), "SelfClosingStartTag ignores last character");         assertEquals("<img onerror=\"doMyJob\">", doc.body().html());          doc = Jsoup.parse(html, "", Parser.xmlParser());         assertEquals("<img onerror=\"doMyJob\" />", doc.html());     } } 
package org.jsoup.parser;  import org.jsoup.MultiLocaleExtension.MultiLocaleTest; import org.jsoup.nodes.Attributes;  import java.util.Locale;  import static org.junit.jupiter.api.Assertions.assertEquals;  public class ParserSettingsTest {     @MultiLocaleTest     public void caseSupport(Locale locale) {         Locale.setDefault(locale);          ParseSettings bothOn = new ParseSettings(true, true);         ParseSettings bothOff = new ParseSettings(false, false);         ParseSettings tagOn = new ParseSettings(true, false);         ParseSettings attrOn = new ParseSettings(false, true);          assertEquals("IMG", bothOn.normalizeTag("IMG"));         assertEquals("ID", bothOn.normalizeAttribute("ID"));          assertEquals("img", bothOff.normalizeTag("IMG"));         assertEquals("id", bothOff.normalizeAttribute("ID"));          assertEquals("IMG", tagOn.normalizeTag("IMG"));         assertEquals("id", tagOn.normalizeAttribute("ID"));          assertEquals("img", attrOn.normalizeTag("IMG"));         assertEquals("ID", attrOn.normalizeAttribute("ID"));     }      @MultiLocaleTest     public void attributeCaseNormalization(Locale locale) {         Locale.setDefault(locale);          ParseSettings parseSettings = new ParseSettings(false, false);         String normalizedAttribute = parseSettings.normalizeAttribute("HIDDEN");          assertEquals("hidden", normalizedAttribute);     }      @MultiLocaleTest     public void attributesCaseNormalization(Locale locale) {         Locale.setDefault(locale);          ParseSettings parseSettings = new ParseSettings(false, false);         Attributes attributes = new Attributes();         attributes.put("ITEM", "1");          Attributes normalizedAttributes = parseSettings.normalizeAttributes(attributes);          assertEquals("item", normalizedAttributes.asList().get(0).getKey());     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.integration.ParseTest; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.*; import org.jsoup.safety.Whitelist; import org.jsoup.select.Elements; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import java.io.ByteArrayInputStream; import java.io.File; import java.io.IOException; import java.util.List;  import static org.jsoup.parser.ParseSettings.preserveCase; import static org.junit.jupiter.api.Assertions.*;  /**  * Tests for the Parser  *  * @author Jonathan Hedley, jonathan@hedley.net  */ public class HtmlParserTest {      @Test public void parsesSimpleDocument() {         String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";         Document doc = Jsoup.parse(html);         // need a better way to verify these:         Element p = doc.body().child(0);         assertEquals("p", p.tagName());         Element img = p.child(0);         assertEquals("foo.png", img.attr("src"));         assertEquals("img", img.tagName());     }      @Test public void parsesRoughAttributes() {         String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";         Document doc = Jsoup.parse(html);          // need a better way to verify these:         Element p = doc.body().child(0);         assertEquals("p", p.tagName());         assertEquals("foo > bar", p.attr("class"));     }      @Test public void dropsDuplicateAttributes() {         String html = "<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>";         Parser parser = Parser.htmlParser().setTrackErrors(10);         Document doc = parser.parseInput(html, "");          Element p = doc.selectFirst("p");         assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml()); // normalized names due to lower casing          assertEquals(1, parser.getErrors().size());         assertEquals("Duplicate attribute", parser.getErrors().get(0).getErrorMessage());     }      @Test public void retainsAttributesOfDifferentCaseIfSensitive() {         String html = "<p One=One One=Two one=Three two=Four two=Five Two=Six>Text</p>";         Parser parser = Parser.htmlParser().settings(preserveCase);         Document doc = parser.parseInput(html, "");         assertEquals("<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>", doc.selectFirst("p").outerHtml());     }      @Test public void parsesQuiteRoughAttributes() {         String html = "<p =a>One<a <p>Something</p>Else";         // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated         Document doc = Jsoup.parse(html);          // NOTE: per spec this should be the test case. but impacts too many ppl         // assertEquals("<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>", doc.body().html());          assertEquals("<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html()));          doc = Jsoup.parse("<p .....>");         assertEquals("<p .....></p>", doc.body().html());     }      @Test public void parsesComments() {         String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";         Document doc = Jsoup.parse(html);          Element body = doc.body();         Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag         assertEquals(" <table><tr><td></table> ", comment.getData());         Element p = body.child(1);         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());     }      @Test public void parsesUnterminatedComments() {         String html = "<p>Hello<!-- <tr><td>";         Document doc = Jsoup.parse(html);         Element p = doc.getElementsByTag("p").get(0);         assertEquals("Hello", p.text());         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());         Comment comment = (Comment) p.childNode(1);         assertEquals(" <tr><td>", comment.getData());     }      @Test public void dropsUnterminatedTag() {         // jsoup used to parse this to <p>, but whatwg, webkit will drop.         String h1 = "<p";         Document doc = Jsoup.parse(h1);         assertEquals(0, doc.getElementsByTag("p").size());         assertEquals("", doc.text());          String h2 = "<div id=1<p id='2'";         doc = Jsoup.parse(h2);         assertEquals("", doc.text());     }      @Test public void dropsUnterminatedAttribute() {         // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.         String h1 = "<p id=\"foo";         Document doc = Jsoup.parse(h1);         assertEquals("", doc.text());     }      @Test public void parsesUnterminatedTextarea() {         // don't parse right to end, but break on <p>         Document doc = Jsoup.parse("<body><p><textarea>one<p>two");         Element t = doc.select("textarea").first();         assertEquals("one", t.text());         assertEquals("two", doc.select("p").get(1).text());     }      @Test public void parsesUnterminatedOption() {         // bit weird this -- browsers and spec get stuck in select until there's a </select>         Document doc = Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");         Elements options = doc.select("option");         assertEquals(2, options.size());         assertEquals("One", options.first().text());         assertEquals("TwoThree", options.last().text());     }      @Test public void testSelectWithOption() {         Parser parser = Parser.htmlParser();         parser.setTrackErrors(10);         Document document = parser.parseInput("<select><option>Option 1</option></select>", "http://jsoup.org");         assertEquals(0, parser.getErrors().size());     }      @Test public void testSpaceAfterTag() {         Document doc = Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");         assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void createsDocumentStructure() {         String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";         Document doc = Jsoup.parse(html);         Element head = doc.head();         Element body = doc.body();          assertEquals(1, doc.children().size()); // root node: contains html node         assertEquals(2, doc.child(0).children().size()); // html node: head and body         assertEquals(3, head.children().size());         assertEquals(1, body.children().size());          assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"));         assertEquals(0, body.getElementsByTag("meta").size());         assertEquals("jsoup", doc.title());         assertEquals("Hello world", body.text());         assertEquals("Hello world", body.children().get(0).text());     }      @Test public void createsStructureFromBodySnippet() {         // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine         // needs to move into the start of the body         String html = "foo <b>bar</b> baz";         Document doc = Jsoup.parse(html);         assertEquals("foo bar baz", doc.text());     }      @Test public void handlesEscapedData() {         String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";         Document doc = Jsoup.parse(html);         Element div = doc.getElementsByTag("div").get(0);          assertEquals("Surf & Turf", div.attr("title"));         assertEquals("Reef & Beef", div.text());     }      @Test public void handlesDataOnlyTags() {         String t = "<style>font-family: bold</style>";         List<Element> tels = Jsoup.parse(t).getElementsByTag("style");         assertEquals("font-family: bold", tels.get(0).data());         assertEquals("", tels.get(0).text());          String s = "<p>Hello</p><script>obj.insert('<a rel=\"none\" />');\ni++;</script><p>There</p>";         Document doc = Jsoup.parse(s);         assertEquals("Hello There", doc.text());         assertEquals("obj.insert('<a rel=\"none\" />');\ni++;", doc.data());     }      @Test public void handlesTextAfterData() {         String h = "<html><body>pre <script>inner</script> aft</body></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesTextArea() {         Document doc = Jsoup.parse("<textarea>Hello</textarea>");         Elements els = doc.select("textarea");         assertEquals("Hello", els.text());         assertEquals("Hello", els.val());     }      @Test public void preservesSpaceInTextArea() {         // preserve because the tag is marked as preserve white space         Document doc = Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>");         String expect = "One\n\tTwo\n\tThree"; // the leading and trailing spaces are dropped as a convenience to authors         Element el = doc.select("textarea").first();         assertEquals(expect, el.text());         assertEquals(expect, el.val());         assertEquals(expect, el.html());         assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml()); // but preserved in round-trip html     }      @Test public void preservesSpaceInScript() {         // preserve because it's content is a data node         Document doc = Jsoup.parse("<script>\nOne\n\tTwo\n\tThree\n</script>");         String expect = "\nOne\n\tTwo\n\tThree\n";         Element el = doc.select("script").first();         assertEquals(expect, el.data());         assertEquals("One\n\tTwo\n\tThree", el.html());         assertEquals("<script>" + expect + "</script>", el.outerHtml());     }      @Test public void doesNotCreateImplicitLists() {         // old jsoup used to wrap this in <ul>, but that's not to spec         String h = "<li>Point one<li>Point two";         Document doc = Jsoup.parse(h);         Elements ol = doc.select("ul"); // should NOT have created a default ul.         assertEquals(0, ol.size());         Elements lis = doc.select("li");         assertEquals(2, lis.size());         assertEquals("body", lis.first().parent().tagName());          // no fiddling with non-implicit lists         String h2 = "<ol><li><p>Point the first<li><p>Point the second";         Document doc2 = Jsoup.parse(h2);          assertEquals(0, doc2.select("ul").size());         assertEquals(1, doc2.select("ol").size());         assertEquals(2, doc2.select("ol li").size());         assertEquals(2, doc2.select("ol li p").size());         assertEquals(1, doc2.select("ol li").get(0).children().size()); // one p in first li     }      @Test public void discardsNakedTds() {         // jsoup used to make this into an implicit table; but browsers make it into a text run         String h = "<td>Hello<td><p>There<p>now";         Document doc = Jsoup.parse(h);         assertEquals("Hello<p>There</p><p>now</p>", TextUtil.stripNewlines(doc.body().html()));         // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table     }      @Test public void handlesNestedImplicitTable() {         Document doc = Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");         assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesWhatWgExpensesTableExample() {         // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0         Document doc = Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");         assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesTbodyTable() {         Document doc = Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");         assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesImplicitCaptionClose() {         Document doc = Jsoup.parse("<table><caption>A caption<td>One<td>Two");         assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void noTableDirectInTable() {         Document doc = Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");         assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>",             TextUtil.stripNewlines(doc.body().html()));     }      @Test public void ignoresDupeEndTrTag() {         Document doc = Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>"); // two </tr></tr>, must ignore or will close table         assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>",             TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesBaseTags() {         // only listen to the first base href         String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";         Document doc = Jsoup.parse(h, "http://foo/");         assertEquals("http://foo/2/", doc.baseUri()); // gets set once, so doc and descendants have first only          Elements anchors = doc.getElementsByTag("a");         assertEquals(3, anchors.size());          assertEquals("http://foo/2/", anchors.get(0).baseUri());         assertEquals("http://foo/2/", anchors.get(1).baseUri());         assertEquals("http://foo/2/", anchors.get(2).baseUri());          assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"));         assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"));         assertEquals("http://foo/4", anchors.get(2).absUrl("href"));     }      @Test public void handlesProtocolRelativeUrl() {         String base = "https://example.com/";         String html = "<img src='//example.net/img.jpg'>";         Document doc = Jsoup.parse(html, base);         Element el = doc.select("img").first();         assertEquals("https://example.net/img.jpg", el.absUrl("src"));     }      @Test public void handlesCdata() {         // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now         String h = "<div id=1><![CDATA[<html>\n <foo><&amp;]]></div>"; // the &amp; in there should remain literal         Document doc = Jsoup.parse(h);         Element div = doc.getElementById("1");         assertEquals("<html>\n <foo><&amp;", div.text());         assertEquals(0, div.children().size());         assertEquals(1, div.childNodeSize()); // no elements, one text node     }      @Test public void roundTripsCdata() {         String h = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";         Document doc = Jsoup.parse(h);         Element div = doc.getElementById("1");         assertEquals("<html>\n <foo><&amp;", div.text());         assertEquals(0, div.children().size());         assertEquals(1, div.childNodeSize()); // no elements, one text node          assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml());          CDataNode cdata = (CDataNode) div.textNodes().get(0);         assertEquals("\n<html>\n <foo><&amp;", cdata.text());     }      @Test public void handlesCdataAcrossBuffer() {         StringBuilder sb = new StringBuilder();         while (sb.length() <= CharacterReader.maxBufferLen) {             sb.append("A suitable amount of CData.\n");         }         String cdata = sb.toString();         String h = "<div><![CDATA[" + cdata + "]]></div>";         Document doc = Jsoup.parse(h);         Element div = doc.selectFirst("div");          CDataNode node = (CDataNode) div.textNodes().get(0);         assertEquals(cdata, node.text());     }      @Test public void handlesCdataInScript() {         String html = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";         Document doc = Jsoup.parse(html);          String data = "//<![CDATA[\n\n  foo();\n//]]>";         Element script = doc.selectFirst("script");         assertEquals("", script.text()); // won't be parsed as cdata because in script data section         assertEquals(data, script.data());         assertEquals(html, script.outerHtml());          DataNode dataNode = (DataNode) script.childNode(0);         assertEquals(data, dataNode.getWholeData());         // see - not a cdata node, because in script. contrast with XmlTreeBuilder - will be cdata.     }      @Test public void handlesUnclosedCdataAtEOF() {         // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF         String h = "<![CDATA[]]";         Document doc = Jsoup.parse(h);         assertEquals(1, doc.body().childNodeSize());     }      @Test public void handleCDataInText() {         String h = "<p>One <![CDATA[Two <&]]> Three</p>";         Document doc = Jsoup.parse(h);         Element p = doc.selectFirst("p");          List<Node> nodes = p.childNodes();         assertEquals("One ", ((TextNode) nodes.get(0)).getWholeText());         assertEquals("Two <&", ((TextNode) nodes.get(1)).getWholeText());         assertEquals("Two <&", ((CDataNode) nodes.get(1)).getWholeText());         assertEquals(" Three", ((TextNode) nodes.get(2)).getWholeText());          assertEquals(h, p.outerHtml());     }      @Test public void cdataNodesAreTextNodes() {         String h = "<p>One <![CDATA[ Two <& ]]> Three</p>";         Document doc = Jsoup.parse(h);         Element p = doc.selectFirst("p");          List<TextNode> nodes = p.textNodes();         assertEquals("One ", nodes.get(0).text());         assertEquals(" Two <& ", nodes.get(1).text());         assertEquals(" Three", nodes.get(2).text());     }      @Test public void handlesInvalidStartTags() {         String h = "<div>Hello < There <&amp;></div>"; // parse to <div {#text=Hello < There <&>}>         Document doc = Jsoup.parse(h);         assertEquals("Hello < There <&>", doc.select("div").first().text());     }      @Test public void handlesUnknownTags() {         String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";         Document doc = Jsoup.parse(h);         Elements foos = doc.select("foo");         assertEquals(2, foos.size());         assertEquals("bar", foos.first().attr("title"));         assertEquals("qux", foos.last().attr("title"));         assertEquals("there", foos.last().text());     }      @Test public void handlesUnknownInlineTags() {         String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";         Document doc = Jsoup.parseBodyFragment(h);         String out = doc.body().html();         assertEquals(h, TextUtil.stripNewlines(out));     }      @Test public void parsesBodyFragment() {         String h = "<!-- comment --><p><a href='foo'>One</a></p>";         Document doc = Jsoup.parseBodyFragment(h, "http://example.com");         assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", TextUtil.stripNewlines(doc.body().outerHtml()));         assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"));     }      @Test public void handlesUnknownNamespaceTags() {         // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.         String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";         Document doc = Jsoup.parse(h);         assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesKnownEmptyBlocks() {         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.         String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";         Document doc = Jsoup.parse(h);         assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesKnownEmptyNoFrames() {         String h = "<html><head><noframes /><meta name=foo></head><body>One</body></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesKnownEmptyStyle() {         String h = "<html><head><style /><meta name=foo></head><body>One</body></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesKnownEmptyTitle() {         String h = "<html><head><title /><meta name=foo></head><body>One</body></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesKnownEmptyIframe() {         String h = "<p>One</p><iframe id=1 /><p>Two";         Document doc = Jsoup.parse(h);         assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesSolidusAtAttributeEnd() {         // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]         String h = "<a href=/>link</a>";         Document doc = Jsoup.parse(h);         assertEquals("<a href=\"/\">link</a>", doc.body().html());     }      @Test public void handlesMultiClosingBody() {         String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";         Document doc = Jsoup.parse(h);         assertEquals(3, doc.select("p").size());         assertEquals(3, doc.body().children().size());     }      @Test public void handlesUnclosedDefinitionLists() {         // jsoup used to create a <dl>, but that's not to spec         String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";         Document doc = Jsoup.parse(h);         assertEquals(0, doc.select("dl").size()); // no auto dl         assertEquals(4, doc.select("dt, dd").size());         Elements dts = doc.select("dt");         assertEquals(2, dts.size());         assertEquals("Zug", dts.get(1).nextElementSibling().text());     }      @Test public void handlesBlocksInDefinitions() {         // per the spec, dt and dd are inline, but in practise are block         String h = "<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>";         Document doc = Jsoup.parse(h);         assertEquals("dt", doc.select("#1").first().parent().tagName());         assertEquals("dd", doc.select("#2").first().parent().tagName());         assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesFrames() {         String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>",             TextUtil.stripNewlines(doc.html()));         // no body auto vivification     }      @Test public void ignoresContentAfterFrameset() {         String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", TextUtil.stripNewlines(doc.html()));         // no body, no table. No crash!     }      @Test public void handlesJavadocFont() {         String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";         Document doc = Jsoup.parse(h);         Element a = doc.select("a").first();         assertEquals("Deprecated", a.text());         assertEquals("font", a.child(0).tagName());         assertEquals("b", a.child(0).child(0).tagName());     }      @Test public void handlesBaseWithoutHref() {         String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";         Document doc = Jsoup.parse(h, "http://example.com/");         Element a = doc.select("a").first();         assertEquals("/foo", a.attr("href"));         assertEquals("http://example.com/foo", a.attr("abs:href"));     }      @Test public void normalisesDocument() {         String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";         Document doc = Jsoup.parse(h);         assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>",             TextUtil.stripNewlines(doc.html()));     }      @Test public void normalisesEmptyDocument() {         Document doc = Jsoup.parse("");         assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void normalisesHeadlessBody() {         Document doc = Jsoup.parse("<html><body><span class=\"foo\">bar</span>");         assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>",             TextUtil.stripNewlines(doc.html()));     }      @Test public void normalisedBodyAfterContent() {         Document doc = Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");         assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>",             TextUtil.stripNewlines(doc.html()));     }      @Test public void findsCharsetInMalformedMeta() {         String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";         // example cited for reason of html5's <meta charset> element         Document doc = Jsoup.parse(h);         assertEquals("gb2312", doc.select("meta").attr("charset"));     }      @Test public void testHgroup() {         // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK         Document doc = Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");         assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testRelaxedTags() {         Document doc = Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");         assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testHeaderContents() {         // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any         // spec, which defines them as containing phrasing content only. so, reality over theory.         Document doc = Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");         assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testSpanContents() {         // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag         Document doc = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");         assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testNoImagesInNoScriptInHead() {         // jsoup used to allow, but against spec if parsing with noscript         Document doc = Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");         assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void testAFlowContents() {         // html5 has <a> as either phrasing or block         Document doc = Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");         assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testFontFlowContents() {         // html5 has no definition of <font>; often used as flow         Document doc = Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");         assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesMisnestedTagsBI() {         // whatwg: <b><i></b></i>         String h = "<p>1<b>2<i>3</b>4</i>5</p>";         Document doc = Jsoup.parse(h);         assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html());         // adoption agency on </b>, reconstruction of formatters on 4.     }      @Test public void handlesMisnestedTagsBP() {         //  whatwg: <b><p></b></p>         String h = "<b>1<p>2</b>3</p>";         Document doc = Jsoup.parse(h);         assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html());     }      @Disabled // todo: test case for https://github.com/jhy/jsoup/issues/845. Doesn't work yet.     @Test public void handlesMisnestedAInDivs() {         String h = "<a href='#1'><div><div><a href='#2'>child</a</div</div></a>";         String w = "<a href=\"#1\"></a><div><a href=\"#1\"></a><div><a href=\"#1\"></a><a href=\"#2\">child</a></div></div>";         Document doc = Jsoup.parse(h);         assertEquals(             StringUtil.normaliseWhitespace(w),             StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void handlesUnexpectedMarkupInTables() {         // whatwg - tests markers in active formatting (if they didn't work, would get in in table)         // also tests foster parenting         String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";         Document doc = Jsoup.parse(h);         assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesUnclosedFormattingElements() {         // whatwg: formatting elements get collected and applied, but excess elements are thrown away         String h = "<!DOCTYPE html>\n" +             "<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" +             "<p>X\n" +             "<p><b><b class=x><b>X\n" +             "<p></b></b></b></b></b></b>X";         Document doc = Jsoup.parse(h);         doc.outputSettings().indentAmount(0);         String want = "<!doctype html>\n" +             "<html>\n" +             "<head></head>\n" +             "<body>\n" +             "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n" +             "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n" +             "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n" +             "<p>X</p>\n" +             "</body>\n" +             "</html>";         assertEquals(want, doc.html());     }      @Test public void handlesUnclosedAnchors() {         String h = "<a href='http://example.com/'>Link<p>Error link</a>";         Document doc = Jsoup.parse(h);         String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";         assertEquals(want, doc.body().html());     }      @Test public void reconstructFormattingElements() {         // tests attributes and multi b         String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";         Document doc = Jsoup.parse(h);         assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html());     }      @Test public void reconstructFormattingElementsInTable() {         // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,         // and the <i> inside the table and does not leak out.         String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";         Document doc = Jsoup.parse(h);         String want = "<p><b>One</b></p><b> \n" +             " <table>\n" +             "  <tbody>\n" +             "   <tr>\n" +             "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n" +             "   </tr>\n" +             "  </tbody>\n" +             " </table> <p>Five</p></b>";         assertEquals(want, doc.body().html());     }      @Test public void commentBeforeHtml() {         String h = "<!-- comment --><!-- comment 2 --><p>One</p>";         Document doc = Jsoup.parse(h);         assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void emptyTdTag() {         String h = "<table><tr><td>One</td><td id='2' /></tr></table>";         Document doc = Jsoup.parse(h);         assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html());     }      @Test public void handlesSolidusInA() {         // test for bug #66         String h = "<a class=lp href=/lib/14160711/>link text</a>";         Document doc = Jsoup.parse(h);         Element a = doc.select("a").first();         assertEquals("link text", a.text());         assertEquals("/lib/14160711/", a.attr("href"));     }      @Test public void handlesSpanInTbody() {         // test for bug 64         String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";         Document doc = Jsoup.parse(h);         assertEquals(doc.select("span").first().children().size(), 0); // the span gets closed         assertEquals(doc.select("table").size(), 1); // only one table     }      @Test public void handlesUnclosedTitleAtEof() {         assertEquals("Data", Jsoup.parse("<title>Data").title());         assertEquals("Data<", Jsoup.parse("<title>Data<").title());         assertEquals("Data</", Jsoup.parse("<title>Data</").title());         assertEquals("Data</t", Jsoup.parse("<title>Data</t").title());         assertEquals("Data</ti", Jsoup.parse("<title>Data</ti").title());         assertEquals("Data", Jsoup.parse("<title>Data</title>").title());         assertEquals("Data", Jsoup.parse("<title>Data</title >").title());     }      @Test public void handlesUnclosedTitle() {         Document one = Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>"); // has title, so <b> is plain text         assertEquals("One <b>Two <b>Three", one.title());         assertEquals("Test", one.select("p").first().text());          Document two = Jsoup.parse("<title>One<b>Two <p>Test</p>"); // no title, so <b> causes </title> breakout         assertEquals("One", two.title());         assertEquals("<b>Two <p>Test</p></b>", two.body().html());     }      @Test public void handlesUnclosedScriptAtEof() {         assertEquals("Data", Jsoup.parse("<script>Data").select("script").first().data());         assertEquals("Data<", Jsoup.parse("<script>Data<").select("script").first().data());         assertEquals("Data</sc", Jsoup.parse("<script>Data</sc").select("script").first().data());         assertEquals("Data</-sc", Jsoup.parse("<script>Data</-sc").select("script").first().data());         assertEquals("Data</sc-", Jsoup.parse("<script>Data</sc-").select("script").first().data());         assertEquals("Data</sc--", Jsoup.parse("<script>Data</sc--").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script>").select("script").first().data());         assertEquals("Data</script", Jsoup.parse("<script>Data</script").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script ").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script n").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script n=").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script n=\"").select("script").first().data());         assertEquals("Data", Jsoup.parse("<script>Data</script n=\"p").select("script").first().data());     }      @Test public void handlesUnclosedRawtextAtEof() {         assertEquals("Data", Jsoup.parse("<style>Data").select("style").first().data());         assertEquals("Data</st", Jsoup.parse("<style>Data</st").select("style").first().data());         assertEquals("Data", Jsoup.parse("<style>Data</style>").select("style").first().data());         assertEquals("Data</style", Jsoup.parse("<style>Data</style").select("style").first().data());         assertEquals("Data</-style", Jsoup.parse("<style>Data</-style").select("style").first().data());         assertEquals("Data</style-", Jsoup.parse("<style>Data</style-").select("style").first().data());         assertEquals("Data</style--", Jsoup.parse("<style>Data</style--").select("style").first().data());     }      @Test public void noImplicitFormForTextAreas() {         // old jsoup parser would create implicit forms for form children like <textarea>, but no more         Document doc = Jsoup.parse("<textarea>One</textarea>");         assertEquals("<textarea>One</textarea>", doc.body().html());     }      @Test public void handlesEscapedScript() {         Document doc = Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");         assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data());     }      @Test public void handles0CharacterAsText() {         Document doc = Jsoup.parse("0<p>0</p>");         assertEquals("0\n<p>0</p>", doc.body().html());     }      @Test public void handlesNullInData() {         Document doc = Jsoup.parse("<p id=\u0000>Blah \u0000</p>");         assertEquals("<p id=\"\uFFFD\">Blah \u0000</p>", doc.body().html()); // replaced in attr, NOT replaced in data     }      @Test public void handlesNullInComments() {         Document doc = Jsoup.parse("<body><!-- \u0000 \u0000 -->");         assertEquals("<!-- \uFFFD \uFFFD -->", doc.body().html());     }      @Test public void handlesNewlinesAndWhitespaceInTag() {         Document doc = Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");         assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html());     }      @Test public void handlesWhitespaceInoDocType() {         String html = "<!DOCTYPE html\r\n" +             "      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" +             "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";         Document doc = Jsoup.parse(html);         assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml());     }      @Test public void tracksErrorsWhenRequested() {         String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";         Parser parser = Parser.htmlParser().setTrackErrors(500);         Document doc = Jsoup.parse(html, "http://example.com", parser);          List<ParseError> errors = parser.getErrors();         assertEquals(5, errors.size());         assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());         assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());         assertEquals("36: Invalid character reference: invalid named reference", errors.get(2).toString());         assertEquals("50: Tag cannot be self closing; not a void tag", errors.get(3).toString());         assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(4).toString());     }      @Test public void tracksLimitedErrorsWhenRequested() {         String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";         Parser parser = Parser.htmlParser().setTrackErrors(3);         Document doc = parser.parseInput(html, "http://example.com");          List<ParseError> errors = parser.getErrors();         assertEquals(3, errors.size());         assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());         assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());         assertEquals("36: Invalid character reference: invalid named reference", errors.get(2).toString());     }      @Test public void noErrorsByDefault() {         String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";         Parser parser = Parser.htmlParser();         Document doc = Jsoup.parse(html, "http://example.com", parser);          List<ParseError> errors = parser.getErrors();         assertEquals(0, errors.size());     }      @Test public void handlesCommentsInTable() {         String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";         Document node = Jsoup.parseBodyFragment(html);         assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", TextUtil.stripNewlines(node.outerHtml()));     }      @Test public void handlesQuotesInCommentsInScripts() {         String html = "<script>\n" +             "  <!--\n" +             "    document.write('</scr' + 'ipt>');\n" +             "  // -->\n" +             "</script>";         Document node = Jsoup.parseBodyFragment(html);         assertEquals("<script>\n" +             "  <!--\n" +             "    document.write('</scr' + 'ipt>');\n" +             "  // -->\n" +             "</script>", node.body().html());     }      @Test public void handleNullContextInParseFragment() {         String html = "<ol><li>One</li></ol><p>Two</p>";         List<Node> nodes = Parser.parseFragment(html, null, "http://example.com/");         assertEquals(1, nodes.size()); // returns <html> node (not document) -- no context means doc gets created         assertEquals("html", nodes.get(0).nodeName());         assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));     }      @Test public void doesNotFindShortestMatchingEntity() {         // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.         // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.         String html = "One &clubsuite; &clubsuit;";         Document doc = Jsoup.parse(html);         assertEquals(StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣"), doc.body().html());     }      @Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {         // extended entities need a ; at the end to match, base does not         String html = "&amp &quot &reg &icy &hopf &icy; &hopf;";         Document doc = Jsoup.parse(html);         doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset("ascii"); // modifies output only to clarify test         assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html());     }      @Test public void handlesXmlDeclarationAsBogusComment() {         String html = "<?xml encoding='UTF-8' ?><body>One</body>";         Document doc = Jsoup.parse(html);         assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));     }      @Test public void handlesTagsInTextarea() {         String html = "<textarea><p>Jsoup</p></textarea>";         Document doc = Jsoup.parse(html);         assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html());     }      // form tests     @Test public void createsFormElements() {         String html = "<body><form><input id=1><input id=2></form></body>";         Document doc = Jsoup.parse(html);         Element el = doc.select("form").first();          assertTrue(el instanceof FormElement, "Is form element");         FormElement form = (FormElement) el;         Elements controls = form.elements();         assertEquals(2, controls.size());         assertEquals("1", controls.get(0).id());         assertEquals("2", controls.get(1).id());     }      @Test public void associatedFormControlsWithDisjointForms() {         // form gets closed, isn't parent of controls         String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";         Document doc = Jsoup.parse(html);         Element el = doc.select("form").first();          assertTrue(el instanceof FormElement, "Is form element");         FormElement form = (FormElement) el;         Elements controls = form.elements();         assertEquals(2, controls.size());         assertEquals("1", controls.get(0).id());         assertEquals("2", controls.get(1).id());          assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesInputInTable() {         String h = "<body>\n" +             "<input type=\"hidden\" name=\"a\" value=\"\">\n" +             "<table>\n" +             "<input type=\"hidden\" name=\"b\" value=\"\" />\n" +             "</table>\n" +             "</body>";         Document doc = Jsoup.parse(h);         assertEquals(1, doc.select("table input").size());         assertEquals(2, doc.select("input").size());     }      @Test public void convertsImageToImg() {         // image to img, unless in a svg. old html cruft.         String h = "<body><image><svg><image /></svg></body>";         Document doc = Jsoup.parse(h);         assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html());     }      @Test public void handlesInvalidDoctypes() {         // would previously throw invalid name exception on empty doctype         Document doc = Jsoup.parse("<!DOCTYPE>");         assertEquals(             "<!doctype> <html> <head></head> <body></body> </html>",             StringUtil.normaliseWhitespace(doc.outerHtml()));          doc = Jsoup.parse("<!DOCTYPE><html><p>Foo</p></html>");         assertEquals(             "<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>",             StringUtil.normaliseWhitespace(doc.outerHtml()));          doc = Jsoup.parse("<!DOCTYPE \u0000>");         assertEquals(             "<!doctype �> <html> <head></head> <body></body> </html>",             StringUtil.normaliseWhitespace(doc.outerHtml()));     }      @Test public void handlesManyChildren() {         // Arrange         StringBuilder longBody = new StringBuilder(500000);         for (int i = 0; i < 25000; i++) {             longBody.append(i).append("<br>");         }          // Act         long start = System.currentTimeMillis();         Document doc = Parser.parseBodyFragment(longBody.toString(), "");          // Assert         assertEquals(50000, doc.body().childNodeSize());         assertTrue(System.currentTimeMillis() - start < 1000);     }      @Test     public void testInvalidTableContents() throws IOException {         File in = ParseTest.getFile("/htmltests/table-invalid-elements.html");         Document doc = Jsoup.parse(in, "UTF-8");         doc.outputSettings().prettyPrint(true);         String rendered = doc.toString();         int endOfEmail = rendered.indexOf("Comment");         int guarantee = rendered.indexOf("Why am I here?");         assertTrue(endOfEmail > -1, "Comment not found");         assertTrue(guarantee > -1, "Search text not found");         assertTrue(guarantee > endOfEmail, "Search text did not come after comment");     }      @Test public void testNormalisesIsIndex() {         Document doc = Jsoup.parse("<body><isindex action='/submit'></body>");         String html = doc.outerHtml();         assertEquals("<form action=\"/submit\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>",             StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void testReinsertionModeForThCelss() {         String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";         Document doc = Jsoup.parse(body);         assertEquals(1, doc.body().children().size());     }      @Test public void testUsingSingleQuotesInQueries() {         String body = "<body> <div class='main'>hello</div></body>";         Document doc = Jsoup.parse(body);         Elements main = doc.select("div[class='main']");         assertEquals("hello", main.text());     }      @Test public void testSupportsNonAsciiTags() {         String body = "<進捗推移グラフ>Yes</進捗推移グラフ><русский-тэг>Correct</<русский-тэг>";         Document doc = Jsoup.parse(body);         Elements els = doc.select("進捗推移グラフ");         assertEquals("Yes", els.text());         els = doc.select("русский-тэг");         assertEquals("Correct", els.text());     }      @Test public void testSupportsPartiallyNonAsciiTags() {         String body = "<div>Check</divá>";         Document doc = Jsoup.parse(body);         Elements els = doc.select("div");         assertEquals("Check", els.text());     }      @Test public void testFragment() {         // make sure when parsing a body fragment, a script tag at start goes into the body         String html =             "<script type=\"text/javascript\">console.log('foo');</script>\n" +                 "<div id=\"somecontent\">some content</div>\n" +                 "<script type=\"text/javascript\">console.log('bar');</script>";          Document body = Jsoup.parseBodyFragment(html);         assertEquals("<script type=\"text/javascript\">console.log('foo');</script> \n" +             "<div id=\"somecontent\">\n" +             " some content\n" +             "</div> \n" +             "<script type=\"text/javascript\">console.log('bar');</script>", body.body().html());     }      @Test public void testHtmlLowerCase() {         String html = "<!doctype HTML><DIV ID=1>One</DIV>";         Document doc = Jsoup.parse(html);         assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));          Element div = doc.selectFirst("#1");         div.after("<TaG>One</TaG>");         assertEquals("<tag>One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));     }      @Test public void testHtmlLowerCaseAttributesOfVoidTags() {         String html = "<!doctype HTML><IMG ALT=One></DIV>";         Document doc = Jsoup.parse(html);         assertEquals("<!doctype html> <html> <head></head> <body> <img alt=\"One\"> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));     }      @Test public void testHtmlLowerCaseAttributesForm() {         String html = "<form NAME=one>";         Document doc = Jsoup.parse(html);         assertEquals("<form name=\"one\"></form>", StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void canPreserveTagCase() {         Parser parser = Parser.htmlParser();         parser.settings(new ParseSettings(true, false));         Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");         assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));          Element div = doc.selectFirst("#1");         div.after("<TaG ID=one>One</TaG>");         assertEquals("<TaG id=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));     }      @Test public void canPreserveAttributeCase() {         Parser parser = Parser.htmlParser();         parser.settings(new ParseSettings(false, true));         Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");         assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));          Element div = doc.selectFirst("#1");         div.after("<TaG ID=one>One</TaG>");         assertEquals("<tag ID=\"one\">One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));     }      @Test public void canPreserveBothCase() {         Parser parser = Parser.htmlParser();         parser.settings(new ParseSettings(true, true));         Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");         assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));          Element div = doc.selectFirst("#1");         div.after("<TaG ID=one>One</TaG>");         assertEquals("<TaG ID=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));     }      @Test public void handlesControlCodeInAttributeName() {         Document doc = Jsoup.parse("<p><a \06=foo>One</a><a/\06=bar><a foo\06=bar>Two</a></p>");         assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html());     }      @Test public void caseSensitiveParseTree() {         String html = "<r><X>A</X><y>B</y></r>";         Parser parser = Parser.htmlParser();         parser.settings(preserveCase);         Document doc = parser.parseInput(html, "");         assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void caseInsensitiveParseTree() {         String html = "<r><X>A</X><y>B</y></r>";         Parser parser = Parser.htmlParser();         Document doc = parser.parseInput(html, "");         assertEquals("<r> <x> A </x> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void preservedCaseLinksCantNest() {         String html = "<A>ONE <A>Two</A></A>";         Document doc = Parser.htmlParser()             .settings(preserveCase)             .parseInput(html, "");         assertEquals("<A>ONE </A><A>Two</A>", StringUtil.normaliseWhitespace(doc.body().html()));     }      @Test public void normalizesDiscordantTags() {         Document document = Jsoup.parse("<div>test</DIV><p></p>");         assertEquals("<div>\n test\n</div>\n<p></p>", document.body().html());     }      @Test public void selfClosingVoidIsNotAnError() {         String html = "<p>test<br/>test<br/></p>";         Parser parser = Parser.htmlParser().setTrackErrors(5);         parser.parseInput(html, "");         assertEquals(0, parser.getErrors().size());          assertTrue(Jsoup.isValid(html, Whitelist.basic()));         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("<p>test<br>test<br></p>", clean);     }      @Test public void selfClosingOnNonvoidIsError() {         String html = "<p>test</p><div /><div>Two</div>";         Parser parser = Parser.htmlParser().setTrackErrors(5);         parser.parseInput(html, "");         assertEquals(1, parser.getErrors().size());         assertEquals("18: Tag cannot be self closing; not a void tag", parser.getErrors().get(0).toString());          assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));         String clean = Jsoup.clean(html, Whitelist.relaxed());         assertEquals("<p>test</p> <div></div> <div> Two </div>", StringUtil.normaliseWhitespace(clean));     }      @Test public void testTemplateInsideTable() throws IOException {         File in = ParseTest.getFile("/htmltests/table-polymer-template.html");         Document doc = Jsoup.parse(in, "UTF-8");         doc.outputSettings().prettyPrint(true);          Elements templates = doc.body().getElementsByTag("template");         for (Element template : templates) {             assertTrue(template.childNodes().size() > 1);         }     }      @Test public void testHandlesDeepSpans() {         StringBuilder sb = new StringBuilder();         for (int i = 0; i < 200; i++) {             sb.append("<span>");         }          sb.append("<p>One</p>");          Document doc = Jsoup.parse(sb.toString());         assertEquals(200, doc.select("span").size());         assertEquals(1, doc.select("p").size());     }      @Test public void commentAtEnd() {         Document doc = Jsoup.parse("<!");         assertTrue(doc.childNode(0) instanceof Comment);     }      @Test public void preSkipsFirstNewline() {         Document doc = Jsoup.parse("<pre>\n\nOne\nTwo\n</pre>");         Element pre = doc.selectFirst("pre");         assertEquals("One\nTwo", pre.text());         assertEquals("\nOne\nTwo\n", pre.wholeText());     }      @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {         File in = ParseTest.getFile("/htmltests/comments.html");         Document doc = Jsoup.parse(in, "UTF-8");          assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>",             StringUtil.normaliseWhitespace(doc.html()));          assertEquals("A Certain Kind of Test", doc.head().select("title").text());     }      @Test public void fallbackToUtfIfCantEncode() throws IOException {         // that charset can't be encoded, so make sure we flip to utf          String in = "<html><meta charset=\"ISO-2022-CN\"/>One</html>";         Document doc = Jsoup.parse(new ByteArrayInputStream(in.getBytes()), null, "");          assertEquals("UTF-8", doc.charset().name());         assertEquals("One", doc.text());          String html = doc.outerHtml();         assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html));     }      @Test public void characterReaderBuffer() throws IOException {         File in = ParseTest.getFile("/htmltests/character-reader-buffer.html.gz");         Document doc = Jsoup.parse(in, "UTF-8");          String expectedHref = "http://www.domain.com/path?param_one=value&param_two=value";          Elements links = doc.select("a");         assertEquals(2, links.size());         assertEquals(expectedHref, links.get(0).attr("href")); // passes         assertEquals(expectedHref, links.get(1).attr("href")); // fails, "but was:<...ath?param_one=value&[]_two-value>"     }      @Test     public void selfClosingTextAreaDoesntLeaveDroppings() {         // https://github.com/jhy/jsoup/issues/1220         Document doc = Jsoup.parse("<div><div><textarea/></div></div>");         assertFalse(doc.body().html().contains("&lt;"));         assertFalse(doc.body().html().contains("&gt;"));         assertEquals("<div><div><textarea></textarea></div></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test     public void testNoSpuriousSpace() {         Document doc = Jsoup.parse("Just<a>One</a><a>Two</a>");         assertEquals("Just<a>One</a><a>Two</a>", doc.body().html());         assertEquals("JustOneTwo", doc.body().text());     }      @Test     public void pTagsGetIndented() {         String html = "<div><p><a href=one>One</a><p><a href=two>Two</a></p></div>";         Document doc = Jsoup.parse(html);         assertEquals("<div>\n" +             " <p><a href=\"one\">One</a></p>\n" +             " <p><a href=\"two\">Two</a></p>\n" +             "</div>", doc.body().html());     }      @Test     public void indentRegardlessOfCase() {         String html = "<p>1</p><P>2</P>";         Document doc = Jsoup.parse(html);         assertEquals(             "<body>\n" +             " <p>1</p>\n" +             " <p>2</p>\n" +             "</body>", doc.body().outerHtml());          Document caseDoc = Jsoup.parse(html, "", Parser.htmlParser().settings(preserveCase));         assertEquals(             "<body>\n" +             " <p>1</p>\n" +             " <P>2</P>\n" +             "</body>", caseDoc.body().outerHtml());     }      @Test     public void testH20() {         // https://github.com/jhy/jsoup/issues/731         String html = "H<sub>2</sub>O";         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("H<sub>2</sub>O", clean);          Document doc = Jsoup.parse(html);         assertEquals("H2O", doc.text());     }      @Test     public void testUNewlines() {         // https://github.com/jhy/jsoup/issues/851         String html = "t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e";         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e", clean);          Document doc = Jsoup.parse(html);         assertEquals("test on fire", doc.text());     }      @Test public void testFarsi() {         // https://github.com/jhy/jsoup/issues/1227         String text = "نیمه\u200Cشب";         Document doc = Jsoup.parse("<p>" + text);         assertEquals(text, doc.text());     }      @Test public void testStartOptGroup() {         // https://github.com/jhy/jsoup/issues/1313         String html = "<select>\n" +             "  <optgroup label=\"a\">\n" +             "  <option>one\n" +             "  <option>two\n" +             "  <option>three\n" +             "  <optgroup label=\"b\">\n" +             "  <option>four\n" +             "  <option>fix\n" +             "  <option>six\n" +             "</select>";         Document doc = Jsoup.parse(html);         Element select = doc.selectFirst("select");         assertEquals(2, select.childrenSize());          assertEquals("<optgroup label=\"a\"> <option>one </option><option>two </option><option>three </option></optgroup><optgroup label=\"b\"> <option>four </option><option>fix </option><option>six </option></optgroup>", select.html());     }      @Test public void readerClosedAfterParse() {         Document doc = Jsoup.parse("Hello");         TreeBuilder treeBuilder = doc.parser().getTreeBuilder();         assertNull(treeBuilder.reader);         assertNull(treeBuilder.tokeniser);     }      @Test public void scriptInDataNode() {         Document doc = Jsoup.parse("<script>Hello</script><style>There</style>");         assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode);         assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode);          doc = Jsoup.parse("<SCRIPT>Hello</SCRIPT><STYLE>There</STYLE>", "", Parser.htmlParser().settings(preserveCase));         assertTrue(doc.selectFirst("script").childNode(0) instanceof DataNode);         assertTrue(doc.selectFirst("style").childNode(0) instanceof DataNode);     }      @Test public void textareaValue() {         String html = "<TEXTAREA>YES YES</TEXTAREA>";         Document doc = Jsoup.parse(html);         assertEquals("YES YES", doc.selectFirst("textarea").val());          doc = Jsoup.parse(html, "", Parser.htmlParser().settings(preserveCase));         assertEquals("YES YES", doc.selectFirst("textarea").val());     }      @Test public void preserveWhitespaceInHead() {         String html = "\n<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n";         Document doc = Jsoup.parse(html);         doc.outputSettings().prettyPrint(false);         assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n\n</body></html>\n", doc.outerHtml());     }      @Test public void handleContentAfterBody() {         String html = "<body>One</body>  <p>Hello!</p></html> <p>There</p>";         // todo - ideally would move that space afer /html to the body when the There <p> is seen         Document doc = Jsoup.parse(html);         doc.outputSettings().prettyPrint(false);         assertEquals("<html><head></head><body>One  <p>Hello!</p><p>There</p></body></html> ", doc.outerHtml());     } } 
package org.jsoup.parser;  import org.junit.jupiter.api.Test;  import java.io.BufferedReader; import java.io.StringReader;  import static org.junit.jupiter.api.Assertions.*;  /**  * Test suite for character reader.  *  * @author Jonathan Hedley, jonathan@hedley.net  */ public class CharacterReaderTest {     public final static int maxBufferLen = CharacterReader.maxBufferLen;      @Test public void consume() {         CharacterReader r = new CharacterReader("one");         assertEquals(0, r.pos());         assertEquals('o', r.current());         assertEquals('o', r.consume());         assertEquals(1, r.pos());         assertEquals('n', r.current());         assertEquals(1, r.pos());         assertEquals('n', r.consume());         assertEquals('e', r.consume());         assertTrue(r.isEmpty());         assertEquals(CharacterReader.EOF, r.consume());         assertTrue(r.isEmpty());         assertEquals(CharacterReader.EOF, r.consume());     }      @Test public void unconsume() {         CharacterReader r = new CharacterReader("one");         assertEquals('o', r.consume());         assertEquals('n', r.current());         r.unconsume();         assertEquals('o', r.current());          assertEquals('o', r.consume());         assertEquals('n', r.consume());         assertEquals('e', r.consume());         assertTrue(r.isEmpty());         r.unconsume();         assertFalse(r.isEmpty());         assertEquals('e', r.current());         assertEquals('e', r.consume());         assertTrue(r.isEmpty());          assertEquals(CharacterReader.EOF, r.consume());         r.unconsume(); // read past, so have to eat again         assertTrue(r.isEmpty());         r.unconsume();         assertFalse(r.isEmpty());          assertEquals('e', r.consume());         assertTrue(r.isEmpty());          assertEquals(CharacterReader.EOF, r.consume());         assertTrue(r.isEmpty());     }      @Test public void mark() {         CharacterReader r = new CharacterReader("one");         r.consume();         r.mark();         assertEquals(1, r.pos());         assertEquals('n', r.consume());         assertEquals('e', r.consume());         assertTrue(r.isEmpty());         r.rewindToMark();         assertEquals(1, r.pos());         assertEquals('n', r.consume());         assertFalse(r.isEmpty());         assertEquals(2, r.pos());     }      @Test public void consumeToEnd() {         String in = "one two three";         CharacterReader r = new CharacterReader(in);         String toEnd = r.consumeToEnd();         assertEquals(in, toEnd);         assertTrue(r.isEmpty());     }      @Test public void nextIndexOfChar() {         String in = "blah blah";         CharacterReader r = new CharacterReader(in);          assertEquals(-1, r.nextIndexOf('x'));         assertEquals(3, r.nextIndexOf('h'));         String pull = r.consumeTo('h');         assertEquals("bla", pull);         r.consume();         assertEquals(2, r.nextIndexOf('l'));         assertEquals(" blah", r.consumeToEnd());         assertEquals(-1, r.nextIndexOf('x'));     }      @Test public void nextIndexOfString() {         String in = "One Two something Two Three Four";         CharacterReader r = new CharacterReader(in);          assertEquals(-1, r.nextIndexOf("Foo"));         assertEquals(4, r.nextIndexOf("Two"));         assertEquals("One Two ", r.consumeTo("something"));         assertEquals(10, r.nextIndexOf("Two"));         assertEquals("something Two Three Four", r.consumeToEnd());         assertEquals(-1, r.nextIndexOf("Two"));     }      @Test public void nextIndexOfUnmatched() {         CharacterReader r = new CharacterReader("<[[one]]");         assertEquals(-1, r.nextIndexOf("]]>"));     }      @Test public void consumeToChar() {         CharacterReader r = new CharacterReader("One Two Three");         assertEquals("One ", r.consumeTo('T'));         assertEquals("", r.consumeTo('T')); // on Two         assertEquals('T', r.consume());         assertEquals("wo ", r.consumeTo('T'));         assertEquals('T', r.consume());         assertEquals("hree", r.consumeTo('T')); // consume to end     }      @Test public void consumeToString() {         CharacterReader r = new CharacterReader("One Two Two Four");         assertEquals("One ", r.consumeTo("Two"));         assertEquals('T', r.consume());         assertEquals("wo ", r.consumeTo("Two"));         assertEquals('T', r.consume());         // To handle strings straddling across buffers, consumeTo() may return the         // data in multiple pieces near EOF.         StringBuilder builder = new StringBuilder();         String part;         do {             part = r.consumeTo("Qux");             builder.append(part);         } while (!part.isEmpty());         assertEquals("wo Four", builder.toString());     }      @Test public void advance() {         CharacterReader r = new CharacterReader("One Two Three");         assertEquals('O', r.consume());         r.advance();         assertEquals('e', r.consume());     }      @Test public void consumeToAny() {         CharacterReader r = new CharacterReader("One &bar; qux");         assertEquals("One ", r.consumeToAny('&', ';'));         assertTrue(r.matches('&'));         assertTrue(r.matches("&bar;"));         assertEquals('&', r.consume());         assertEquals("bar", r.consumeToAny('&', ';'));         assertEquals(';', r.consume());         assertEquals(" qux", r.consumeToAny('&', ';'));     }      @Test public void consumeLetterSequence() {         CharacterReader r = new CharacterReader("One &bar; qux");         assertEquals("One", r.consumeLetterSequence());         assertEquals(" &", r.consumeTo("bar;"));         assertEquals("bar", r.consumeLetterSequence());         assertEquals("; qux", r.consumeToEnd());     }      @Test public void consumeLetterThenDigitSequence() {         CharacterReader r = new CharacterReader("One12 Two &bar; qux");         assertEquals("One12", r.consumeLetterThenDigitSequence());         assertEquals(' ', r.consume());         assertEquals("Two", r.consumeLetterThenDigitSequence());         assertEquals(" &bar; qux", r.consumeToEnd());     }      @Test public void matches() {         CharacterReader r = new CharacterReader("One Two Three");         assertTrue(r.matches('O'));         assertTrue(r.matches("One Two Three"));         assertTrue(r.matches("One"));         assertFalse(r.matches("one"));         assertEquals('O', r.consume());         assertFalse(r.matches("One"));         assertTrue(r.matches("ne Two Three"));         assertFalse(r.matches("ne Two Three Four"));         assertEquals("ne Two Three", r.consumeToEnd());         assertFalse(r.matches("ne"));         assertTrue(r.isEmpty());     }      @Test     public void matchesIgnoreCase() {         CharacterReader r = new CharacterReader("One Two Three");         assertTrue(r.matchesIgnoreCase("O"));         assertTrue(r.matchesIgnoreCase("o"));         assertTrue(r.matches('O'));         assertFalse(r.matches('o'));         assertTrue(r.matchesIgnoreCase("One Two Three"));         assertTrue(r.matchesIgnoreCase("ONE two THREE"));         assertTrue(r.matchesIgnoreCase("One"));         assertTrue(r.matchesIgnoreCase("one"));         assertEquals('O', r.consume());         assertFalse(r.matchesIgnoreCase("One"));         assertTrue(r.matchesIgnoreCase("NE Two Three"));         assertFalse(r.matchesIgnoreCase("ne Two Three Four"));         assertEquals("ne Two Three", r.consumeToEnd());         assertFalse(r.matchesIgnoreCase("ne"));     }      @Test public void containsIgnoreCase() {         CharacterReader r = new CharacterReader("One TWO three");         assertTrue(r.containsIgnoreCase("two"));         assertTrue(r.containsIgnoreCase("three"));         // weird one: does not find one, because it scans for consistent case only         assertFalse(r.containsIgnoreCase("one"));     }      @Test public void matchesAny() {         char[] scan = {' ', '\n', '\t'};         CharacterReader r = new CharacterReader("One\nTwo\tThree");         assertFalse(r.matchesAny(scan));         assertEquals("One", r.consumeToAny(scan));         assertTrue(r.matchesAny(scan));         assertEquals('\n', r.consume());         assertFalse(r.matchesAny(scan));     }      @Test public void cachesStrings() {         CharacterReader r = new CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");         String one = r.consumeTo('\t');         r.consume();         String two = r.consumeTo('\t');         r.consume();         String three = r.consumeTo('\t');         r.consume();         String four = r.consumeTo('\t');         r.consume();         String five = r.consumeTo('\t');          assertEquals("Check", one);         assertEquals("Check", two);         assertEquals("Check", three);         assertEquals("CHOKE", four);         assertSame(one, two);         assertSame(two, three);         assertNotSame(three, four);         assertNotSame(four, five);         assertEquals(five, "A string that is longer than 16 chars");     }      @Test     public void rangeEquals() {         CharacterReader r = new CharacterReader("Check\tCheck\tCheck\tCHOKE");         assertTrue(r.rangeEquals(0, 5, "Check"));         assertFalse(r.rangeEquals(0, 5, "CHOKE"));         assertFalse(r.rangeEquals(0, 5, "Chec"));          assertTrue(r.rangeEquals(6, 5, "Check"));         assertFalse(r.rangeEquals(6, 5, "Chuck"));          assertTrue(r.rangeEquals(12, 5, "Check"));         assertFalse(r.rangeEquals(12, 5, "Cheeky"));          assertTrue(r.rangeEquals(18, 5, "CHOKE"));         assertFalse(r.rangeEquals(18, 5, "CHIKE"));     }      @Test     public void empty() {         CharacterReader r = new CharacterReader("One");         assertTrue(r.matchConsume("One"));         assertTrue(r.isEmpty());          r = new CharacterReader("Two");         String two = r.consumeToEnd();         assertEquals("Two", two);     }      @Test     public void consumeToNonexistentEndWhenAtAnd() {         CharacterReader r = new CharacterReader("<!");         assertTrue(r.matchConsume("<!"));         assertTrue(r.isEmpty());          String after = r.consumeTo('>');         assertEquals("", after);          assertTrue(r.isEmpty());     }      @Test     public void notEmptyAtBufferSplitPoint() {         CharacterReader r = new CharacterReader(new StringReader("How about now"), 3);         assertEquals("How", r.consumeTo(' '));         assertFalse(r.isEmpty(), "Should not be empty");          assertEquals(' ', r.consume());         assertFalse(r.isEmpty());         assertEquals(4, r.pos());         assertEquals('a', r.consume());         assertEquals(5, r.pos());         assertEquals('b', r.consume());         assertEquals('o', r.consume());         assertEquals('u', r.consume());         assertEquals('t', r.consume());         assertEquals(' ', r.consume());         assertEquals('n', r.consume());         assertEquals('o', r.consume());         assertEquals('w', r.consume());         assertTrue(r.isEmpty());     }      @Test public void bufferUp() {         String note = "HelloThere"; // + ! = 11 chars         int loopCount = 64;         StringBuilder sb = new StringBuilder();         for (int i = 0; i < loopCount; i++) {             sb.append(note);             sb.append("!");         }          String s = sb.toString();         BufferedReader br = new BufferedReader(new StringReader(s));          CharacterReader r = new CharacterReader(br);         for (int i = 0; i < loopCount; i++) {             String pull = r.consumeTo('!');             assertEquals(note, pull);             assertEquals('!', r.current());             r.advance();         }          assertTrue(r.isEmpty());     }  } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.fail;  /**  * Token queue tests.  */ public class TokenQueueTest {     @Test public void chompBalanced() {         TokenQueue tq = new TokenQueue(":contains(one (two) three) four");         String pre = tq.consumeTo("(");         String guts = tq.chompBalanced('(', ')');         String remainder = tq.remainder();          assertEquals(":contains", pre);         assertEquals("one (two) three", guts);         assertEquals(" four", remainder);     }      @Test public void chompEscapedBalanced() {         TokenQueue tq = new TokenQueue(":contains(one (two) \\( \\) \\) three) four");         String pre = tq.consumeTo("(");         String guts = tq.chompBalanced('(', ')');         String remainder = tq.remainder();          assertEquals(":contains", pre);         assertEquals("one (two) \\( \\) \\) three", guts);         assertEquals("one (two) ( ) ) three", TokenQueue.unescape(guts));         assertEquals(" four", remainder);     }      @Test public void chompBalancedMatchesAsMuchAsPossible() {         TokenQueue tq = new TokenQueue("unbalanced(something(or another)) else");         tq.consumeTo("(");         String match = tq.chompBalanced('(', ')');         assertEquals("something(or another)", match);     }      @Test public void unescape() {         assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\"));     }      @Test public void chompToIgnoreCase() {         String t = "<textarea>one < two </TEXTarea>";         TokenQueue tq = new TokenQueue(t);         String data = tq.chompToIgnoreCase("</textarea");         assertEquals("<textarea>one < two ", data);          tq = new TokenQueue("<textarea> one two < three </oops>");         data = tq.chompToIgnoreCase("</textarea");         assertEquals("<textarea> one two < three </oops>", data);     }      @Test public void addFirst() {         TokenQueue tq = new TokenQueue("One Two");         tq.consumeWord();         tq.addFirst("Three");         assertEquals("Three Two", tq.remainder());     }       @Test public void consumeToIgnoreSecondCallTest() {         String t = "<textarea>one < two </TEXTarea> third </TEXTarea>";         TokenQueue tq = new TokenQueue(t);         String data = tq.chompToIgnoreCase("</textarea>");         assertEquals("<textarea>one < two ", data);          data = tq.chompToIgnoreCase("</textarea>");         assertEquals(" third ", data);     }      @Test public void testNestedQuotes() {         validateNestedQuotes("<html><body><a id=\"identifier\" onclick=\"func('arg')\" /></body></html>", "a[onclick*=\"('arg\"]");         validateNestedQuotes("<html><body><a id=\"identifier\" onclick=func('arg') /></body></html>", "a[onclick*=\"('arg\"]");         validateNestedQuotes("<html><body><a id=\"identifier\" onclick='func(\"arg\")' /></body></html>", "a[onclick*='(\"arg']");         validateNestedQuotes("<html><body><a id=\"identifier\" onclick=func(\"arg\") /></body></html>", "a[onclick*='(\"arg']");     }      private static void validateNestedQuotes(String html, String selector) {         assertEquals("#identifier", Jsoup.parse(html).select(selector).first().cssSelector());     }      @Test     public void chompBalancedThrowIllegalArgumentException() {         try {             TokenQueue tq = new TokenQueue("unbalanced(something(or another)) else");             tq.consumeTo("(");             tq.chompBalanced('(', '+');             fail("should have thrown IllegalArgumentException");         } catch (IllegalArgumentException expected) {             assertEquals("Did not find balanced marker at 'something(or another)) else'", expected.getMessage());         }     } } 
package org.jsoup.nodes;  import org.junit.jupiter.api.Test;  import java.util.Iterator; import java.util.List; import java.util.Map;  import static org.junit.jupiter.api.Assertions.*;  /**  * Tests for Attributes.  *  * @author Jonathan Hedley  */ public class AttributesTest {      @Test     public void html() {         Attributes a = new Attributes();         a.put("Tot", "a&p");         a.put("Hello", "There");         a.put("data-name", "Jsoup");          assertEquals(3, a.size());         assertTrue(a.hasKey("Tot"));         assertTrue(a.hasKey("Hello"));         assertTrue(a.hasKey("data-name"));         assertFalse(a.hasKey("tot"));         assertTrue(a.hasKeyIgnoreCase("tot"));         assertEquals("There", a.getIgnoreCase("hEllo"));          Map<String, String> dataset = a.dataset();         assertEquals(1, dataset.size());         assertEquals("Jsoup", dataset.get("name"));         assertEquals("", a.get("tot"));         assertEquals("a&p", a.get("Tot"));         assertEquals("a&p", a.getIgnoreCase("tot"));          assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", a.html());         assertEquals(a.html(), a.toString());     }      @Test     public void testIteratorRemovable() {         Attributes a = new Attributes();         a.put("Tot", "a&p");         a.put("Hello", "There");         a.put("data-name", "Jsoup");         assertTrue(a.hasKey("Tot"));          Iterator<Attribute> iterator = a.iterator();         Attribute attr = iterator.next();         assertEquals("Tot", attr.getKey());         iterator.remove();         assertEquals(2, a.size());         attr = iterator.next();         assertEquals("Hello", attr.getKey());         assertEquals("There", attr.getValue());          // make sure that's flowing to the underlying attributes object         assertEquals(2, a.size());         assertEquals("There", a.get("Hello"));         assertFalse(a.hasKey("Tot"));     }      @Test     public void testIteratorUpdateable() {         Attributes a = new Attributes();         a.put("Tot", "a&p");         a.put("Hello", "There");          assertFalse(a.hasKey("Foo"));         Iterator<Attribute> iterator = a.iterator();         Attribute attr = iterator.next();         attr.setKey("Foo");         attr = iterator.next();         attr.setKey("Bar");         attr.setValue("Qux");          assertEquals("a&p", a.get("Foo"));         assertEquals("Qux", a.get("Bar"));         assertFalse(a.hasKey("Tot"));         assertFalse(a.hasKey("Hello"));     }      @Test public void testIteratorHasNext() {         Attributes a = new Attributes();         a.put("Tot", "1");         a.put("Hello", "2");         a.put("data-name", "3");          int seen = 0;         for (Attribute attribute : a) {             seen++;             assertEquals(String.valueOf(seen), attribute.getValue());         }         assertEquals(3, seen);     }      @Test     public void testIterator() {         Attributes a = new Attributes();         String[][] datas = {{"Tot", "raul"},             {"Hello", "pismuth"},             {"data-name", "Jsoup"}};         for (String[] atts : datas) {             a.put(atts[0], atts[1]);         }          Iterator<Attribute> iterator = a.iterator();         assertTrue(iterator.hasNext());         int i = 0;         for (Attribute attribute : a) {             assertEquals(datas[i][0], attribute.getKey());             assertEquals(datas[i][1], attribute.getValue());             i++;         }         assertEquals(datas.length, i);     }      @Test     public void testIteratorSkipsInternal() {         Attributes a = new Attributes();         a.put("One", "One");         a.put(Attributes.internalKey("baseUri"), "example.com");         a.put("Two", "Two");         a.put(Attributes.internalKey("another"), "example.com");          Iterator<Attribute> it = a.iterator();         assertTrue(it.hasNext());         assertEquals("One", it.next().getKey());         assertTrue(it.hasNext());         assertEquals("Two", it.next().getKey());         assertFalse(it.hasNext());          int seen = 0;         for (Attribute attribute : a) {             seen++;         }         assertEquals(2, seen);     }      @Test     public void testListSkipsInternal() {         Attributes a = new Attributes();         a.put("One", "One");         a.put(Attributes.internalKey("baseUri"), "example.com");         a.put("Two", "Two");         a.put(Attributes.internalKey("another"), "example.com");          List<Attribute> attributes = a.asList();         assertEquals(2, attributes.size());         assertEquals("One", attributes.get(0).getKey());         assertEquals("Two", attributes.get(1). getKey());     }      @Test public void htmlSkipsInternals() {         Attributes a = new Attributes();         a.put("One", "One");         a.put(Attributes.internalKey("baseUri"), "example.com");         a.put("Two", "Two");         a.put(Attributes.internalKey("another"), "example.com");          assertEquals(" One=\"One\" Two=\"Two\"", a.html());     }      @Test     public void testIteratorEmpty() {         Attributes a = new Attributes();          Iterator<Attribute> iterator = a.iterator();         assertFalse(iterator.hasNext());     }      @Test     public void removeCaseSensitive() {         Attributes a = new Attributes();         a.put("Tot", "a&p");         a.put("tot", "one");         a.put("Hello", "There");         a.put("hello", "There");         a.put("data-name", "Jsoup");          assertEquals(5, a.size());         a.remove("Tot");         a.remove("Hello");         assertEquals(3, a.size());         assertTrue(a.hasKey("tot"));         assertFalse(a.hasKey("Tot"));     }      @Test     public void testSetKeyConsistency() {         Attributes a = new Attributes();         a.put("a", "a");         for(Attribute at : a) {             at.setKey("b");         }         assertFalse(a.hasKey("a"), "Attribute 'a' not correctly removed");         assertTrue(a.hasKey("b"), "Attribute 'b' not present after renaming");     }      @Test     public void testBoolean() {         Attributes ats = new Attributes();         ats.put("a", "a");         ats.put("B", "b");         ats.put("c", null);          assertTrue(ats.hasDeclaredValueForKey("a"));         assertFalse(ats.hasDeclaredValueForKey("A"));         assertTrue(ats.hasDeclaredValueForKeyIgnoreCase("A"));          assertFalse(ats.hasDeclaredValueForKey("c"));         assertFalse(ats.hasDeclaredValueForKey("C"));         assertFalse(ats.hasDeclaredValueForKeyIgnoreCase("C"));     }      @Test public void testSizeWhenHasInternal() {         Attributes a = new Attributes();         a.put("One", "One");         a.put("Two", "Two");         assertEquals(2, a.size());          a.put(Attributes.internalKey("baseUri"), "example.com");         a.put(Attributes.internalKey("another"), "example.com");         assertEquals(2, a.size());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import static org.jsoup.nodes.Document.OutputSettings; import static org.jsoup.nodes.Entities.EscapeMode.*; import static org.junit.jupiter.api.Assertions.assertEquals;  public class EntitiesTest {     @Test public void escape() {         String text = "Hello &<> Å å π 新 there ¾ © »";         String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));         String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(extended));         String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(xhtml));         String escapedUtfFull = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(extended));         String escapedUtfMin = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(xhtml));          assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii);         assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull);         assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml);         assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull);         assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin);         // odd that it's defined as aring in base but angst in full          // round trip         assertEquals(text, Entities.unescape(escapedAscii));         assertEquals(text, Entities.unescape(escapedAsciiFull));         assertEquals(text, Entities.unescape(escapedAsciiXhtml));         assertEquals(text, Entities.unescape(escapedUtfFull));         assertEquals(text, Entities.unescape(escapedUtfMin));     }      @Test public void escapedSupplementary() {         String text = "\uD835\uDD59";         String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));         assertEquals("&#x1d559;", escapedAscii);         String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(extended));         assertEquals("&hopf;", escapedAsciiFull);         String escapedUtf= Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(extended));         assertEquals(text, escapedUtf);     }      @Test public void unescapeMultiChars() {         String text = "&NestedGreaterGreater; &nGg; &nGt; &nGtv; &Gt; &gg;"; // gg is not combo, but 8811 could conflict with NestedGreaterGreater or others         String un = "≫ ⋙̸ ≫⃒ ≫̸ ≫ ≫";         assertEquals(un, Entities.unescape(text));         String escaped = Entities.escape(un, new OutputSettings().charset("ascii").escapeMode(extended));         assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped);         assertEquals(un, Entities.unescape(escaped));     }      @Test public void xhtml() {         assertEquals(38, xhtml.codepointForName("amp"));         assertEquals(62, xhtml.codepointForName("gt"));         assertEquals(60, xhtml.codepointForName("lt"));         assertEquals(34, xhtml.codepointForName("quot"));          assertEquals("amp", xhtml.nameForCodepoint(38));         assertEquals("gt", xhtml.nameForCodepoint(62));         assertEquals("lt", xhtml.nameForCodepoint(60));         assertEquals("quot", xhtml.nameForCodepoint(34));     }      @Test public void getByName() {         assertEquals("≫⃒", Entities.getByName("nGt"));         assertEquals("fj", Entities.getByName("fjlig"));         assertEquals("≫", Entities.getByName("gg"));         assertEquals("©", Entities.getByName("copy"));     }      @Test public void escapeSupplementaryCharacter() {         String text = new String(Character.toChars(135361));         String escapedAscii = Entities.escape(text, new OutputSettings().charset("ascii").escapeMode(base));         assertEquals("&#x210c1;", escapedAscii);         String escapedUtf = Entities.escape(text, new OutputSettings().charset("UTF-8").escapeMode(base));         assertEquals(text, escapedUtf);     }      @Test public void notMissingMultis() {         String text = "&nparsl;";         String un = "\u2AFD\u20E5";         assertEquals(un, Entities.unescape(text));     }      @Test public void notMissingSupplementals() {         String text = "&npolint; &qfr;";         String un = "⨔ \uD835\uDD2E"; // 𝔮         assertEquals(un, Entities.unescape(text));     }      @Test public void unescape() {         String text = "Hello &AElig; &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;";         assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text));          assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"));     }      @Test public void strictUnescape() { // for attributes, enforce strict unescaping (must look like &#xxx; , not just &#xxx)         String text = "Hello &amp= &amp;";         assertEquals("Hello &amp= &", Entities.unescape(text, true));         assertEquals("Hello &= &", Entities.unescape(text));         assertEquals("Hello &= &", Entities.unescape(text, false));     }       @Test public void caseSensitive() {         String unescaped = "Ü ü & &";         assertEquals("&Uuml; &uuml; &amp; &amp;",                 Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)));          String escaped = "&Uuml; &uuml; &amp; &AMP";         assertEquals("Ü ü & &", Entities.unescape(escaped));     }      @Test public void quoteReplacements() {         String escaped = "&#92; &#36;";         String unescaped = "\\ $";          assertEquals(unescaped, Entities.unescape(escaped));     }      @Test public void letterDigitEntities() {         String html = "<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>";         Document doc = Jsoup.parse(html);         doc.outputSettings().charset("ascii");         Element p = doc.select("p").first();         assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html());         assertEquals("¹²³¼½¾", p.text());         doc.outputSettings().charset("UTF-8");         assertEquals("¹²³¼½¾", p.html());     }      @Test public void noSpuriousDecodes() {         String string = "http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2";         assertEquals(string, Entities.unescape(string));     }      @Test public void escapesGtInXmlAttributesButNotInHtml() {         // https://github.com/jhy/jsoup/issues/528 - < is OK in HTML attribute values, but not in XML           String docHtml = "<a title='<p>One</p>'>One</a>";         Document doc = Jsoup.parse(docHtml);         Element element = doc.select("a").first();          doc.outputSettings().escapeMode(base);         assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml());          doc.outputSettings().escapeMode(xhtml);         assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.integration.ParseTest; import org.jsoup.nodes.Document.OutputSettings; import org.jsoup.nodes.Document.OutputSettings.Syntax; import org.jsoup.select.Elements; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import java.io.*; import java.nio.charset.Charset; import java.nio.charset.StandardCharsets;  import static org.junit.jupiter.api.Assertions.*;  /**  Tests for Document.   @author Jonathan Hedley, jonathan@hedley.net */ public class DocumentTest {     private static final String charsetUtf8 = "UTF-8";     private static final String charsetIso8859 = "ISO-8859-1";       @Test public void setTextPreservesDocumentStructure() {         Document doc = Jsoup.parse("<p>Hello</p>");         doc.text("Replaced");         assertEquals("Replaced", doc.text());         assertEquals("Replaced", doc.body().text());         assertEquals(1, doc.select("head").size());     }      @Test public void testTitles() {         Document noTitle = Jsoup.parse("<p>Hello</p>");         Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>");          assertEquals("", noTitle.title());         noTitle.title("Hello");         assertEquals("Hello", noTitle.title());         assertEquals("Hello", noTitle.select("title").first().text());          assertEquals("First", withTitle.title());         withTitle.title("Hello");         assertEquals("Hello", withTitle.title());         assertEquals("Hello", withTitle.select("title").first().text());          Document normaliseTitle = Jsoup.parse("<title>   Hello\nthere   \n   now   \n");         assertEquals("Hello there now", normaliseTitle.title());     }      @Test public void testOutputEncoding() {         Document doc = Jsoup.parse("<p title=π>π & < > </p>");         // default is utf-8         assertEquals("<p title=\"π\">π &amp; &lt; &gt; </p>", doc.body().html());         assertEquals("UTF-8", doc.outputSettings().charset().name());          doc.outputSettings().charset("ascii");         assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());         assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt; </p>", doc.body().html());          doc.outputSettings().escapeMode(Entities.EscapeMode.extended);         assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt; </p>", doc.body().html());     }      @Test public void testXhtmlReferences() {         Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;");         doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);         assertEquals("&lt; &gt; &amp; \" ' ×", doc.body().html());     }      @Test public void testNormalisesStructure() {         Document doc = Jsoup.parse("<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>");         assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void testClone() {         Document doc = Jsoup.parse("<title>Hello</title> <p>One<p>Two");         Document clone = doc.clone();          assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));         clone.title("Hello there");         clone.select("p").first().text("One more").attr("id", "1");         assertEquals("<html><head><title>Hello there</title> </head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));         assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()));     }      @Test public void testClonesDeclarations() {         Document doc = Jsoup.parse("<!DOCTYPE html><html><head><title>Doctype test");         Document clone = doc.clone();          assertEquals(doc.html(), clone.html());         assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>",                 TextUtil.stripNewlines(clone.html()));     }      @Test public void testLocation() throws IOException {     	File in = ParseTest.getFile("/htmltests/yahoo-jp.html.gz");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html");         String location = doc.location();         String baseUri = doc.baseUri();         assertEquals("http://www.yahoo.co.jp/index.html",location);         assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/",baseUri);         in = ParseTest.getFile("/htmltests/nyt-article-1.html.gz");         doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");         location = doc.location();         baseUri = doc.baseUri();         assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",location);         assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",baseUri);     }      @Test public void testHtmlAndXmlSyntax() {         String h = "<!DOCTYPE html><body><img async checked='checked' src='&<>\"'>&lt;&gt;&amp;&quot;<foo />bar";         Document doc = Jsoup.parse(h);          doc.outputSettings().syntax(Syntax.html);         assertEquals("<!doctype html>\n" +                 "<html>\n" +                 " <head></head>\n" +                 " <body>\n" +                 "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"<foo />bar\n" +                 " </body>\n" +                 "</html>", doc.html());          doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);         assertEquals("<!DOCTYPE html>\n" +                 "<html>\n" +                 " <head></head>\n" +                 " <body>\n" +                 "  <img async=\"\" checked=\"checked\" src=\"&amp;<>&quot;\" />&lt;&gt;&amp;\"<foo />bar\n" +                 " </body>\n" +                 "</html>", doc.html());     }      @Test public void htmlParseDefaultsToHtmlOutputSyntax() {         Document doc = Jsoup.parse("x");         assertEquals(Syntax.html, doc.outputSettings().syntax());     }      @Test public void testHtmlAppendable() {     	String htmlContent = "<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>";     	Document document = Jsoup.parse(htmlContent);     	OutputSettings outputSettings = new OutputSettings();      	outputSettings.prettyPrint(false);     	document.outputSettings(outputSettings);     	assertEquals(htmlContent, document.html(new StringWriter()).toString());     }      // Ignored since this test can take awhile to run.     @Disabled     @Test public void testOverflowClone() {         StringBuilder builder = new StringBuilder();         for (int i = 0; i < 100000; i++) {             builder.insert(0, "<i>");             builder.append("</i>");         }          Document doc = Jsoup.parse(builder.toString());         doc.clone();     }      @Test public void DocumentsWithSameContentAreEqual() {         Document docA = Jsoup.parse("<div/>One");         Document docB = Jsoup.parse("<div/>One");         Document docC = Jsoup.parse("<div/>Two");          assertNotEquals(docA, docB);         assertEquals(docA, docA);         assertEquals(docA.hashCode(), docA.hashCode());         assertNotEquals(docA.hashCode(), docC.hashCode());     }      @Test public void DocumentsWithSameContentAreVerifiable() {         Document docA = Jsoup.parse("<div/>One");         Document docB = Jsoup.parse("<div/>One");         Document docC = Jsoup.parse("<div/>Two");          assertTrue(docA.hasSameValue(docB));         assertFalse(docA.hasSameValue(docC));     }      @Test     public void testMetaCharsetUpdateUtf8() {         final Document doc = createHtmlDocument("changeThis");         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetUtf8));          final String htmlCharsetUTF8 = "<html>\n" +                                         " <head>\n" +                                         "  <meta charset=\"" + charsetUtf8 + "\">\n" +                                         " </head>\n" +                                         " <body></body>\n" +                                         "</html>";         assertEquals(htmlCharsetUTF8, doc.toString());          Element selectedElement = doc.select("meta[charset]").first();         assertEquals(charsetUtf8, doc.charset().name());         assertEquals(charsetUtf8, selectedElement.attr("charset"));         assertEquals(doc.charset(), doc.outputSettings().charset());     }      @Test     public void testMetaCharsetUpdateIso8859() {         final Document doc = createHtmlDocument("changeThis");         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetIso8859));          final String htmlCharsetISO = "<html>\n" +                                         " <head>\n" +                                         "  <meta charset=\"" + charsetIso8859 + "\">\n" +                                         " </head>\n" +                                         " <body></body>\n" +                                         "</html>";         assertEquals(htmlCharsetISO, doc.toString());          Element selectedElement = doc.select("meta[charset]").first();         assertEquals(charsetIso8859, doc.charset().name());         assertEquals(charsetIso8859, selectedElement.attr("charset"));         assertEquals(doc.charset(), doc.outputSettings().charset());     }      @Test     public void testMetaCharsetUpdateNoCharset() {         final Document docNoCharset = Document.createShell("");         docNoCharset.updateMetaCharsetElement(true);         docNoCharset.charset(Charset.forName(charsetUtf8));          assertEquals(charsetUtf8, docNoCharset.select("meta[charset]").first().attr("charset"));          final String htmlCharsetUTF8 = "<html>\n" +                                         " <head>\n" +                                         "  <meta charset=\"" + charsetUtf8 + "\">\n" +                                         " </head>\n" +                                         " <body></body>\n" +                                         "</html>";         assertEquals(htmlCharsetUTF8, docNoCharset.toString());     }      @Test     public void testMetaCharsetUpdateDisabled() {         final Document docDisabled = Document.createShell("");          final String htmlNoCharset = "<html>\n" +                                         " <head></head>\n" +                                         " <body></body>\n" +                                         "</html>";         assertEquals(htmlNoCharset, docDisabled.toString());         assertNull(docDisabled.select("meta[charset]").first());     }      @Test     public void testMetaCharsetUpdateDisabledNoChanges() {         final Document doc = createHtmlDocument("dontTouch");          final String htmlCharset = "<html>\n" +                                     " <head>\n" +                                     "  <meta charset=\"dontTouch\">\n" +                                     "  <meta name=\"charset\" content=\"dontTouch\">\n" +                                     " </head>\n" +                                     " <body></body>\n" +                                     "</html>";         assertEquals(htmlCharset, doc.toString());          Element selectedElement = doc.select("meta[charset]").first();         assertNotNull(selectedElement);         assertEquals("dontTouch", selectedElement.attr("charset"));          selectedElement = doc.select("meta[name=charset]").first();         assertNotNull(selectedElement);         assertEquals("dontTouch", selectedElement.attr("content"));     }      @Test     public void testMetaCharsetUpdateEnabledAfterCharsetChange() {         final Document doc = createHtmlDocument("dontTouch");         doc.charset(Charset.forName(charsetUtf8));          Element selectedElement = doc.select("meta[charset]").first();         assertEquals(charsetUtf8, selectedElement.attr("charset"));         assertTrue(doc.select("meta[name=charset]").isEmpty());     }      @Test     public void testMetaCharsetUpdateCleanup() {         final Document doc = createHtmlDocument("dontTouch");         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetUtf8));          final String htmlCharsetUTF8 = "<html>\n" +                                         " <head>\n" +                                         "  <meta charset=\"" + charsetUtf8 + "\">\n" +                                         " </head>\n" +                                         " <body></body>\n" +                                         "</html>";          assertEquals(htmlCharsetUTF8, doc.toString());     }      @Test     public void testMetaCharsetUpdateXmlUtf8() {         final Document doc = createXmlDocument("1.0", "changeThis", true);         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetUtf8));          final String xmlCharsetUTF8 = "<?xml version=\"1.0\" encoding=\"" + charsetUtf8 + "\"?>\n" +                                         "<root>\n" +                                         " node\n" +                                         "</root>";         assertEquals(xmlCharsetUTF8, doc.toString());          XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);         assertEquals(charsetUtf8, doc.charset().name());         assertEquals(charsetUtf8, selectedNode.attr("encoding"));         assertEquals(doc.charset(), doc.outputSettings().charset());     }      @Test     public void testMetaCharsetUpdateXmlIso8859() {         final Document doc = createXmlDocument("1.0", "changeThis", true);         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetIso8859));          final String xmlCharsetISO = "<?xml version=\"1.0\" encoding=\"" + charsetIso8859 + "\"?>\n" +                                         "<root>\n" +                                         " node\n" +                                         "</root>";         assertEquals(xmlCharsetISO, doc.toString());          XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);         assertEquals(charsetIso8859, doc.charset().name());         assertEquals(charsetIso8859, selectedNode.attr("encoding"));         assertEquals(doc.charset(), doc.outputSettings().charset());     }      @Test     public void testMetaCharsetUpdateXmlNoCharset() {         final Document doc = createXmlDocument("1.0", "none", false);         doc.updateMetaCharsetElement(true);         doc.charset(Charset.forName(charsetUtf8));          final String xmlCharsetUTF8 = "<?xml version=\"1.0\" encoding=\"" + charsetUtf8 + "\"?>\n" +                                         "<root>\n" +                                         " node\n" +                                         "</root>";         assertEquals(xmlCharsetUTF8, doc.toString());          XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);         assertEquals(charsetUtf8, selectedNode.attr("encoding"));     }      @Test     public void testMetaCharsetUpdateXmlDisabled() {         final Document doc = createXmlDocument("none", "none", false);          final String xmlNoCharset = "<root>\n" +                                     " node\n" +                                     "</root>";         assertEquals(xmlNoCharset, doc.toString());     }      @Test     public void testMetaCharsetUpdateXmlDisabledNoChanges() {         final Document doc = createXmlDocument("dontTouch", "dontTouch", true);          final String xmlCharset = "<?xml version=\"dontTouch\" encoding=\"dontTouch\"?>\n" +                                     "<root>\n" +                                     " node\n" +                                     "</root>";         assertEquals(xmlCharset, doc.toString());          XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);         assertEquals("dontTouch", selectedNode.attr("encoding"));         assertEquals("dontTouch", selectedNode.attr("version"));     }      @Test     public void testMetaCharsetUpdatedDisabledPerDefault() {         final Document doc = createHtmlDocument("none");         assertFalse(doc.updateMetaCharsetElement());     }      private Document createHtmlDocument(String charset) {         final Document doc = Document.createShell("");         doc.head().appendElement("meta").attr("charset", charset);         doc.head().appendElement("meta").attr("name", "charset").attr("content", charset);          return doc;     }      private Document createXmlDocument(String version, String charset, boolean addDecl) {         final Document doc = new Document("");         doc.appendElement("root").text("node");         doc.outputSettings().syntax(Syntax.xml);          if(addDecl) {             XmlDeclaration decl = new XmlDeclaration("xml", false);             decl.attr("version", version);             decl.attr("encoding", charset);             doc.prependChild(decl);         }          return doc;     }      @Test     public void testShiftJisRoundtrip() throws Exception {         String input =                 "<html>"                         +   "<head>"                         +     "<meta http-equiv=\"content-type\" content=\"text/html; charset=Shift_JIS\" />"                         +   "</head>"                         +   "<body>"                         +     "before&nbsp;after"                         +   "</body>"                         + "</html>";         InputStream is = new ByteArrayInputStream(input.getBytes(StandardCharsets.US_ASCII));          Document doc = Jsoup.parse(is, null, "http://example.com");         doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);          String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());          assertFalse(output.contains("?"), "Should not have contained a '?'.");         assertTrue(output.contains("&#xa0;") || output.contains("&nbsp;"),                 "Should have contained a '&#xa0;' or a '&nbsp;'.");     }      @Test public void parseAndHtmlOnDifferentThreads() throws InterruptedException {         String html = "<p>Alrighty then it's not \uD83D\uDCA9. <span>Next</span></p>"; // 💩         String asci = "<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>";          final Document doc = Jsoup.parse(html);         final String[] out = new String[1];         final Elements p = doc.select("p");         assertEquals(html, p.outerHtml());          Thread thread = new Thread(() -> {             out[0] = p.outerHtml();             doc.outputSettings().charset(StandardCharsets.US_ASCII);         });         thread.start();         thread.join();          assertEquals(html, out[0]);         assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset());         assertEquals(asci, p.outerHtml());     }      @Test public void testDocumentTypeGet() {         String html = "\n\n<!-- comment -->  <!doctype html><p>One</p>";         Document doc = Jsoup.parse(html);         DocumentType documentType = doc.documentType();         assertNotNull(documentType);         assertEquals("html", documentType.name());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue;  public class ElementIT {     @Test     public void testFastReparent() {         StringBuilder htmlBuf = new StringBuilder();         int rows = 300000;         for (int i = 1; i <= rows; i++) {             htmlBuf                 .append("<p>El-")                 .append(i)                 .append("</p>");         }         String html = htmlBuf.toString();         Document doc = Jsoup.parse(html);         long start = System.currentTimeMillis();          Element wrapper = new Element("div");         List<Node> childNodes = doc.body().childNodes();         wrapper.insertChildren(0, childNodes);          long runtime = System.currentTimeMillis() - start;         assertEquals(rows, wrapper.childNodes.size());         assertEquals(0, childNodes.size()); // all moved out          doc.body().empty().appendChild(wrapper);         Element wrapperAcutal = doc.body().children().get(0);         assertEquals(wrapper, wrapperAcutal);         assertEquals("El-1", wrapperAcutal.children().get(0).text());         assertEquals("El-" + rows, wrapperAcutal.children().get(rows - 1).text());         assertTrue(runtime <= 10000);     }      @Test     public void testFastReparentExistingContent() {         StringBuilder htmlBuf = new StringBuilder();         int rows = 300000;         for (int i = 1; i <= rows; i++) {             htmlBuf                 .append("<p>El-")                 .append(i)                 .append("</p>");         }         String html = htmlBuf.toString();         Document doc = Jsoup.parse(html);         long start = System.currentTimeMillis();          Element wrapper = new Element("div");         wrapper.append("<p>Prior Content</p>");         wrapper.append("<p>End Content</p>");         assertEquals(2, wrapper.childNodes.size());          List<Node> childNodes = doc.body().childNodes();         wrapper.insertChildren(1, childNodes);          long runtime = System.currentTimeMillis() - start;         assertEquals(rows + 2, wrapper.childNodes.size());         assertEquals(0, childNodes.size()); // all moved out          doc.body().empty().appendChild(wrapper);         Element wrapperAcutal = doc.body().children().get(0);         assertEquals(wrapper, wrapperAcutal);         assertEquals("Prior Content", wrapperAcutal.children().get(0).text());         assertEquals("El-1", wrapperAcutal.children().get(1).text());          assertEquals("El-" + rows, wrapperAcutal.children().get(rows).text());         assertEquals("End Content", wrapperAcutal.children().get(rows + 1).text());          assertTrue(runtime <= 10000);     } } 
package org.jsoup.nodes;  import org.jsoup.Connection; import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  * Tests for FormElement  *  * @author Jonathan Hedley  */ public class FormElementTest {     @Test public void hasAssociatedControls() {         //"button", "fieldset", "input", "keygen", "object", "output", "select", "textarea"         String html = "<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>" +                 "<select id=7><option></select><textarea id=8><p id=9>";         Document doc = Jsoup.parse(html);          FormElement form = (FormElement) doc.select("form").first();         assertEquals(8, form.elements().size());     }      @Test public void createsFormData() {         String html = "<form><input name='one' value='two'><select name='three'><option value='not'>" +                 "<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>" +                 "<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>" +                 "<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>" +                 "<input name='ten' value='text' disabled>" +                 "<input name='eleven' value='text' type='button'>" +                 "</form>";         Document doc = Jsoup.parse(html);         FormElement form = (FormElement) doc.select("form").first();         List<Connection.KeyVal> data = form.formData();          assertEquals(6, data.size());         assertEquals("one=two", data.get(0).toString());         assertEquals("three=four", data.get(1).toString());         assertEquals("three=five", data.get(2).toString());         assertEquals("six=seven", data.get(3).toString());         assertEquals("seven=on", data.get(4).toString()); // set         assertEquals("eight=on", data.get(5).toString()); // default         // nine should not appear, not checked checkbox         // ten should not appear, disabled         // eleven should not appear, button     }      @Test public void formDataUsesFirstAttribute() {         String html = "<form><input name=test value=foo name=test2 value=bar>";         Document doc = Jsoup.parse(html);         FormElement form = (FormElement) doc.selectFirst("form");         assertEquals("test=foo", form.formData().get(0).toString());     }      @Test public void createsSubmitableConnection() {         String html = "<form action='/search'><input name='q'></form>";         Document doc = Jsoup.parse(html, "http://example.com/");         doc.select("[name=q]").attr("value", "jsoup");          FormElement form = ((FormElement) doc.select("form").first());         Connection con = form.submit();          assertEquals(Connection.Method.GET, con.request().method());         assertEquals("http://example.com/search", con.request().url().toExternalForm());         List<Connection.KeyVal> dataList = (List<Connection.KeyVal>) con.request().data();         assertEquals("q=jsoup", dataList.get(0).toString());          doc.select("form").attr("method", "post");         Connection con2 = form.submit();         assertEquals(Connection.Method.POST, con2.request().method());     }      @Test public void actionWithNoValue() {         String html = "<form><input name='q'></form>";         Document doc = Jsoup.parse(html, "http://example.com/");         FormElement form = ((FormElement) doc.select("form").first());         Connection con = form.submit();          assertEquals("http://example.com/", con.request().url().toExternalForm());     }      @Test public void actionWithNoBaseUri() {         String html = "<form><input name='q'></form>";         Document doc = Jsoup.parse(html);         FormElement form = ((FormElement) doc.select("form").first());           boolean threw = false;         try {             form.submit();         } catch (IllegalArgumentException e) {             threw = true;             assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.",                     e.getMessage());         }         assertTrue(threw);     }      @Test public void formsAddedAfterParseAreFormElements() {         Document doc = Jsoup.parse("<body />");         doc.body().html("<form action='http://example.com/search'><input name='q' value='search'>");         Element formEl = doc.select("form").first();         assertTrue(formEl instanceof FormElement);          FormElement form = (FormElement) formEl;         assertEquals(1, form.elements().size());     }      @Test public void controlsAddedAfterParseAreLinkedWithForms() {         Document doc = Jsoup.parse("<body />");         doc.body().html("<form />");          Element formEl = doc.select("form").first();         formEl.append("<input name=foo value=bar>");          assertTrue(formEl instanceof FormElement);         FormElement form = (FormElement) formEl;         assertEquals(1, form.elements().size());          List<Connection.KeyVal> data = form.formData();         assertEquals("foo=bar", data.get(0).toString());     }      @Test public void usesOnForCheckboxValueIfNoValueSet() {         Document doc = Jsoup.parse("<form><input type=checkbox checked name=foo></form>");         FormElement form = (FormElement) doc.select("form").first();         List<Connection.KeyVal> data = form.formData();         assertEquals("on", data.get(0).value());         assertEquals("foo", data.get(0).key());     }      @Test public void adoptedFormsRetainInputs() {         // test for https://github.com/jhy/jsoup/issues/249         String html = "<html>\n" +                 "<body>  \n" +                 "  <table>\n" +                 "      <form action=\"/hello.php\" method=\"post\">\n" +                 "      <tr><td>User:</td><td> <input type=\"text\" name=\"user\" /></td></tr>\n" +                 "      <tr><td>Password:</td><td> <input type=\"password\" name=\"pass\" /></td></tr>\n" +                 "      <tr><td><input type=\"submit\" name=\"login\" value=\"login\" /></td></tr>\n" +                 "   </form>\n" +                 "  </table>\n" +                 "</body>\n" +                 "</html>";         Document doc = Jsoup.parse(html);         FormElement form = (FormElement) doc.select("form").first();         List<Connection.KeyVal> data = form.formData();         assertEquals(3, data.size());         assertEquals("user", data.get(0).key());         assertEquals("pass", data.get(1).key());         assertEquals("login", data.get(2).key());     }      @Test public void removeFormElement() {         String html = "<html>\n" +                 "  <body> \n" +                 "      <form action=\"/hello.php\" method=\"post\">\n" +                 "      User:<input type=\"text\" name=\"user\" />\n" +                 "      Password:<input type=\"password\" name=\"pass\" />\n" +                 "      <input type=\"submit\" name=\"login\" value=\"login\" />\n" +                 "   </form>\n" +                 "  </body>\n" +                 "</html>  ";         Document doc = Jsoup.parse(html);         FormElement form = (FormElement) doc.selectFirst("form");         Element pass = form.selectFirst("input[name=pass]");         pass.remove();          List<Connection.KeyVal> data = form.formData();         assertEquals(2, data.size());         assertEquals("user", data.get(0).key());         assertEquals("login", data.get(1).key());         assertNull(doc.selectFirst("input[name=pass]"));     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.*;  public class AttributeTest {     @Test     public void html() {         Attribute attr = new Attribute("key", "value &");         assertEquals("key=\"value &amp;\"", attr.html());         assertEquals(attr.html(), attr.toString());     }      @Test public void testWithSupplementaryCharacterInAttributeKeyAndValue() {         String s = new String(Character.toChars(135361));         Attribute attr = new Attribute(s, "A" + s + "B");         assertEquals(s + "=\"A" + s + "B\"", attr.html());         assertEquals(attr.html(), attr.toString());     }      @Test public void validatesKeysNotEmpty() {         assertThrows(IllegalArgumentException.class, () -> new Attribute(" ", "Check"));     }      @Test public void validatesKeysNotEmptyViaSet() {         assertThrows(IllegalArgumentException.class, () -> {             Attribute attr = new Attribute("One", "Check");             attr.setKey(" ");         });     }      @Test public void booleanAttributesAreEmptyStringValues() {         Document doc = Jsoup.parse("<div hidden>");         Attributes attributes = doc.body().child(0).attributes();         assertEquals("", attributes.get("hidden"));          Attribute first = attributes.iterator().next();         assertEquals("hidden", first.getKey());         assertEquals("", first.getValue());         assertFalse(first.hasDeclaredValue());         assertTrue(Attribute.isBooleanAttribute(first.getKey()));     }      @Test public void settersOnOrphanAttribute() {         Attribute attr = new Attribute("one", "two");         attr.setKey("three");         String oldVal = attr.setValue("four");         assertEquals("two", oldVal);         assertEquals("three", attr.getKey());         assertEquals("four", attr.getValue());         assertNull(attr.parent);     }      @Test public void hasValue() {         Attribute a1 = new Attribute("one", "");         Attribute a2 = new Attribute("two", null);         Attribute a3 = new Attribute("thr", "thr");          assertTrue(a1.hasDeclaredValue());         assertFalse(a2.hasDeclaredValue());         assertTrue(a3.hasDeclaredValue());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.parser.Tag; import org.jsoup.select.*; import org.junit.jupiter.api.Test;  import java.util.*; import java.util.concurrent.atomic.AtomicInteger;  import static org.junit.jupiter.api.Assertions.*;  /**  * Tests for Element (DOM stuff mostly).  *  * @author Jonathan Hedley  */ public class ElementTest {     private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";      @Test public void getElementsByTagName() {         Document doc = Jsoup.parse(reference);         List<Element> divs = doc.getElementsByTag("div");         assertEquals(2, divs.size());         assertEquals("div1", divs.get(0).id());         assertEquals("div2", divs.get(1).id());          List<Element> ps = doc.getElementsByTag("p");         assertEquals(2, ps.size());         assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText());         assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText());         List<Element> ps2 = doc.getElementsByTag("P");         assertEquals(ps, ps2);          List<Element> imgs = doc.getElementsByTag("img");         assertEquals("foo.png", imgs.get(0).attr("src"));          List<Element> empty = doc.getElementsByTag("wtf");         assertEquals(0, empty.size());     }      @Test public void getNamespacedElementsByTag() {         Document doc = Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");         Elements els = doc.getElementsByTag("abc:def");         assertEquals(1, els.size());         assertEquals("1", els.first().id());         assertEquals("abc:def", els.first().tagName());     }      @Test public void testGetElementById() {         Document doc = Jsoup.parse(reference);         Element div = doc.getElementById("div1");         assertEquals("div1", div.id());         assertNull(doc.getElementById("none"));          Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");         Element div2 = doc2.getElementById("2");         assertEquals("div", div2.tagName()); // not the span         Element span = div2.child(0).getElementById("2"); // called from <p> context should be span         assertEquals("span", span.tagName());     }      @Test public void testGetText() {         Document doc = Jsoup.parse(reference);         assertEquals("Hello Another element", doc.text());         assertEquals("Another element", doc.getElementsByTag("p").get(1).text());     }      @Test public void testGetChildText() {         Document doc = Jsoup.parse("<p>Hello <b>there</b> now");         Element p = doc.select("p").first();         assertEquals("Hello there now", p.text());         assertEquals("Hello now", p.ownText());     }      @Test public void testNormalisesText() {         String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";         Document doc = Jsoup.parse(h);         String text = doc.text();         assertEquals("Hello There. Here is some text.", text);     }      @Test public void testKeepsPreText() {         String h = "<p>Hello \n \n there.</p> <div><pre>  What's \n\n  that?</pre>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there.   What's \n\n  that?", doc.text());     }      @Test public void testKeepsPreTextInCode() {         String h = "<pre><code>code\n\ncode</code></pre>";         Document doc = Jsoup.parse(h);         assertEquals("code\n\ncode", doc.text());         assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html());     }      @Test public void testKeepsPreTextAtDepth() {         String h = "<pre><code><span><b>code\n\ncode</b></span></code></pre>";         Document doc = Jsoup.parse(h);         assertEquals("code\n\ncode", doc.text());         assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html());     }      @Test public void testBrHasSpace() {         Document doc = Jsoup.parse("<p>Hello<br>there</p>");         assertEquals("Hello there", doc.text());         assertEquals("Hello there", doc.select("p").first().ownText());          doc = Jsoup.parse("<p>Hello <br> there</p>");         assertEquals("Hello there", doc.text());     }      @Test public void testWholeText() {         Document doc = Jsoup.parse("<p> Hello\nthere &nbsp;  </p>");         assertEquals(" Hello\nthere    ", doc.wholeText());          doc = Jsoup.parse("<p>Hello  \n  there</p>");         assertEquals("Hello  \n  there", doc.wholeText());          doc = Jsoup.parse("<p>Hello  <div>\n  there</div></p>");         assertEquals("Hello  \n  there", doc.wholeText());     }      @Test public void testGetSiblings() {         Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");         Element p = doc.getElementById("1");         assertEquals("there", p.text());         assertEquals("Hello", p.previousElementSibling().text());         assertEquals("this", p.nextElementSibling().text());         assertEquals("Hello", p.firstElementSibling().text());         assertEquals("element", p.lastElementSibling().text());     }      @Test public void testGetSiblingsWithDuplicateContent() {         Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");         Element p = doc.getElementById("1");         assertEquals("there", p.text());         assertEquals("Hello", p.previousElementSibling().text());         assertEquals("this", p.nextElementSibling().text());         assertEquals("this", p.nextElementSibling().nextElementSibling().text());         assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text());         assertEquals("Hello", p.firstElementSibling().text());         assertEquals("element", p.lastElementSibling().text());     }      @Test public void testGetParents() {         Document doc = Jsoup.parse("<div><p>Hello <span>there</span></div>");         Element span = doc.select("span").first();         Elements parents = span.parents();          assertEquals(4, parents.size());         assertEquals("p", parents.get(0).tagName());         assertEquals("div", parents.get(1).tagName());         assertEquals("body", parents.get(2).tagName());         assertEquals("html", parents.get(3).tagName());     }      @Test public void testElementSiblingIndex() {         Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");         Elements ps = doc.select("p");         assertEquals(0, ps.get(0).elementSiblingIndex());         assertEquals(1, ps.get(1).elementSiblingIndex());         assertEquals(2, ps.get(2).elementSiblingIndex());     }      @Test public void testElementSiblingIndexSameContent() {         Document doc = Jsoup.parse("<div><p>One</p>...<p>One</p>...<p>One</p>");         Elements ps = doc.select("p");         assertEquals(0, ps.get(0).elementSiblingIndex());         assertEquals(1, ps.get(1).elementSiblingIndex());         assertEquals(2, ps.get(2).elementSiblingIndex());     }      @Test public void testGetElementsWithClass() {         Document doc = Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");          List<Element> els = doc.getElementsByClass("mellow");         assertEquals(2, els.size());         assertEquals("div", els.get(0).tagName());         assertEquals("span", els.get(1).tagName());          List<Element> els2 = doc.getElementsByClass("yellow");         assertEquals(2, els2.size());         assertEquals("div", els2.get(0).tagName());         assertEquals("b", els2.get(1).tagName());          List<Element> none = doc.getElementsByClass("solo");         assertEquals(0, none.size());     }      @Test public void testGetElementsWithAttribute() {         Document doc = Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");         List<Element> els = doc.getElementsByAttribute("style");         assertEquals(2, els.size());         assertEquals("div", els.get(0).tagName());         assertEquals("b", els.get(1).tagName());          List<Element> none = doc.getElementsByAttribute("class");         assertEquals(0, none.size());     }      @Test public void testGetElementsWithAttributeDash() {         Document doc = Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");         Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");         assertEquals(1, meta.size());         assertEquals("1", meta.first().id());     }      @Test public void testGetElementsWithAttributeValue() {         Document doc = Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");         List<Element> els = doc.getElementsByAttributeValue("style", "bold");         assertEquals(1, els.size());         assertEquals("div", els.get(0).tagName());          List<Element> none = doc.getElementsByAttributeValue("style", "none");         assertEquals(0, none.size());     }      @Test public void testClassDomMethods() {         Document doc = Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");         List<Element> els = doc.getElementsByAttribute("class");         Element span = els.get(0);         assertEquals("mellow yellow", span.className());         assertTrue(span.hasClass("mellow"));         assertTrue(span.hasClass("yellow"));         Set<String> classes = span.classNames();         assertEquals(2, classes.size());         assertTrue(classes.contains("mellow"));         assertTrue(classes.contains("yellow"));          assertEquals("", doc.className());         classes = doc.classNames();         assertEquals(0, classes.size());         assertFalse(doc.hasClass("mellow"));     }      @Test public void testHasClassDomMethods() {         Tag tag = Tag.valueOf("a");         Attributes attribs = new Attributes();         Element el = new Element(tag, "", attribs);          attribs.put("class", "toto");         boolean hasClass = el.hasClass("toto");         assertTrue(hasClass);          attribs.put("class", " toto");         hasClass = el.hasClass("toto");         assertTrue(hasClass);          attribs.put("class", "toto ");         hasClass = el.hasClass("toto");         assertTrue(hasClass);          attribs.put("class", "\ttoto ");         hasClass = el.hasClass("toto");         assertTrue(hasClass);          attribs.put("class", "  toto ");         hasClass = el.hasClass("toto");         assertTrue(hasClass);          attribs.put("class", "ab");         hasClass = el.hasClass("toto");         assertFalse(hasClass);          attribs.put("class", "     ");         hasClass = el.hasClass("toto");         assertFalse(hasClass);          attribs.put("class", "tototo");         hasClass = el.hasClass("toto");         assertFalse(hasClass);          attribs.put("class", "raulpismuth  ");         hasClass = el.hasClass("raulpismuth");         assertTrue(hasClass);          attribs.put("class", " abcd  raulpismuth efgh ");         hasClass = el.hasClass("raulpismuth");         assertTrue(hasClass);          attribs.put("class", " abcd efgh raulpismuth");         hasClass = el.hasClass("raulpismuth");         assertTrue(hasClass);          attribs.put("class", " abcd efgh raulpismuth ");         hasClass = el.hasClass("raulpismuth");         assertTrue(hasClass);     }       @Test public void testClassUpdates() {         Document doc = Jsoup.parse("<div class='mellow yellow'></div>");         Element div = doc.select("div").first();          div.addClass("green");         assertEquals("mellow yellow green", div.className());         div.removeClass("red"); // noop         div.removeClass("yellow");         assertEquals("mellow green", div.className());         div.toggleClass("green").toggleClass("red");         assertEquals("mellow red", div.className());     }      @Test public void testOuterHtml() {         Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");         assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>",                 TextUtil.stripNewlines(doc.outerHtml()));     }      @Test public void testInnerHtml() {         Document doc = Jsoup.parse("<div>\n <p>Hello</p> </div>");         assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html());     }      @Test public void testFormatHtml() {         Document doc = Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");         assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html());     }      @Test public void testFormatOutline() {         Document doc = Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");         doc.outputSettings().outline(true);         assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html());     }      @Test public void testSetIndent() {         Document doc = Jsoup.parse("<div><p>Hello\nthere</p></div>");         doc.outputSettings().indentAmount(0);         assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html());     }      @Test public void testNotPretty() {         Document doc = Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");         doc.outputSettings().prettyPrint(false);         assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html());          Element div = doc.select("div").first();         assertEquals("   \n<p>Hello\n there\n</p>", div.html());     }      @Test public void testNotPrettyWithEnDashBody() {         String html = "<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>";         Document document = Jsoup.parse(html);         document.outputSettings().prettyPrint(false);          assertEquals("<div><span>1:15</span>–<span>2:15</span>&nbsp;p.m.</div>", document.body().html());     }      @Test public void testPrettyWithEnDashBody() {         String html = "<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>";         Document document = Jsoup.parse(html);          assertEquals("<div>\n <span>1:15</span>–<span>2:15</span>&nbsp;p.m.\n</div>", document.body().html());     }      @Test public void testPrettyAndOutlineWithEnDashBody() {         String html = "<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>";         Document document = Jsoup.parse(html);         document.outputSettings().outline(true);          assertEquals("<div>\n <span>1:15</span>\n –\n <span>2:15</span>\n &nbsp;p.m.\n</div>", document.body().html());     }      @Test public void testBasicFormats() {         String html = "<span>0</span>.<div><span>1</span>-<span>2</span><p><span>3</span>-<span>4</span><div>5</div>";         Document doc = Jsoup.parse(html);         assertEquals(             "<span>0</span>.\n" +             "<div>\n" +             " <span>1</span>-<span>2</span>\n" +             " <p><span>3</span>-<span>4</span></p>\n" +             " <div>\n" +             "  5\n" +             " </div>\n" +             "</div>", doc.body().html());     }      @Test public void testEmptyElementFormatHtml() {         // don't put newlines into empty blocks         Document doc = Jsoup.parse("<section><div></div></section>");         assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml());     }      @Test public void testNoIndentOnScriptAndStyle() {         // don't newline+indent closing </script> and </style> tags         Document doc = Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");         assertEquals("<script>one\ntwo</script> \n<style>three\nfour</style>", doc.head().html());     }      @Test public void testContainerOutput() {         Document doc = Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");         assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml());         assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml());         assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", doc.select("body").first().html());     }      @Test public void testSetText() {         String h = "<div id=1>Hello <p>there <b>now</b></p></div>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there now", doc.text()); // need to sort out node whitespace         assertEquals("there now", doc.select("p").get(0).text());          Element div = doc.getElementById("1").text("Gone");         assertEquals("Gone", div.text());         assertEquals(0, doc.select("p").size());     }      @Test public void testAddNewElement() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.appendElement("p").text("there");         div.appendElement("P").attr("CLASS", "second").text("now");         // manually specifying tag and attributes should maintain case based on parser settings         assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>",                 TextUtil.stripNewlines(doc.html()));          // check sibling index (with short circuit on reindexChildren):         Elements ps = doc.select("p");         for (int i = 0; i < ps.size(); i++) {             assertEquals(i, ps.get(i).siblingIndex);         }     }      @Test public void testAddBooleanAttribute() {         Element div = new Element(Tag.valueOf("div"), "");          div.attr("true", true);          div.attr("false", "value");         div.attr("false", false);          assertTrue(div.hasAttr("true"));         assertEquals("", div.attr("true"));          List<Attribute> attributes = div.attributes().asList();         assertEquals(1, attributes.size(), "There should be one attribute");         assertFalse(div.hasAttr("false"));          assertEquals("<div true></div>", div.outerHtml());     }      @Test public void testAppendRowToTable() {         Document doc = Jsoup.parse("<table><tr><td>1</td></tr></table>");         Element table = doc.select("tbody").first();         table.append("<tr><td>2</td></tr>");          assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));     }          @Test public void testPrependRowToTable() {         Document doc = Jsoup.parse("<table><tr><td>1</td></tr></table>");         Element table = doc.select("tbody").first();         table.prepend("<tr><td>2</td></tr>");          assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));          // check sibling index (reindexChildren):         Elements ps = doc.select("tr");         for (int i = 0; i < ps.size(); i++) {             assertEquals(i, ps.get(i).siblingIndex);         }     }      @Test public void testPrependElement() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prependElement("p").text("Before");         assertEquals("Before", div.child(0).text());         assertEquals("Hello", div.child(1).text());     }      @Test public void testAddNewText() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.appendText(" there & now >");         assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()));     }      @Test public void testPrependText() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prependText("there & now > ");         assertEquals("there & now > Hello", div.text());         assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()));     }      @Test public void testThrowsOnAddNullText() {         assertThrows(IllegalArgumentException.class, () -> {             Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");             Element div = doc.getElementById("1");             div.appendText(null);         });     }      @Test public void testThrowsOnPrependNullText() {         assertThrows(IllegalArgumentException.class, () -> {             Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");             Element div = doc.getElementById("1");             div.prependText(null);         });     }      @Test public void testAddNewHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.append("<p>there</p><p>now</p>");         assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()));          // check sibling index (no reindexChildren):         Elements ps = doc.select("p");         for (int i = 0; i < ps.size(); i++) {             assertEquals(i, ps.get(i).siblingIndex);         }     }      @Test public void testPrependNewHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prepend("<p>there</p><p>now</p>");         assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html()));          // check sibling index (reindexChildren):         Elements ps = doc.select("p");         for (int i = 0; i < ps.size(); i++) {             assertEquals(i, ps.get(i).siblingIndex);         }     }      @Test public void testSetHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.html("<p>there</p><p>now</p>");         assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()));     }      @Test public void testSetHtmlTitle() {         Document doc = Jsoup.parse("<html><head id=2><title id=1></title></head></html>");          Element title = doc.getElementById("1");         title.html("good");         assertEquals("good", title.html());         title.html("<i>bad</i>");         assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html());          Element head = doc.getElementById("2");         head.html("<title><i>bad</i></title>");         assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html());     }      @Test public void testWrap() {         Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>");         Element p = doc.select("p").first();         p.wrap("<div class='head'></div>");         assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));          Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");         assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>",                 TextUtil.stripNewlines(doc.body().html()));          assertEquals(ret, p);     }      @Test public void before() {         Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>");         Element p1 = doc.select("p").first();         p1.before("<div>one</div><div>two</div>");         assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));          doc.select("p").last().before("<p>Three</p><!-- four -->");         assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void after() {         Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>");         Element p1 = doc.select("p").first();         p1.after("<div>one</div><div>two</div>");         assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));          doc.select("p").last().after("<p>Three</p><!-- four -->");         assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testWrapWithRemainder() {         Document doc = Jsoup.parse("<div><p>Hello</p></div>");         Element p = doc.select("p").first();         p.wrap("<div class='head'></div><p>There!</p>");         assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testHasText() {         Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>");         Element div = doc.select("div").first();         Elements ps = doc.select("p");          assertTrue(div.hasText());         assertTrue(ps.first().hasText());         assertFalse(ps.last().hasText());     }      @Test public void dataset() {         Document doc = Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");         Element div = doc.select("div").first();         Map<String, String> dataset = div.dataset();         Attributes attributes = div.attributes();          // size, get, set, add, remove         assertEquals(2, dataset.size());         assertEquals("jsoup", dataset.get("name"));         assertEquals("jar", dataset.get("package"));          dataset.put("name", "jsoup updated");         dataset.put("language", "java");         dataset.remove("package");          assertEquals(2, dataset.size());         assertEquals(4, attributes.size());         assertEquals("jsoup updated", attributes.get("data-name"));         assertEquals("jsoup updated", dataset.get("name"));         assertEquals("java", attributes.get("data-language"));         assertEquals("java", dataset.get("language"));          attributes.put("data-food", "bacon");         assertEquals(3, dataset.size());         assertEquals("bacon", dataset.get("food"));          attributes.put("data-", "empty");         assertNull(dataset.get("")); // data- is not a data attribute          Element p = doc.select("p").first();         assertEquals(0, p.dataset().size());      }      @Test public void parentlessToString() {         Document doc = Jsoup.parse("<img src='foo'>");         Element img = doc.select("img").first();         assertEquals("<img src=\"foo\">", img.toString());          img.remove(); // lost its parent         assertEquals("<img src=\"foo\">", img.toString());     }      @Test public void testClone() {         Document doc = Jsoup.parse("<div><p>One<p><span>Two</div>");          Element p = doc.select("p").get(1);         Element clone = p.clone();          assertNull(clone.parent()); // should be orphaned         assertEquals(0, clone.siblingIndex);         assertEquals(1, p.siblingIndex);         assertNotNull(p.parent());          clone.append("<span>Three");         assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml()));         assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html())); // not modified          doc.body().appendChild(clone); // adopt         assertNotNull(clone.parent());         assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testClonesClassnames() {         Document doc = Jsoup.parse("<div class='one two'></div>");         Element div = doc.select("div").first();         Set<String> classes = div.classNames();         assertEquals(2, classes.size());         assertTrue(classes.contains("one"));         assertTrue(classes.contains("two"));          Element copy = div.clone();         Set<String> copyClasses = copy.classNames();         assertEquals(2, copyClasses.size());         assertTrue(copyClasses.contains("one"));         assertTrue(copyClasses.contains("two"));         copyClasses.add("three");         copyClasses.remove("one");          assertTrue(classes.contains("one"));         assertFalse(classes.contains("three"));         assertFalse(copyClasses.contains("one"));         assertTrue(copyClasses.contains("three"));          assertEquals("", div.html());         assertEquals("", copy.html());     }      @Test public void testShallowClone() {         String base = "http://example.com/";         Document doc = Jsoup.parse("<div id=1 class=one><p id=2 class=two>One", base);         Element d = doc.selectFirst("div");         Element p = doc.selectFirst("p");         TextNode t = p.textNodes().get(0);          Element d2 = d.shallowClone();         Element p2 = p.shallowClone();         TextNode t2 = (TextNode) t.shallowClone();          assertEquals(1, d.childNodeSize());         assertEquals(0, d2.childNodeSize());          assertEquals(1, p.childNodeSize());         assertEquals(0, p2.childNodeSize());          assertEquals("", p2.text());         assertEquals("One", t2.text());          assertEquals("two", p2.className());         p2.removeClass("two");         assertEquals("two", p.className());          d2.append("<p id=3>Three");         assertEquals(1, d2.childNodeSize());         assertEquals("Three", d2.text());         assertEquals("One", d.text());         assertEquals(base, d2.baseUri());     }      @Test public void testTagNameSet() {         Document doc = Jsoup.parse("<div><i>Hello</i>");         doc.select("i").first().tagName("em");         assertEquals(0, doc.select("i").size());         assertEquals(1, doc.select("em").size());         assertEquals("<em>Hello</em>", doc.select("div").first().html());     }      @Test public void testHtmlContainsOuter() {         Document doc = Jsoup.parse("<title>Check</title> <div>Hello there</div>");         doc.outputSettings().indentAmount(0);         assertTrue(doc.html().contains(doc.select("title").outerHtml()));         assertTrue(doc.html().contains(doc.select("div").outerHtml()));     }      @Test public void testGetTextNodes() {         Document doc = Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");         List<TextNode> textNodes = doc.select("p").first().textNodes();          assertEquals(3, textNodes.size());         assertEquals("One ", textNodes.get(0).text());         assertEquals(" Three ", textNodes.get(1).text());         assertEquals(" Four", textNodes.get(2).text());          assertEquals(0, doc.select("br").first().textNodes().size());     }      @Test public void testManipulateTextNodes() {         Document doc = Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");         Element p = doc.select("p").first();         List<TextNode> textNodes = p.textNodes();          textNodes.get(1).text(" three-more ");         textNodes.get(2).splitText(3).text("-ur");          assertEquals("One Two three-more Fo-ur", p.text());         assertEquals("One three-more Fo-ur", p.ownText());         assertEquals(4, p.textNodes().size()); // grew because of split     }      @Test public void testGetDataNodes() {         Document doc = Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");         Element script = doc.select("script").first();         Element style = doc.select("style").first();         Element p = doc.select("p").first();          List<DataNode> scriptData = script.dataNodes();         assertEquals(1, scriptData.size());         assertEquals("One Two", scriptData.get(0).getWholeData());          List<DataNode> styleData = style.dataNodes();         assertEquals(1, styleData.size());         assertEquals("Three Four", styleData.get(0).getWholeData());          List<DataNode> pData = p.dataNodes();         assertEquals(0, pData.size());     }      @Test public void elementIsNotASiblingOfItself() {         Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div>");         Element p2 = doc.select("p").get(1);          assertEquals("Two", p2.text());         Elements els = p2.siblingElements();         assertEquals(2, els.size());         assertEquals("<p>One</p>", els.get(0).outerHtml());         assertEquals("<p>Three</p>", els.get(1).outerHtml());     }      @Test public void testChildThrowsIndexOutOfBoundsOnMissing() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p></div>");         Element div = doc.select("div").first();          assertEquals(2, div.children().size());         assertEquals("One", div.child(0).text());          try {             div.child(3);             fail("Should throw index out of bounds");         } catch (IndexOutOfBoundsException e) {}     }      @Test     public void moveByAppend() {         // test for https://github.com/jhy/jsoup/issues/239         // can empty an element and append its children to another element         Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");         Element div1 = doc.select("div").get(0);         Element div2 = doc.select("div").get(1);          assertEquals(4, div1.childNodeSize());         List<Node> children = div1.childNodes();         assertEquals(4, children.size());          div2.insertChildren(0, children);          assertEquals(0, children.size()); // children is backed by div1.childNodes, moved, so should be 0 now         assertEquals(0, div1.childNodeSize());         assertEquals(4, div2.childNodeSize());         assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>",             doc.body().html());     }      @Test     public void insertChildrenArgumentValidation() {         Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");         Element div1 = doc.select("div").get(0);         Element div2 = doc.select("div").get(1);         List<Node> children = div1.childNodes();          try {             div2.insertChildren(6, children);             fail();         } catch (IllegalArgumentException e) {}          try {             div2.insertChildren(-5, children);             fail();         } catch (IllegalArgumentException e) {         }          try {             div2.insertChildren(0, (Collection<? extends Node>) null);             fail();         } catch (IllegalArgumentException e) {         }     }      @Test     public void insertChildrenAtPosition() {         Document doc = Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");         Element div1 = doc.select("div").get(0);         Elements p1s = div1.select("p");         Element div2 = doc.select("div").get(1);          assertEquals(2, div2.childNodeSize());         div2.insertChildren(-1, p1s);         assertEquals(2, div1.childNodeSize()); // moved two out         assertEquals(4, div2.childNodeSize());         assertEquals(3, p1s.get(1).siblingIndex()); // should be last          List<Node> els = new ArrayList<>();         Element el1 = new Element(Tag.valueOf("span"), "").text("Span1");         Element el2 = new Element(Tag.valueOf("span"), "").text("Span2");         TextNode tn1 = new TextNode("Text4");         els.add(el1);         els.add(el2);         els.add(tn1);          assertNull(el1.parent());         div2.insertChildren(-2, els);         assertEquals(div2, el1.parent());         assertEquals(7, div2.childNodeSize());         assertEquals(3, el1.siblingIndex());         assertEquals(4, el2.siblingIndex());         assertEquals(5, tn1.siblingIndex());     }      @Test     public void insertChildrenAsCopy() {         Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");         Element div1 = doc.select("div").get(0);         Element div2 = doc.select("div").get(1);         Elements ps = doc.select("p").clone();         ps.first().text("One cloned");         div2.insertChildren(-1, ps);          assertEquals(4, div1.childNodeSize()); // not moved -- cloned         assertEquals(2, div2.childNodeSize());         assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>",             TextUtil.stripNewlines(doc.body().html()));     }      @Test     public void testCssPath() {         Document doc = Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");         Element divA = doc.select("div").get(0);         Element divB = doc.select("div").get(1);         Element divC = doc.select("div").get(2);         assertEquals(divA.cssSelector(), "#id1");         assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)");         assertEquals(divC.cssSelector(), "html > body > div.c1.c2");          assertSame(divA, doc.select(divA.cssSelector()).first());         assertSame(divB, doc.select(divB.cssSelector()).first());         assertSame(divC, doc.select(divC.cssSelector()).first());     }       @Test     public void testClassNames() {         Document doc = Jsoup.parse("<div class=\"c1 c2\">C</div>");         Element div = doc.select("div").get(0);          assertEquals("c1 c2", div.className());          final Set<String> set1 = div.classNames();         final Object[] arr1 = set1.toArray();         assertEquals(2, arr1.length);         assertEquals("c1", arr1[0]);         assertEquals("c2", arr1[1]);          // Changes to the set should not be reflected in the Elements getters        	set1.add("c3");         assertEquals(2, div.classNames().size());         assertEquals("c1 c2", div.className());          // Update the class names to a fresh set         final Set<String> newSet = new LinkedHashSet<>(3);         newSet.addAll(set1);         newSet.add("c3");          div.classNames(newSet);           assertEquals("c1 c2 c3", div.className());          final Set<String> set2 = div.classNames();         final Object[] arr2 = set2.toArray();         assertEquals(3, arr2.length);         assertEquals("c1", arr2[0]);         assertEquals("c2", arr2[1]);         assertEquals("c3", arr2[2]);     }      @Test     public void testHashAndEqualsAndValue() {         // .equals and hashcode are identity. value is content.          String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" +                 "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";          Document doc = Jsoup.parse(doc1);         Elements els = doc.select("p");          /*         for (Element el : els) {             System.out.println(el.hashCode() + " - " + el.outerHtml());         }          0 1534787905 - <p class="one">One</p>         1 1534787905 - <p class="one">One</p>         2 1539683239 - <p class="one">Two</p>         3 1535455211 - <p class="two">One</p>         4 1534787905 - <p class="one">One</p>         5 1534787905 - <p class="one">One</p>         6 1539683239 - <p class="one">Two</p>         7 1535455211 - <p class="two">One</p>         */         assertEquals(8, els.size());         Element e0 = els.get(0);         Element e1 = els.get(1);         Element e2 = els.get(2);         Element e3 = els.get(3);         Element e4 = els.get(4);         Element e5 = els.get(5);         Element e6 = els.get(6);         Element e7 = els.get(7);          assertEquals(e0, e0);         assertTrue(e0.hasSameValue(e1));         assertTrue(e0.hasSameValue(e4));         assertTrue(e0.hasSameValue(e5));         assertNotEquals(e0, e2);         assertFalse(e0.hasSameValue(e2));         assertFalse(e0.hasSameValue(e3));         assertFalse(e0.hasSameValue(e6));         assertFalse(e0.hasSameValue(e7));          assertEquals(e0.hashCode(), e0.hashCode());         assertNotEquals(e0.hashCode(), (e2.hashCode()));         assertNotEquals(e0.hashCode(), (e3).hashCode());         assertNotEquals(e0.hashCode(), (e6).hashCode());         assertNotEquals(e0.hashCode(), (e7).hashCode());     }      @Test public void testRelativeUrls() {         String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";         Document doc = Jsoup.parse(html, "http://example.com/bar/");         Elements els = doc.select("a");          assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"));         assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"));         assertEquals("http://example.com/three.html", els.get(2).absUrl("href"));         assertEquals("http://example2.com/four/", els.get(3).absUrl("href"));         assertEquals("https://example2.com/five/", els.get(4).absUrl("href"));     }      @Test     public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {         Document doc = new Document("");         Element body = doc.appendElement("body");         body.appendElement("div1");         body.appendElement("div2");         final Element div3 = body.appendElement("div3");         div3.text("Check");         final Element div4 = body.appendElement("div4");          ArrayList<Element> toMove = new ArrayList<>();         toMove.add(div3);         toMove.add(div4);          body.insertChildren(0, toMove);          String result = doc.toString().replaceAll("\\s+", "");         assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);     }      @Test     public void testHashcodeIsStableWithContentChanges() {         Element root = new Element(Tag.valueOf("root"), "");          HashSet<Element> set = new HashSet<>();         // Add root node:         set.add(root);          root.appendChild(new Element(Tag.valueOf("a"), ""));         assertTrue(set.contains(root));     }      @Test     public void testNamespacedElements() {         // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.         String html = "<html><body><fb:comments /></body></html>";         Document doc = Jsoup.parse(html, "http://example.com/bar/");         Elements els = doc.select("fb|comments");         assertEquals(1, els.size());         assertEquals("html > body > fb|comments", els.get(0).cssSelector());     }      @Test     public void testChainedRemoveAttributes() {         String html = "<a one two three four>Text</a>";         Document doc = Jsoup.parse(html);         Element a = doc.select("a").first();         a             .removeAttr("zero")             .removeAttr("one")             .removeAttr("two")             .removeAttr("three")             .removeAttr("four")             .removeAttr("five");         assertEquals("<a>Text</a>", a.outerHtml());     }      @Test     public void testLoopedRemoveAttributes() {         String html = "<a one two three four>Text</a><p foo>Two</p>";         Document doc = Jsoup.parse(html);         for (Element el : doc.getAllElements()) {             el.clearAttributes();         }          assertEquals("<a>Text</a>\n<p>Two</p>", doc.body().html());     }      @Test     public void testIs() {         String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";         Document doc = Jsoup.parse(html);         Element p = doc.select("p").first();          assertTrue(p.is("p"));         assertFalse(p.is("div"));         assertTrue(p.is("p:has(a)"));         assertFalse(p.is("a")); // does not descend         assertTrue(p.is("p:first-child"));         assertFalse(p.is("p:last-child"));         assertTrue(p.is("*"));         assertTrue(p.is("div p"));          Element q = doc.select("p").last();         assertTrue(q.is("p"));         assertTrue(q.is("p ~ p"));         assertTrue(q.is("p + p"));         assertTrue(q.is("p:last-child"));         assertFalse(q.is("p a"));         assertFalse(q.is("a"));     }      @Test     public void testEvalMethods() {         Document doc = Jsoup.parse("<div><p>One <a class=big>Two</a> Three</p><p>Another</p>");         Element p = doc.selectFirst(QueryParser.parse(("p")));         assertEquals("One Three", p.ownText());          assertTrue(p.is(QueryParser.parse("p")));         Evaluator aEval = QueryParser.parse("a");         assertFalse(p.is(aEval));          Element a = p.selectFirst(aEval);         assertEquals("div", a.closest(QueryParser.parse("div:has( > p)")).tagName());         Element body = p.closest(QueryParser.parse("body"));         assertEquals("body", body.nodeName());     }      @Test     public void testClosest() {         String html = "<article>\n" +             "  <div id=div-01>Here is div-01\n" +             "    <div id=div-02>Here is div-02\n" +             "      <div id=div-03>Here is div-03</div>\n" +             "    </div>\n" +             "  </div>\n" +             "</article>";          Document doc = Jsoup.parse(html);         Element el = doc.selectFirst("#div-03");         assertEquals("Here is div-03", el.text());         assertEquals("div-03", el.id());          assertEquals("div-02", el.closest("#div-02").id());         assertEquals(el, el.closest("div div")); // closest div in a div is itself         assertEquals("div-01", el.closest("article > div").id());         assertEquals("article", el.closest(":not(div)").tagName());         assertNull(el.closest("p"));     }       @Test public void elementByTagName() {         Element a = new Element("P");         assertEquals("P", a.tagName());     }      @Test public void testChildrenElements() {         String html = "<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>";         Document doc = Jsoup.parse(html);         Element div = doc.select("div").first();         Element p = doc.select("p").first();         Element span = doc.select("span").first();         Element foo = doc.select("foo").first();         Element img = doc.select("img").first();          Elements docChildren = div.children();         assertEquals(2, docChildren.size());         assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml());         assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml());         assertEquals(3, div.childNodes().size());         assertEquals("Three", div.childNodes().get(2).outerHtml());          assertEquals(1, p.children().size());         assertEquals("One", p.children().text());          assertEquals(0, span.children().size());         assertEquals(1, span.childNodes().size());         assertEquals("Four", span.childNodes().get(0).outerHtml());          assertEquals(0, foo.children().size());         assertEquals(0, foo.childNodes().size());         assertEquals(0, img.children().size());         assertEquals(0, img.childNodes().size());     }      @Test public void testShadowElementsAreUpdated() {         String html = "<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>";         Document doc = Jsoup.parse(html);         Element div = doc.select("div").first();         Elements els = div.children();         List<Node> nodes = div.childNodes();          assertEquals(2, els.size()); // the two Ps         assertEquals(3, nodes.size()); // the "Three" textnode          Element p3 = new Element("p").text("P3");         Element p4 = new Element("p").text("P4");         div.insertChildren(1, p3);         div.insertChildren(3, p4);         Elements els2 = div.children();          // first els should not have changed         assertEquals(2, els.size());         assertEquals(4, els2.size());          assertEquals("<p><a>One</a></p>\n" +             "<p>P3</p>\n" +             "<p><a>Two</a></p>\n" +             "<p>P4</p>Three", div.html());         assertEquals("P3", els2.get(1).text());         assertEquals("P4", els2.get(3).text());          p3.after("<span>Another</span");          Elements els3 = div.children();         assertEquals(5, els3.size());         assertEquals("span", els3.get(2).tagName());         assertEquals("Another", els3.get(2).text());          assertEquals("<p><a>One</a></p>\n" +             "<p>P3</p><span>Another</span>\n" +             "<p><a>Two</a></p>\n" +             "<p>P4</p>Three", div.html());     }      @Test public void classNamesAndAttributeNameIsCaseInsensitive() {         String html = "<p Class='SomeText AnotherText'>One</p>";         Document doc = Jsoup.parse(html);         Element p = doc.select("p").first();         assertEquals("SomeText AnotherText", p.className());         assertTrue(p.classNames().contains("SomeText"));         assertTrue(p.classNames().contains("AnotherText"));         assertTrue(p.hasClass("SomeText"));         assertTrue(p.hasClass("sometext"));         assertTrue(p.hasClass("AnotherText"));         assertTrue(p.hasClass("anothertext"));          Element p1 = doc.select(".SomeText").first();         Element p2 = doc.select(".sometext").first();         Element p3 = doc.select("[class=SomeText AnotherText]").first();         Element p4 = doc.select("[Class=SomeText AnotherText]").first();         Element p5 = doc.select("[class=sometext anothertext]").first();         Element p6 = doc.select("[class=SomeText AnotherText]").first();         Element p7 = doc.select("[class^=sometext]").first();         Element p8 = doc.select("[class$=nothertext]").first();         Element p9 = doc.select("[class^=sometext]").first();         Element p10 = doc.select("[class$=AnotherText]").first();          assertEquals("One", p1.text());         assertEquals(p1, p2);         assertEquals(p1, p3);         assertEquals(p1, p4);         assertEquals(p1, p5);         assertEquals(p1, p6);         assertEquals(p1, p7);         assertEquals(p1, p8);         assertEquals(p1, p9);         assertEquals(p1, p10);     }  	@Test 	public void testAppendTo() { 		String parentHtml = "<div class='a'></div>"; 		String childHtml = "<div class='b'></div><p>Two</p>";  		Document parentDoc = Jsoup.parse(parentHtml); 		Element parent = parentDoc.body();         Document childDoc = Jsoup.parse(childHtml);          Element div = childDoc.select("div").first();         Element p = childDoc.select("p").first();         Element appendTo1 = div.appendTo(parent);         assertEquals(div, appendTo1);          Element appendTo2 = p.appendTo(div);         assertEquals(p, appendTo2);          assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", parentDoc.body().html());         assertEquals("", childDoc.body().html()); // got moved out 	}  	@Test public void testNormalizesNbspInText() {         String escaped = "You can't always get what you&nbsp;want.";         String withNbsp = "You can't always get what you want."; // there is an nbsp char in there         Document doc = Jsoup.parse("<p>" + escaped);         Element p = doc.select("p").first();         assertEquals("You can't always get what you want.", p.text()); // text is normalized          assertEquals("<p>" + escaped + "</p>", p.outerHtml()); // html / whole text keeps &nbsp;         assertEquals(withNbsp, p.textNodes().get(0).getWholeText());         assertEquals(160, withNbsp.charAt(29));          Element matched = doc.select("p:contains(get what you want)").first();         assertEquals("p", matched.nodeName());         assertTrue(matched.is(":containsOwn(get what you want)"));     }      @Test public void testNormalizesInvisiblesInText() {         String escaped = "This&shy;is&#x200b;one&shy;long&shy;word";         String decoded = "This\u00ADis\u200Bone\u00ADlong\u00ADword"; // browser would not display those soft hyphens / other chars, so we don't want them in the text          Document doc = Jsoup.parse("<p>" + escaped);         Element p = doc.select("p").first();         doc.outputSettings().charset("ascii"); // so that the outer html is easier to see with escaped invisibles         assertEquals("Thisisonelongword", p.text()); // text is normalized         assertEquals("<p>" + escaped + "</p>", p.outerHtml()); // html / whole text keeps &shy etc;         assertEquals(decoded, p.textNodes().get(0).getWholeText());          Element matched = doc.select("p:contains(Thisisonelongword)").first(); // really just oneloneword, no invisibles         assertEquals("p", matched.nodeName());         assertTrue(matched.is(":containsOwn(Thisisonelongword)"));      }  	@Test 	public void testRemoveBeforeIndex() { 		Document doc = Jsoup.parse( 	            "<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>", 	            ""); 	    Element body = doc.select("body").first(); 	    Elements elems = body.select("p:matchesOwn(XXX)"); 	    Element xElem = elems.first(); 	    Elements beforeX = xElem.parent().getElementsByIndexLessThan(xElem.elementSiblingIndex());  	    for(Element p : beforeX) { 	        p.remove(); 	    }  	    assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", TextUtil.stripNewlines(body.outerHtml())); 	}  	@Test 	public void testRemoveAfterIndex() { 		 Document doc2 = Jsoup.parse( 		            "<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>", 		            ""); 	    Element body = doc2.select("body").first(); 	    Elements elems = body.select("p:matchesOwn(XXX)"); 	    Element xElem = elems.first(); 	    Elements afterX = xElem.parent().getElementsByIndexGreaterThan(xElem.elementSiblingIndex());  	    for(Element p : afterX) { 	        p.remove(); 	    }  	    assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", TextUtil.stripNewlines(body.outerHtml())); 	}      @Test     public void whiteSpaceClassElement(){ 	    Tag tag = Tag.valueOf("a"); 	    Attributes attribs = new Attributes(); 	    Element el = new Element(tag, "", attribs);  	    attribs.put("class", "abc "); 	    boolean hasClass = el.hasClass("ab"); 	    assertFalse(hasClass); 	}  	@Test     public void testNextElementSiblingAfterClone() {         // via https://github.com/jhy/jsoup/issues/951         String html = "<!DOCTYPE html><html lang=\"en\"><head></head><body><div>Initial element</div></body></html>";         String expectedText = "New element";         String cloneExpect = "New element in clone";          Document original = Jsoup.parse(html);         Document clone = original.clone();          Element originalElement = original.body().child(0);         originalElement.after("<div>" + expectedText + "</div>");         Element originalNextElementSibling = originalElement.nextElementSibling();         Element originalNextSibling = (Element) originalElement.nextSibling();         assertEquals(expectedText, originalNextElementSibling.text());         assertEquals(expectedText, originalNextSibling.text());          Element cloneElement = clone.body().child(0);         cloneElement.after("<div>" + cloneExpect + "</div>");         Element cloneNextElementSibling = cloneElement.nextElementSibling();         Element cloneNextSibling = (Element) cloneElement.nextSibling();         assertEquals(cloneExpect, cloneNextElementSibling.text());         assertEquals(cloneExpect, cloneNextSibling.text());     }      @Test     public void testRemovingEmptyClassAttributeWhenLastClassRemoved() {         // https://github.com/jhy/jsoup/issues/947         Document doc = Jsoup.parse("<img class=\"one two\" />");         Element img = doc.select("img").first();         img.removeClass("one");         img.removeClass("two");         assertFalse(doc.body().html().contains("class=\"\""));     }      @Test     public void booleanAttributeOutput() {         Document doc = Jsoup.parse("<img src=foo noshade='' nohref async=async autofocus=false>");         Element img = doc.selectFirst("img");          assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", img.outerHtml());     }      @Test     public void textHasSpaceAfterBlockTags() {         Document doc = Jsoup.parse("<div>One</div>Two");         assertEquals("One Two", doc.text());     }      @Test     public void textHasSpaceBetweenDivAndCenterTags() {         Document doc = Jsoup.parse("<div>One</div><div>Two</div><center>Three</center><center>Four</center>");         assertEquals("One Two Three Four", doc.text());     }      @Test     public void testNextElementSiblings() {         Document doc = Jsoup.parse("<ul id='ul'>" +             "<li id='a'>a</li>" +             "<li id='b'>b</li>" +             "<li id='c'>c</li>" +             "</ul> Not An Element but a node" +             "<div id='div'>" +             "<li id='d'>d</li>" +             "</div>");          Element element = doc.getElementById("a");         Elements elementSiblings = element.nextElementSiblings();         assertNotNull(elementSiblings);         assertEquals(2, elementSiblings.size());         assertEquals("b", elementSiblings.get(0).id());         assertEquals("c", elementSiblings.get(1).id());          Element element1 = doc.getElementById("b");         List<Element> elementSiblings1 = element1.nextElementSiblings();         assertNotNull(elementSiblings1);         assertEquals(1, elementSiblings1.size());         assertEquals("c", elementSiblings1.get(0).id());          Element element2 = doc.getElementById("c");         List<Element> elementSiblings2 = element2.nextElementSiblings();         assertEquals(0, elementSiblings2.size());          Element ul = doc.getElementById("ul");         List<Element> elementSiblings3 = ul.nextElementSiblings();         assertNotNull(elementSiblings3);         assertEquals(1, elementSiblings3.size());         assertEquals("div", elementSiblings3.get(0).id());          Element div = doc.getElementById("div");         List<Element> elementSiblings4 = div.nextElementSiblings();         assertEquals(0, elementSiblings4.size());     }      @Test     public void testPreviousElementSiblings() {         Document doc = Jsoup.parse("<ul id='ul'>" +             "<li id='a'>a</li>" +             "<li id='b'>b</li>" +             "<li id='c'>c</li>" +             "</ul>" +             "<div id='div'>" +             "<li id='d'>d</li>" +             "</div>");          Element element = doc.getElementById("b");         Elements elementSiblings = element.previousElementSiblings();         assertNotNull(elementSiblings);         assertEquals(1, elementSiblings.size());         assertEquals("a", elementSiblings.get(0).id());          Element element1 = doc.getElementById("a");         List<Element> elementSiblings1 = element1.previousElementSiblings();         assertEquals(0, elementSiblings1.size());          Element element2 = doc.getElementById("c");         List<Element> elementSiblings2 = element2.previousElementSiblings();         assertNotNull(elementSiblings2);         assertEquals(2, elementSiblings2.size());         assertEquals("b", elementSiblings2.get(0).id());         assertEquals("a", elementSiblings2.get(1).id());          Element ul = doc.getElementById("ul");         List<Element> elementSiblings3 = ul.previousElementSiblings();         assertEquals(0, elementSiblings3.size());     }      @Test     public void testClearAttributes() {         Element el = new Element("a").attr("href", "http://example.com").text("Hello");         assertEquals("<a href=\"http://example.com\">Hello</a>", el.outerHtml());         Element el2 = el.clearAttributes(); // really just force testing the return type is Element         assertSame(el, el2);         assertEquals("<a>Hello</a>", el2.outerHtml());     }      @Test     public void testRemoveAttr() {         Element el = new Element("a")             .attr("href", "http://example.com")             .attr("id", "1")             .text("Hello");         assertEquals("<a href=\"http://example.com\" id=\"1\">Hello</a>", el.outerHtml());         Element el2 = el.removeAttr("href"); // really just force testing the return type is Element         assertSame(el, el2);         assertEquals("<a id=\"1\">Hello</a>", el2.outerHtml());     }      @Test     public void testRoot() {         Element el = new Element("a");         el.append("<span>Hello</span>");         assertEquals("<a><span>Hello</span></a>", el.outerHtml());         Element span = el.selectFirst("span");         assertNotNull(span);         Element el2 = span.root();         assertSame(el, el2);          Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three");         Element div = doc.selectFirst("div");         assertSame(doc, div.root());         assertSame(doc, div.ownerDocument());     }      @Test     public void testTraverse() {         Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three");         Element div = doc.selectFirst("div");         final AtomicInteger counter = new AtomicInteger(0);          Element div2 = div.traverse(new NodeVisitor() {              @Override             public void head(Node node, int depth) {                 counter.incrementAndGet();             }              @Override             public void tail(Node node, int depth) {              }         });          assertEquals(7, counter.get());         assertEquals(div2, div);     }      @Test     public void voidTestFilterCallReturnsElement() {         // doesn't actually test the filter so much as the return type for Element. See node.nodeFilter for an acutal test         Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three");         Element div = doc.selectFirst("div");         Element div2 = div.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 return FilterResult.CONTINUE;             }              @Override             public FilterResult tail(Node node, int depth) {                 return FilterResult.CONTINUE;             }         });          assertSame(div, div2);     }      @Test     public void doesntDeleteZWJWhenNormalizingText() {         String text = "\uD83D\uDC69\u200D\uD83D\uDCBB\uD83E\uDD26\uD83C\uDFFB\u200D\u2642\uFE0F";          Document doc = Jsoup.parse("<p>" + text + "</p><div>One&zwj;Two</div>");         Element p = doc.selectFirst("p");         Element d = doc.selectFirst("div");          assertEquals(12, p.text().length());         assertEquals(text, p.text());         assertEquals(7, d.text().length());         assertEquals("One\u200DTwo", d.text());         Element found = doc.selectFirst("div:contains(One\u200DTwo)");         assertTrue(found.hasSameValue(d));     }       @Test     public void testReparentSeperateNodes() {         String html = "<div><p>One<p>Two";         Document doc = Jsoup.parse(html);         Element new1 = new Element("p").text("Three");         Element new2 = new Element("p").text("Four");          doc.body().insertChildren(-1, new1, new2);         assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html()));          // note that these get moved from the above - as not copied         doc.body().insertChildren(0, new1, new2);         assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()));          doc.body().insertChildren(0, new2.clone(), new1.clone());         assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()));          // shifted to end         doc.body().appendChild(new1);         assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html()));     }      @Test     public void testChildSizeWithMixedContent() {         Document doc = Jsoup.parse("<table><tbody>\n<tr>\n<td>15:00</td>\n<td>sport</td>\n</tr>\n</tbody></table>");         Element row = doc.selectFirst("table tbody tr");         assertEquals(2, row.childrenSize());         assertEquals(5, row.childNodeSize());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.*;  public class CommentTest {     private Comment comment = new Comment(" This is one heck of a comment! ");     private Comment decl = new Comment("?xml encoding='ISO-8859-1'?");      @Test     public void nodeName() {         assertEquals("#comment", comment.nodeName());     }      @Test     public void getData() {         assertEquals(" This is one heck of a comment! ", comment.getData());     }      @Test     public void testToString() {         assertEquals("<!-- This is one heck of a comment! -->", comment.toString());          Document doc = Jsoup.parse("<div><!-- comment--></div>");         assertEquals("<div>\n <!-- comment-->\n</div>", doc.body().html());          doc = Jsoup.parse("<p>One<!-- comment -->Two</p>");         assertEquals("<p>One<!-- comment -->Two</p>", doc.body().html());         assertEquals("OneTwo", doc.text());     }      @Test     public void testHtmlNoPretty() {         Document doc = Jsoup.parse("<!-- a simple comment -->");         doc.outputSettings().prettyPrint(false);         assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html());         Node node = doc.childNode(0);         Comment c1 = (Comment) node;         assertEquals("<!-- a simple comment -->", c1.outerHtml());     }      @Test     public void testClone() {         Comment c1 = comment.clone();         assertNotSame(comment, c1);         assertEquals(comment.getData(), comment.getData());         c1.setData("New");         assertEquals("New", c1.getData());         assertNotEquals(c1.getData(), comment.getData());     }      @Test     public void isXmlDeclaration() {         assertFalse(comment.isXmlDeclaration());         assertTrue(decl.isXmlDeclaration());     }      @Test     public void asXmlDeclaration() {         XmlDeclaration xmlDeclaration = decl.asXmlDeclaration();         assertNotNull(xmlDeclaration);     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.parser.Tag; import org.jsoup.select.NodeVisitor; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  Tests Nodes   @author Jonathan Hedley, jonathan@hedley.net */ public class NodeTest {     @Test public void handlesBaseUri() {         Tag tag = Tag.valueOf("a");         Attributes attribs = new Attributes();         attribs.put("relHref", "/foo");         attribs.put("absHref", "http://bar/qux");          Element noBase = new Element(tag, "", attribs);         assertEquals("", noBase.absUrl("relHref")); // with no base, should NOT fallback to href attrib, whatever it is         assertEquals("http://bar/qux", noBase.absUrl("absHref")); // no base but valid attrib, return attrib          Element withBase = new Element(tag, "http://foo/", attribs);         assertEquals("http://foo/foo", withBase.absUrl("relHref")); // construct abs from base + rel         assertEquals("http://bar/qux", withBase.absUrl("absHref")); // href is abs, so returns that         assertEquals("", withBase.absUrl("noval"));          Element dodgyBase = new Element(tag, "wtf://no-such-protocol/", attribs);         assertEquals("http://bar/qux", dodgyBase.absUrl("absHref")); // base fails, but href good, so get that         assertEquals("", dodgyBase.absUrl("relHref")); // base fails, only rel href, so return nothing     }      @Test public void setBaseUriIsRecursive() {         Document doc = Jsoup.parse("<div><p></p></div>");         String baseUri = "https://jsoup.org";         doc.setBaseUri(baseUri);          assertEquals(baseUri, doc.baseUri());         assertEquals(baseUri, doc.select("div").first().baseUri());         assertEquals(baseUri, doc.select("p").first().baseUri());     }      @Test public void handlesAbsPrefix() {         Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "https://jsoup.org/");         Element a = doc.select("a").first();         assertEquals("/foo", a.attr("href"));         assertEquals("https://jsoup.org/foo", a.attr("abs:href"));         assertTrue(a.hasAttr("abs:href"));     }      @Test public void handlesAbsOnImage() {         Document doc = Jsoup.parse("<p><img src=\"/rez/osi_logo.png\" /></p>", "https://jsoup.org/");         Element img = doc.select("img").first();         assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src"));         assertEquals(img.absUrl("src"), img.attr("abs:src"));     }      @Test public void handlesAbsPrefixOnHasAttr() {         // 1: no abs url; 2: has abs url         Document doc = Jsoup.parse("<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>");         Element one = doc.select("#1").first();         Element two = doc.select("#2").first();          assertFalse(one.hasAttr("abs:href"));         assertTrue(one.hasAttr("href"));         assertEquals("", one.absUrl("href"));          assertTrue(two.hasAttr("abs:href"));         assertTrue(two.hasAttr("href"));         assertEquals("https://jsoup.org/", two.absUrl("href"));     }      @Test public void literalAbsPrefix() {         // if there is a literal attribute "abs:xxx", don't try and make absolute.         Document doc = Jsoup.parse("<a abs:href='odd'>One</a>");         Element el = doc.select("a").first();         assertTrue(el.hasAttr("abs:href"));         assertEquals("odd", el.attr("abs:href"));     }      @Test public void handleAbsOnFileUris() {         Document doc = Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file:/etc/");         Element one = doc.select("a").first();         assertEquals("file:/etc/password", one.absUrl("href"));         Element two = doc.select("a").get(1);         assertEquals("file:/var/log/messages", two.absUrl("href"));     }      @Test     public void handleAbsOnLocalhostFileUris() {         Document doc = Jsoup.parse("<a href='password'>One/a><a href='/var/log/messages'>Two</a>", "file://localhost/etc/");         Element one = doc.select("a").first();         assertEquals("file://localhost/etc/password", one.absUrl("href"));     }      @Test     public void handlesAbsOnProtocolessAbsoluteUris() {         Document doc1 = Jsoup.parse("<a href='//example.net/foo'>One</a>", "http://example.com/");         Document doc2 = Jsoup.parse("<a href='//example.net/foo'>One</a>", "https://example.com/");          Element one = doc1.select("a").first();         Element two = doc2.select("a").first();          assertEquals("http://example.net/foo", one.absUrl("href"));         assertEquals("https://example.net/foo", two.absUrl("href"));          Document doc3 = Jsoup.parse("<img src=//www.google.com/images/errors/logo_sm.gif alt=Google>", "https://google.com");         assertEquals("https://www.google.com/images/errors/logo_sm.gif", doc3.select("img").attr("abs:src"));     }      /*     Test for an issue with Java's abs URL handler.      */     @Test public void absHandlesRelativeQuery() {         Document doc = Jsoup.parse("<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>", "https://jsoup.org/path/file?bar");          Element a1 = doc.select("a").first();         assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href"));          Element a2 = doc.select("a").get(1);         assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href"));     }      @Test public void absHandlesDotFromIndex() {         Document doc = Jsoup.parse("<a href='./one/two.html'>One</a>", "http://example.com");         Element a1 = doc.select("a").first();         assertEquals("http://example.com/one/two.html", a1.absUrl("href"));     }      @Test public void testRemove() {         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");         Element p = doc.select("p").first();         p.childNode(0).remove();          assertEquals("two three", p.text());         assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()));     }      @Test public void testReplace() {         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");         Element p = doc.select("p").first();         Element insert = doc.createElement("em").text("foo");         p.childNode(1).replaceWith(insert);          assertEquals("One <em>foo</em> three", p.html());     }      @Test public void ownerDocument() {         Document doc = Jsoup.parse("<p>Hello");         Element p = doc.select("p").first();         assertSame(p.ownerDocument(), doc);         assertSame(doc.ownerDocument(), doc);         assertNull(doc.parent());     }      @Test public void root() {         Document doc = Jsoup.parse("<div><p>Hello");         Element p = doc.select("p").first();         Node root = p.root();         assertSame(doc, root);         assertNull(root.parent());         assertSame(doc.root(), doc);         assertSame(doc.root(), doc.ownerDocument());          Element standAlone = new Element(Tag.valueOf("p"), "");         assertNull(standAlone.parent());         assertSame(standAlone.root(), standAlone);         assertNull(standAlone.ownerDocument());     }      @Test public void before() {         Document doc = Jsoup.parse("<p>One <b>two</b> three</p>");         Element newNode = new Element(Tag.valueOf("em"), "");         newNode.appendText("four");          doc.select("b").first().before(newNode);         assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html());          doc.select("b").first().before("<i>five</i>");         assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html());     }      @Test public void after() {         Document doc = Jsoup.parse("<p>One <b>two</b> three</p>");         Element newNode = new Element(Tag.valueOf("em"), "");         newNode.appendText("four");          doc.select("b").first().after(newNode);         assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html());          doc.select("b").first().after("<i>five</i>");         assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html());     }      @Test public void unwrap() {         Document doc = Jsoup.parse("<div>One <span>Two <b>Three</b></span> Four</div>");         Element span = doc.select("span").first();         Node twoText = span.childNode(0);         Node node = span.unwrap();          assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html()));         assertTrue(node instanceof TextNode);         assertEquals("Two ", ((TextNode) node).text());         assertEquals(node, twoText);         assertEquals(node.parent(), doc.select("div").first());     }      @Test public void unwrapNoChildren() {         Document doc = Jsoup.parse("<div>One <span></span> Two</div>");         Element span = doc.select("span").first();         Node node = span.unwrap();         assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()));         assertNull(node);     }      @Test public void traverse() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div>There</div>");         final StringBuilder accum = new StringBuilder();         doc.select("div").first().traverse(new NodeVisitor() {             @Override             public void head(Node node, int depth) {                 accum.append("<").append(node.nodeName()).append(">");             }              @Override             public void tail(Node node, int depth) {                 accum.append("</").append(node.nodeName()).append(">");             }         });         assertEquals("<div><p><#text></#text></p></div>", accum.toString());     }      @Test public void orphanNodeReturnsNullForSiblingElements() {         Node node = new Element(Tag.valueOf("p"), "");         Element el = new Element(Tag.valueOf("p"), "");          assertEquals(0, node.siblingIndex());         assertEquals(0, node.siblingNodes().size());          assertNull(node.previousSibling());         assertNull(node.nextSibling());          assertEquals(0, el.siblingElements().size());         assertNull(el.previousElementSibling());         assertNull(el.nextElementSibling());     }      @Test public void nodeIsNotASiblingOfItself() {         Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div>");         Element p2 = doc.select("p").get(1);          assertEquals("Two", p2.text());         List<Node> nodes = p2.siblingNodes();         assertEquals(2, nodes.size());         assertEquals("<p>One</p>", nodes.get(0).outerHtml());         assertEquals("<p>Three</p>", nodes.get(1).outerHtml());     }      @Test public void childNodesCopy() {         Document doc = Jsoup.parse("<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>");         Element div1 = doc.select("#1").first();         Element div2 = doc.select("#2").first();         List<Node> divChildren = div1.childNodesCopy();         assertEquals(5, divChildren.size());         TextNode tn1 = (TextNode) div1.childNode(0);         TextNode tn2 = (TextNode) divChildren.get(0);         tn2.text("Text 1 updated");         assertEquals("Text 1 ", tn1.text());         div2.insertChildren(-1, divChildren);         assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated"             +"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void supportsClone() {         Document doc = org.jsoup.Jsoup.parse("<div class=foo>Text</div>");         Element el = doc.select("div").first();         assertTrue(el.hasClass("foo"));          Element elClone = doc.clone().select("div").first();         assertTrue(elClone.hasClass("foo"));         assertEquals("Text", elClone.text());          el.removeClass("foo");         el.text("None");         assertFalse(el.hasClass("foo"));         assertTrue(elClone.hasClass("foo"));         assertEquals("None", el.text());         assertEquals("Text", elClone.text());     }      @Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {         Document document = Jsoup.parse("<INPUT id=\"foo\" NAME=\"foo\" VALUE=\"\">");         Element inputElement = document.select("#foo").first();          inputElement.attr("value","bar");          assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement));     }      private Attributes getAttributesCaseInsensitive(Element element) {         Attributes matches = new Attributes();         for (Attribute attribute : element.attributes()) {             if (attribute.getKey().equalsIgnoreCase("value")) {                 matches.put(attribute);             }         }         return matches;     }      private Attributes singletonAttributes() {         Attributes attributes = new Attributes();         attributes.put("value", "bar");         return attributes;     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.parser.Parser; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertThrows;  /**  * Tests for the DocumentType node  *  * @author Jonathan Hedley, http://jonathanhedley.com/  */ public class DocumentTypeTest {     @Test     public void constructorValidationOkWithBlankName() {         new DocumentType("","", "");     }      @Test     public void constructorValidationThrowsExceptionOnNulls() {         assertThrows(IllegalArgumentException.class, () -> new DocumentType("html", null, null));     }      @Test     public void constructorValidationOkWithBlankPublicAndSystemIds() {         new DocumentType("html","", "");     }      @Test public void outerHtmlGeneration() {         DocumentType html5 = new DocumentType("html", "", "");         assertEquals("<!doctype html>", html5.outerHtml());          DocumentType publicDocType = new DocumentType("html", "-//IETF//DTD HTML//", "");         assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml());          DocumentType systemDocType = new DocumentType("html", "", "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd");         assertEquals("<!DOCTYPE html SYSTEM \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml());          DocumentType combo = new DocumentType("notHtml", "--public", "--system");         assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml());         assertEquals("notHtml", combo.name());         assertEquals("--public", combo.publicId());         assertEquals("--system", combo.systemId());     }      @Test public void testRoundTrip() {         String base = "<!DOCTYPE html>";         assertEquals("<!doctype html>", htmlOutput(base));         assertEquals(base, xmlOutput(base));          String publicDoc = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";         assertEquals(publicDoc, htmlOutput(publicDoc));         assertEquals(publicDoc, xmlOutput(publicDoc));          String systemDoc = "<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">";         assertEquals(systemDoc, htmlOutput(systemDoc));         assertEquals(systemDoc, xmlOutput(systemDoc));          String legacyDoc = "<!DOCTYPE html SYSTEM \"about:legacy-compat\">";         assertEquals(legacyDoc, htmlOutput(legacyDoc));         assertEquals(legacyDoc, xmlOutput(legacyDoc));     }      private String htmlOutput(String in) {         DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);         return type.outerHtml();     }      private String xmlOutput(String in) {         return Jsoup.parse(in, "", Parser.xmlParser()).childNode(0).outerHtml();     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.select.Elements; import org.jsoup.select.NodeFilter; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.*;  public class LeafNodeTest {      @Test     public void doesNotGetAttributesTooEasily() {         // test to make sure we're not setting attributes on all nodes right away         String body = "<p>One <!-- Two --> Three<![CDATA[Four]]></p>";         Document doc = Jsoup.parse(body);         assertTrue(hasAnyAttributes(doc)); // should have one - the base uri on the doc          Element html = doc.child(0);         assertFalse(hasAnyAttributes(html));          String s = doc.outerHtml();         assertFalse(hasAnyAttributes(html));          Elements els = doc.select("p");         Element p = els.first();         assertEquals(1, els.size());         assertFalse(hasAnyAttributes(html));          els = doc.select("p.none");         assertFalse(hasAnyAttributes(html));          String id = p.id();         assertEquals("", id);         assertFalse(p.hasClass("Foobs"));         assertFalse(hasAnyAttributes(html));          p.addClass("Foobs");         assertTrue(p.hasClass("Foobs"));         assertTrue(hasAnyAttributes(html));         assertTrue(hasAnyAttributes(p));          Attributes attributes = p.attributes();         assertTrue(attributes.hasKey("class"));         p.clearAttributes();         assertFalse(hasAnyAttributes(p));         assertFalse(hasAnyAttributes(html));         assertFalse(attributes.hasKey("class"));     }      private boolean hasAnyAttributes(Node node) {         final boolean[] found = new boolean[1];         node.filter(new NodeFilter() {             @Override             public FilterResult head(Node node, int depth) {                 if (node.hasAttributes()) {                     found[0] = true;                     return FilterResult.STOP;                 } else {                     return FilterResult.CONTINUE;                 }             }              @Override             public FilterResult tail(Node node, int depth) {                 return FilterResult.CONTINUE;             }         });         return found[0];     } } 
package org.jsoup.nodes;  import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import org.jsoup.Connection; import org.jsoup.Jsoup; import org.jsoup.integration.UrlConnectTest;  import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.util.ArrayList; import java.util.Comparator; import java.util.Map;  /**  * Fetches HTML entity names from w3.org json, and outputs data files for optimized used in Entities.  * I refuse to believe that entity names like "NotNestedLessLess" are valuable or useful for HTML authors. Implemented  * only to be complete.  */ class BuildEntities {     public static void main(String[] args) throws IOException {         String url = "https://www.w3.org/TR/2012/WD-html5-20121025/entities.json";         Connection.Response res = Jsoup.connect(url)             .ignoreContentType(true)             .userAgent(UrlConnectTest.browserUa)             .execute();          Gson gson = new Gson();         Map<String, CharacterRef> input = gson.fromJson(res.body(),             new TypeToken<Map<String, CharacterRef>>() {             }.getType());           // build name sorted base and full character lists:         ArrayList<CharacterRef> base = new ArrayList<>();         ArrayList<CharacterRef> full = new ArrayList<>();          for (Map.Entry<String, CharacterRef> entry : input.entrySet()) {             String name = entry.getKey().substring(1); // name is like &acute or &acute; , trim &             CharacterRef ref = entry.getValue();             if (name.endsWith(";")) {                 name = name.substring(0, name.length() - 1);                 full.add(ref);             } else {                 base.add(ref);             }             ref.name = name;         }         base.sort(byName);         full.sort(byName);          // now determine code point order         ArrayList<CharacterRef> baseByCode = new ArrayList<>(base);         ArrayList<CharacterRef> fullByCode = new ArrayList<>(full);         baseByCode.sort(byCode);         fullByCode.sort(byCode);          // and update their codepoint index.         @SuppressWarnings("unchecked") ArrayList<CharacterRef>[] codelists = new ArrayList[]{baseByCode, fullByCode};         for (ArrayList<CharacterRef> codelist : codelists) {             for (int i = 0; i < codelist.size(); i++) {                 codelist.get(i).codeIndex = i;             }         }          // now write them         persist("entities-full", full);         persist("entities-base", base);          System.out.println("Full size: " + full.size() + ", base size: " + base.size());     }      private static void persist(String name, ArrayList<CharacterRef> refs) throws IOException {         File file = Files.createTempFile(name, ".txt").toFile();         FileWriter writer = new FileWriter(file, false);         writer.append("static final String points = \"");         for (CharacterRef ref : refs) {             writer.append(ref.toString()).append('&');         }         writer.append("\";\n");         writer.close();          System.out.println("Wrote " + name + " to " + file.getAbsolutePath());     }       private static class CharacterRef {         int[] codepoints;         String name;         int codeIndex;          @Override         public String toString() {             return name                 + "="                 + d(codepoints[0])                 + (codepoints.length > 1 ? "," + d(codepoints[1]) : "")                 + ";" + d(codeIndex);         }     }      private static String d(int d) {         return Integer.toString(d, Entities.codepointRadix);     }      private static class ByName implements Comparator<CharacterRef> {         public int compare(CharacterRef o1, CharacterRef o2) {             return o1.name.compareTo(o2.name);         }     }      private static class ByCode implements Comparator<CharacterRef> {         public int compare(CharacterRef o1, CharacterRef o2) {             int[] c1 = o1.codepoints;             int[] c2 = o2.codepoints;             int first = c1[0] - c2[0];             if (first != 0)                 return first;             if (c1.length == 1 && c2.length == 1) { // for the same code, use the shorter name                 int len = o2.name.length() - o1.name.length();                 if (len != 0)                     return len;                 return o1.name.compareTo(o2.name);             }             if (c1.length == 2 && c2.length == 2)                 return c1[1] - c2[1];             else                 return c2.length - c1.length; // pushes multi down the list so hits on singles first (don't support multi lookup by codepoint yet)         }     }      private static ByName byName = new ByName();     private static ByCode byCode = new ByCode(); } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.internal.StringUtil; import org.junit.jupiter.api.Test;  import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  Test TextNodes   @author Jonathan Hedley, jonathan@hedley.net */ public class TextNodeTest {     @Test public void testBlank() {         TextNode one = new TextNode("");         TextNode two = new TextNode("     ");         TextNode three = new TextNode("  \n\n   ");         TextNode four = new TextNode("Hello");         TextNode five = new TextNode("  \nHello ");          assertTrue(one.isBlank());         assertTrue(two.isBlank());         assertTrue(three.isBlank());         assertFalse(four.isBlank());         assertFalse(five.isBlank());     }      @Test public void testTextBean() {         Document doc = Jsoup.parse("<p>One <span>two &amp;</span> three &amp;</p>");         Element p = doc.select("p").first();          Element span = doc.select("span").first();         assertEquals("two &", span.text());         TextNode spanText = (TextNode) span.childNode(0);         assertEquals("two &", spanText.text());          TextNode tn = (TextNode) p.childNode(2);         assertEquals(" three &", tn.text());          tn.text(" POW!");         assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()));          tn.attr(tn.nodeName(), "kablam &");         assertEquals("kablam &", tn.text());         assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()));     }      @Test public void testSplitText() {         Document doc = Jsoup.parse("<div>Hello there</div>");         Element div = doc.select("div").first();         TextNode tn = (TextNode) div.childNode(0);         TextNode tail = tn.splitText(6);         assertEquals("Hello ", tn.getWholeText());         assertEquals("there", tail.getWholeText());         tail.text("there!");         assertEquals("Hello there!", div.text());         assertSame(tn.parent(), tail.parent());     }      @Test public void testSplitAnEmbolden() {         Document doc = Jsoup.parse("<div>Hello there</div>");         Element div = doc.select("div").first();         TextNode tn = (TextNode) div.childNode(0);         TextNode tail = tn.splitText(6);         tail.wrap("<b></b>");          assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html())); // not great that we get \n<b>there there... must correct     }      @Test public void testWithSupplementaryCharacter(){         Document doc = Jsoup.parse(new String(Character.toChars(135361)));         TextNode t = doc.body().textNodes().get(0);         assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());     }      @Test public void testLeadNodesHaveNoChildren() {         Document doc = Jsoup.parse("<div>Hello there</div>");         Element div = doc.select("div").first();         TextNode tn = (TextNode) div.childNode(0);         List<Node> nodes = tn.childNodes();         assertEquals(0, nodes.size());     }      @Test public void testSpaceNormalise() {         // https://github.com/jhy/jsoup/issues/1309         String whole = "Two  spaces";         String norm = "Two spaces";         TextNode tn = new TextNode(whole); // there are 2 spaces between the words         assertEquals(whole, tn.getWholeText());         assertEquals(norm, tn.text());         assertEquals(norm, tn.outerHtml());         assertEquals(norm, tn.toString());          Element el = new Element("p");         el.appendChild(tn); // this used to change the context         //tn.setParentNode(el); // set any parent         assertEquals(whole, tn.getWholeText());         assertEquals(norm, tn.text());         assertEquals(norm, tn.outerHtml());         assertEquals(norm, tn.toString());          assertEquals("<p>" + norm + "</p>", el.outerHtml());         assertEquals(norm, el.html());         assertEquals(whole, el.wholeText());     }      @Test     public void testClone() {         // https://github.com/jhy/jsoup/issues/1176         TextNode x = new TextNode("zzz");         TextNode y = x.clone();          assertNotSame(x, y);         assertEquals(x.outerHtml(), y.outerHtml());          y.text("yyy");         assertNotEquals(x.outerHtml(), y.outerHtml());         assertEquals("zzz", x.text());          x.attributes(); // already cloned so no impact         y.text("xxx");         assertEquals("zzz", x.text());         assertEquals("xxx", y.text());     }      @Test     public void testCloneAfterAttributesHit() {         // https://github.com/jhy/jsoup/issues/1176         TextNode x = new TextNode("zzz");         x.attributes(); // moves content from leafnode value to attributes, which were missed in clone         TextNode y = x.clone();         y.text("xxx");         assertEquals("zzz", x.text());         assertEquals("xxx", y.text());     }      @Test     public void testHasTextWhenIterating() {         // https://github.com/jhy/jsoup/issues/1170         Document doc = Jsoup.parse("<div>One <p>Two <p>Three");         boolean foundFirst = false;         for (Element el : doc.getAllElements()) {             for (Node node : el.childNodes()) {                 if (node instanceof TextNode) {                     TextNode textNode = (TextNode) node;                     assertFalse(StringUtil.isBlank(textNode.text()));                     if (!foundFirst) {                         foundFirst = true;                         assertEquals("One ", textNode.text());                         assertEquals("One ", textNode.getWholeText());                     }                 }             }         }         assertTrue(foundFirst);     } } 
package org.jsoup.integration;  import java.util.Date;  /**  Does an A/B test on two methods, and prints out how long each took.   @author Jonathan Hedley, jonathan@hedley.net */ public class Benchmark {     public static void run(Runnable a, Runnable b, int count) {         long aMillis;         long bMillis;          print("Running test A (x%d)", count);         aMillis = time(a, count);         print("Running test B");         bMillis = time(b, count);          print("\nResults:");         print("A: %.2fs", aMillis / 1000f);         print("B: %.2fs", bMillis / 1000f);         print("\nB ran in %.2f %% time of A\n", (bMillis *1f / aMillis * 1f) * 100f);     }      private static long time(Runnable test, int count) {         Date start = new Date();         for (int i = 0; i < count; i++) {             test.run();         }         Date end = new Date();         return end.getTime() - start.getTime();     }      private static void print(String msgFormat, Object... msgParams) {         System.out.println(String.format(msgFormat, msgParams));     } } 
package org.jsoup.integration;  import org.jsoup.Jsoup; import org.jsoup.helper.DataUtil; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.parser.ParseErrorList; import org.jsoup.parser.Parser; import org.jsoup.select.Elements; import org.junit.jupiter.api.Test;  import java.io.*; import java.net.URISyntaxException; import java.net.URL; import java.nio.ByteBuffer; import java.nio.charset.StandardCharsets; import java.nio.file.Files; import java.util.zip.GZIPInputStream;  import static org.junit.jupiter.api.Assertions.*;  /**  * Integration test: parses from real-world example HTML.  *  * @author Jonathan Hedley, jonathan@hedley.net  */ public class ParseTest {      @Test     public void testSmhBizArticle() throws IOException {         File in = getFile("/htmltests/smh-biz-article-1.html.gz");         Document doc = Jsoup.parse(in, "UTF-8",                 "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html");         assertEquals("The board’s next fear: the female quota",                 doc.title()); // note that the apos in the source is a literal ’ (8217), not escaped or '         assertEquals("en", doc.select("html").attr("xml:lang"));          Elements articleBody = doc.select(".articleBody > *");         assertEquals(17, articleBody.size());         // todo: more tests!      }      @Test     public void testNewsHomepage() throws IOException {         File in = getFile("/htmltests/news-com-au-home.html.gz");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/");         assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title());         assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim());          Element a = doc.select("a[href=/entertainment/horoscopes]").first();         assertEquals("/entertainment/horoscopes", a.attr("href"));         assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"));          Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first();         assertEquals(                 "http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003",                 hs.attr("href"));         assertEquals(hs.attr("href"), hs.attr("abs:href"));     }      @Test     public void testGoogleSearchIpod() throws IOException {         File in = getFile("/htmltests/google-ipod.html.gz");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10");         assertEquals("ipod - Google Search", doc.title());         Elements results = doc.select("h3.r > a");         assertEquals(12, results.size());         assertEquals(                 "http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA",                 results.get(0).attr("href"));         assertEquals("http://www.apple.com/itunes/",                 results.get(1).attr("href"));     }      @Test     public void testYahooJp() throws IOException {         File in = getFile("/htmltests/yahoo-jp.html.gz");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html"); // http charset is utf-8.         assertEquals("Yahoo! JAPAN", doc.title());         Element a = doc.select("a[href=t/2322m2]").first();         assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2",                 a.attr("abs:href")); // session put into <base>         assertEquals("全国、人気の駅ランキング", a.text());     }      @Test     public void testBaidu() throws IOException {         // tests <meta http-equiv="Content-Type" content="text/html;charset=gb2312">         File in = getFile("/htmltests/baidu-cn-home.html");         Document doc = Jsoup.parse(in, null,                 "http://www.baidu.com/"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse         Element submit = doc.select("#su").first();         assertEquals("百度一下", submit.attr("value"));          // test from attribute match         submit = doc.select("input[value=百度一下]").first();         assertEquals("su", submit.id());         Element newsLink = doc.select("a:contains(新)").first();         assertEquals("http://news.baidu.com", newsLink.absUrl("href"));          // check auto-detect from meta         assertEquals("GB2312", doc.outputSettings().charset().displayName());         assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml());          doc.outputSettings().charset("ascii");         assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>",                 doc.select("title").outerHtml());     }      @Test     public void testBaiduVariant() throws IOException {         // tests <meta charset> when preceded by another <meta>         File in = getFile("/htmltests/baidu-variant.html");         Document doc = Jsoup.parse(in, null,                 "http://www.baidu.com/"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse         // check auto-detect from meta         assertEquals("GB2312", doc.outputSettings().charset().displayName());         assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml());     }      @Test     public void testHtml5Charset() throws IOException {         // test that <meta charset="gb2312"> works         File in = getFile("/htmltests/meta-charset-1.html");         Document doc = Jsoup.parse(in, null, "http://example.com/"); //gb2312, has html5 <meta charset>         assertEquals("新", doc.text());         assertEquals("GB2312", doc.outputSettings().charset().displayName());          // double check, no charset, falls back to utf8 which is incorrect         in = getFile("/htmltests/meta-charset-2.html"); //         doc = Jsoup.parse(in, null, "http://example.com"); // gb2312, no charset         assertEquals("UTF-8", doc.outputSettings().charset().displayName());         assertNotEquals("新", doc.text());          // confirm fallback to utf8         in = getFile("/htmltests/meta-charset-3.html");         doc = Jsoup.parse(in, null, "http://example.com/"); // utf8, no charset         assertEquals("UTF-8", doc.outputSettings().charset().displayName());         assertEquals("新", doc.text());     }      @Test     public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {         InputStream in = inputStreamFrom("<html>\n" +                 "<head><meta charset=UTF-8\"></head>\n" +                 "<body></body>\n" +                 "</html>");         Document doc = Jsoup.parse(in, null, "http://example.com/");         assertEquals("UTF-8", doc.outputSettings().charset().displayName());     }      @Test     public void testNytArticle() throws IOException {         // has tags like <nyt_text>         File in = getFile("/htmltests/nyt-article-1.html.gz");         Document doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");          Element headline = doc.select("nyt_headline[version=1.0]").first();         assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text());     }      @Test     public void testYahooArticle() throws IOException {         File in = getFile("/htmltests/yahoo-article-1.html.gz");         Document doc = Jsoup.parse(in, "UTF-8", "http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china");         Element p = doc.select("p:contains(Volt will be sold in the United States)").first();         assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text());     }      @Test     public void testLowercaseUtf8Charset() throws IOException {         File in = getFile("/htmltests/lowercase-charset-test.html");         Document doc = Jsoup.parse(in, null);          Element form = doc.select("#form").first();         assertEquals(2, form.children().size());         assertEquals("UTF-8", doc.outputSettings().charset().name());     }      @Test     public void testXwiki() throws IOException {         // https://github.com/jhy/jsoup/issues/1324         // this tests that when in CharacterReader we hit a buffer while marked, we preserve the mark when buffered up and can rewind         File in = getFile("/htmltests/xwiki-1324.html.gz");         Document doc = Jsoup.parse(in, null, "https://localhost/");         assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text());          // was getting busted at =userdirectory, because it hit the bufferup point but the mark was then lost. so         // updated to preserve the mark.         String wantHtml = "<a class=\"list-group-item\" data-id=\"userdirectory\" href=\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;section=userdirectory\" title=\"Customize the user directory live table.\">User Directory</a>";         assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml());     }      @Test     public void testXwikiExpanded() throws IOException {         // https://github.com/jhy/jsoup/issues/1324         // this tests that if there is a huge illegal character reference, we can get through a buffer and rewind, and still catch that it's an invalid refence,         // and the parse tree is correct.         File in = getFile("/htmltests/xwiki-edit.html.gz");         Parser parser = Parser.htmlParser();         Document doc = Jsoup.parse(new GZIPInputStream(new FileInputStream(in)), "UTF-8", "https://localhost/", parser.setTrackErrors(100));         ParseErrorList errors = parser.getErrors();          assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text());         assertEquals(0, errors.size()); // not an invalid reference because did not look legit          // was getting busted at =userdirectory, because it hit the bufferup point but the mark was then lost. so         // updated to preserve the mark.         String wantHtml = "<a class=\"list-group-item\" data-id=\"userdirectory\" href=\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;RIGHTHERERIGHTHERERIGHTHERERIGHTHERE";         assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml));     }      @Test public void testWikiExpandedFromString() throws IOException {         File in = getFile("/htmltests/xwiki-edit.html.gz");         String html = getFileAsString(in);         Document doc = Jsoup.parse(html);         assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text());         String wantHtml = "<a class=\"list-group-item\" data-id=\"userdirectory\" href=\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;RIGHTHERERIGHTHERERIGHTHERERIGHTHERE";         assertTrue(doc.select("[data-id=userdirectory]").outerHtml().startsWith(wantHtml));     }      @Test public void testWikiFromString() throws IOException {         File in = getFile("/htmltests/xwiki-1324.html.gz");         String html = getFileAsString(in);         Document doc = Jsoup.parse(html);         assertEquals("XWiki Jetty HSQLDB 12.1-SNAPSHOT", doc.select("#xwikiplatformversion").text());         String wantHtml = "<a class=\"list-group-item\" data-id=\"userdirectory\" href=\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;section=userdirectory\" title=\"Customize the user directory live table.\">User Directory</a>";         assertEquals(wantHtml, doc.select("[data-id=userdirectory]").outerHtml());     }      public static File getFile(String resourceName) {         try {             URL resource = ParseTest.class.getResource(resourceName);             return resource != null ? new File(resource.toURI()) : new File("/404");         } catch (URISyntaxException e) {             throw new IllegalStateException(e);         }     }      public static InputStream inputStreamFrom(String s) {         return new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));     }      public static String getFileAsString(File file) throws IOException {         byte[] bytes;         if (file.getName().endsWith(".gz")) {             InputStream stream = new GZIPInputStream(new FileInputStream(file));             ByteBuffer byteBuffer = DataUtil.readToByteBuffer(stream, 0);             bytes = byteBuffer.array();         } else {             bytes = Files.readAllBytes(file.toPath());         }         return new String(bytes);     }  } 
package org.jsoup.integration;  import org.jsoup.Connection; import org.jsoup.HttpStatusException; import org.jsoup.Jsoup; import org.jsoup.integration.servlets.*; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test;  import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL; import java.util.Map;  import static org.jsoup.helper.HttpConnection.CONTENT_TYPE; import static org.jsoup.helper.HttpConnection.MULTIPART_FORM_DATA; import static org.jsoup.integration.UrlConnectTest.browserUa; import static org.junit.jupiter.api.Assertions.*;  /**  * Tests Jsoup.connect against a local server.  */ public class ConnectTest {     private static String echoUrl;      @BeforeAll     public static void setUp() {         TestServer.start();         echoUrl = EchoServlet.Url;     }      @AfterAll     public static void tearDown() {         TestServer.stop();     }      @Test     public void canConnectToLocalServer() throws IOException {         String url = HelloServlet.Url;         Document doc = Jsoup.connect(url).get();         Element p = doc.selectFirst("p");         assertEquals("Hello, World!", p.text());     }      @Test     public void fetchURl() throws IOException {         Document doc = Jsoup.parse(new URL(echoUrl), 10 * 1000);         assertTrue(doc.title().contains("Environment Variables"));     }      @Test     public void fetchURIWithWhitespace() throws IOException {         Connection con = Jsoup.connect(echoUrl + "#with whitespaces");         Document doc = con.get();         assertTrue(doc.title().contains("Environment Variables"));     }      @Test     public void exceptOnUnsupportedProtocol() {         String url = "file://etc/passwd";         boolean threw = false;         try {             Document doc = Jsoup.connect(url).get();         } catch (MalformedURLException e) {             threw = true;             assertEquals("java.net.MalformedURLException: Only http & https protocols supported", e.toString());         } catch (IOException e) {         }         assertTrue(threw);     }      private static String ihVal(String key, Document doc) {         final Element first = doc.select("th:contains(" + key + ") + td").first();         return first != null ? first.text() : null;     }      @Test     public void throwsExceptionOn404() {         String url = EchoServlet.Url;         Connection con = Jsoup.connect(url).header(EchoServlet.CodeParam, "404");          boolean threw = false;         try {             Document doc = con.get();         } catch (HttpStatusException e) {             threw = true;             assertEquals("org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=" + e.getUrl(), e.toString());             assertTrue(e.getUrl().startsWith(url));             assertEquals(404, e.getStatusCode());         } catch (IOException e) {         }         assertTrue(threw);     }      @Test     public void ignoresExceptionIfSoConfigured() throws IOException {         String url = EchoServlet.Url;         Connection con = Jsoup.connect(url)             .header(EchoServlet.CodeParam, "404")             .ignoreHttpErrors(true);         Connection.Response res = con.execute();         Document doc = res.parse();         assertEquals(404, res.statusCode());         assertEquals("Webserver Environment Variables", doc.title());     }      @Test     public void doesPost() throws IOException {         Document doc = Jsoup.connect(echoUrl)             .data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")             .cookie("auth", "token")             .post();          assertEquals("POST", ihVal("Method", doc));         assertEquals("gzip", ihVal("Accept-Encoding", doc));         assertEquals("auth=token", ihVal("Cookie", doc));         assertEquals("度一下", ihVal("百", doc));         assertEquals("Jsoup, Jonathan", ihVal("uname", doc));         assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc));     }      @Test     public void doesPostMultipartWithoutInputstream() throws IOException {         Document doc = Jsoup.connect(echoUrl)                 .header(CONTENT_TYPE, MULTIPART_FORM_DATA)                 .userAgent(browserUa)                 .data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")                 .post();          assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA));          assertTrue(ihVal("Content-Type", doc).contains("boundary")); // should be automatically set         assertEquals("Jsoup, Jonathan", ihVal("uname", doc));         assertEquals("度一下", ihVal("百", doc));     }      @Test     public void sendsRequestBodyJsonWithData() throws IOException {         final String body = "{key:value}";         Document doc = Jsoup.connect(echoUrl)             .requestBody(body)             .header("Content-Type", "application/json")             .userAgent(browserUa)             .data("foo", "true")             .post();         assertEquals("POST", ihVal("Method", doc));         assertEquals("application/json", ihVal("Content-Type", doc));         assertEquals("foo=true", ihVal("Query String", doc));         assertEquals(body, ihVal("Post Data", doc));     }      @Test     public void sendsRequestBodyJsonWithoutData() throws IOException {         final String body = "{key:value}";         Document doc = Jsoup.connect(echoUrl)             .requestBody(body)             .header("Content-Type", "application/json")             .userAgent(browserUa)             .post();         assertEquals("POST", ihVal("Method", doc));         assertEquals("application/json", ihVal("Content-Type", doc));         assertEquals(body, ihVal("Post Data", doc));     }      @Test     public void sendsRequestBody() throws IOException {         final String body = "{key:value}";         Document doc = Jsoup.connect(echoUrl)             .requestBody(body)             .header("Content-Type", "text/plain")             .userAgent(browserUa)             .post();         assertEquals("POST", ihVal("Method", doc));         assertEquals("text/plain", ihVal("Content-Type", doc));         assertEquals(body, ihVal("Post Data", doc));     }      @Test     public void sendsRequestBodyWithUrlParams() throws IOException {         final String body = "{key:value}";         Document doc = Jsoup.connect(echoUrl)             .requestBody(body)             .data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")             .header("Content-Type", "text/plain") // todo - if user sets content-type, we should append postcharset             .userAgent(browserUa)             .post();         assertEquals("POST", ihVal("Method", doc));         assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc));         assertEquals(body, ihVal("Post Data", doc));     }      @Test     public void doesGet() throws IOException {         Connection con = Jsoup.connect(echoUrl + "?what=the")             .userAgent("Mozilla")             .referrer("http://example.com")             .data("what", "about & me?");          Document doc = con.get();         assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc));         assertEquals("the, about & me?", ihVal("what", doc));         assertEquals("Mozilla", ihVal("User-Agent", doc));         assertEquals("http://example.com", ihVal("Referer", doc));     }      @Test     public void doesPut() throws IOException {         Connection.Response res = Jsoup.connect(echoUrl)             .data("uname", "Jsoup", "uname", "Jonathan", "百", "度一下")             .cookie("auth", "token")             .method(Connection.Method.PUT)             .execute();          Document doc = res.parse();         assertEquals("PUT", ihVal("Method", doc));         assertEquals("gzip", ihVal("Accept-Encoding", doc));         assertEquals("auth=token", ihVal("Cookie", doc));     }      /**      * Tests upload of content to a remote service.      */     @Test     public void postFiles() throws IOException {         File thumb = ParseTest.getFile("/htmltests/thumb.jpg");         File html = ParseTest.getFile("/htmltests/google-ipod.html.gz");          Document res = Jsoup             .connect(EchoServlet.Url)             .data("firstname", "Jay")             .data("firstPart", thumb.getName(), new FileInputStream(thumb), "image/jpeg")             .data("secondPart", html.getName(), new FileInputStream(html)) // defaults to "application-octetstream";             .data("surname", "Soup")             .post();          assertEquals("4", ihVal("Parts", res));          assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res));         assertEquals("secondPart", ihVal("Part secondPart Name", res));         assertEquals("google-ipod.html.gz", ihVal("Part secondPart Filename", res));         assertEquals("12212", ihVal("Part secondPart Size", res));          assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res));         assertEquals("firstPart", ihVal("Part firstPart Name", res));         assertEquals("thumb.jpg", ihVal("Part firstPart Filename", res));         assertEquals("1052", ihVal("Part firstPart Size", res));          assertEquals("Jay", ihVal("firstname", res));         assertEquals("Soup", ihVal("surname", res));          /*         <tr><th>Part secondPart ContentType</th><td>application/octet-stream</td></tr>         <tr><th>Part secondPart Name</th><td>secondPart</td></tr>         <tr><th>Part secondPart Filename</th><td>google-ipod.html</td></tr>         <tr><th>Part secondPart Size</th><td>43972</td></tr>         <tr><th>Part firstPart ContentType</th><td>image/jpeg</td></tr>         <tr><th>Part firstPart Name</th><td>firstPart</td></tr>         <tr><th>Part firstPart Filename</th><td>thumb.jpg</td></tr>         <tr><th>Part firstPart Size</th><td>1052</td></tr>          */     }      @Test     public void multipleParsesOkAfterBufferUp() throws IOException {         Connection.Response res = Jsoup.connect(echoUrl).execute().bufferUp();          Document doc = res.parse();         assertTrue(doc.title().contains("Environment"));          Document doc2 = res.parse();         assertTrue(doc2.title().contains("Environment"));     }      @Test     public void bodyAfterParseThrowsValidationError() {         assertThrows(IllegalArgumentException.class, () -> {             Connection.Response res = Jsoup.connect(echoUrl).execute();             Document doc = res.parse();             String body = res.body();         });     }      @Test     public void bodyAndBytesAvailableBeforeParse() throws IOException {         Connection.Response res = Jsoup.connect(echoUrl).execute();         String body = res.body();         assertTrue(body.contains("Environment"));         byte[] bytes = res.bodyAsBytes();         assertTrue(bytes.length > 100);          Document doc = res.parse();         assertTrue(doc.title().contains("Environment"));     }      @Test     public void parseParseThrowsValidates() {         assertThrows(IllegalArgumentException.class, () -> {             Connection.Response res = Jsoup.connect(echoUrl).execute();             Document doc = res.parse();             assertTrue(doc.title().contains("Environment"));             Document doc2 = res.parse(); // should blow up because the response input stream has been drained         });     }       @Test     public void multiCookieSet() throws IOException {         Connection con = Jsoup                 .connect(RedirectServlet.Url)                 .data(RedirectServlet.CodeParam, "302")                 .data(RedirectServlet.SetCookiesParam, "true")                 .data(RedirectServlet.LocationParam, echoUrl);         Connection.Response res = con.execute();          // test cookies set by redirect:         Map<String, String> cookies = res.cookies();         assertEquals("asdfg123", cookies.get("token"));         assertEquals("jhy", cookies.get("uid"));          // send those cookies into the echo URL by map:         Document doc = Jsoup.connect(echoUrl).cookies(cookies).get();         assertEquals("token=asdfg123; uid=jhy", ihVal("Cookie", doc));     }      @Test     public void supportsDeflate() throws IOException {         Connection.Response res = Jsoup.connect(Deflateservlet.Url).execute();         assertEquals("deflate", res.header("Content-Encoding"));          Document doc = res.parse();         assertEquals("Hello, World!", doc.selectFirst("p").text());     }      @Test     public void handlesLargerContentLengthParseRead() throws IOException {         // this handles situations where the remote server sets a content length greater than it actually writes          Connection.Response res = Jsoup.connect(InterruptedServlet.Url)             .data(InterruptedServlet.Magnitude, InterruptedServlet.Larger)             .timeout(400)             .execute();          Document document = res.parse();         assertEquals("Something", document.title());         assertEquals(0, document.select("p").size());         // current impl, jetty won't write past content length         // todo - find way to trick jetty into writing larger than set header. Take over the stream?     }      @Test     public void handlesWrongContentLengthDuringBufferedRead() throws IOException {         Connection.Response res = Jsoup.connect(InterruptedServlet.Url)                 .timeout(400)                 .execute();         // this servlet writes max_buffer data, but sets content length to max_buffer/2. So will read up to that.         // previous versions of jetty would allow to write less, and would throw except here          res.bufferUp();         Document doc = res.parse();         assertEquals(0, doc.select("p").size());     }      @Test public void handlesRedirect() throws IOException {         Document doc = Jsoup.connect(RedirectServlet.Url)             .data(RedirectServlet.LocationParam, HelloServlet.Url)             .get();          Element p = doc.selectFirst("p");         assertEquals("Hello, World!", p.text());          assertEquals(HelloServlet.Url, doc.location());     }      @Test public void handlesEmptyRedirect() {         boolean threw = false;         try {             Connection.Response res = Jsoup.connect(RedirectServlet.Url)                 .execute();         } catch (IOException e) {             assertTrue(e.getMessage().contains("Too many redirects"));             threw = true;         }         assertTrue(threw);     }      @Test public void doesNotPostFor302() throws IOException {         final Document doc = Jsoup.connect(RedirectServlet.Url)             .data("Hello", "there")             .data(RedirectServlet.LocationParam, EchoServlet.Url)             .post();          assertEquals(EchoServlet.Url, doc.location());         assertEquals("GET", ihVal("Method", doc));         assertNull(ihVal("Hello", doc)); // data not sent     }      @Test public void doesPostFor307() throws IOException {         final Document doc = Jsoup.connect(RedirectServlet.Url)             .data("Hello", "there")             .data(RedirectServlet.LocationParam, EchoServlet.Url)             .data(RedirectServlet.CodeParam, "307")             .post();          assertEquals(EchoServlet.Url, doc.location());         assertEquals("POST", ihVal("Method", doc));         assertEquals("there", ihVal("Hello", doc));     }      @Test public void getUtf8Bom() throws IOException {         Connection con = Jsoup.connect(FileServlet.urlTo("/bomtests/bom_utf8.html"));         Document doc = con.get();          assertEquals("UTF-8", con.response().charset());         assertEquals("OK", doc.title());     }      @Test     public void testBinaryContentTypeThrowsException() {         Connection con = Jsoup.connect(FileServlet.urlTo("/htmltests/thumb.jpg"));         con.data(FileServlet.ContentTypeParam, "image/jpeg");          boolean threw = false;         try {             con.execute();             Document doc = con.response().parse();         } catch (IOException e) {             threw = true;             assertEquals("Unhandled content type. Must be text/*, application/xml, or application/*+xml", e.getMessage());         }         assertTrue(threw);     }      @Test public void testParseRss() throws IOException {         // test that we switch automatically to xml, and we support application/rss+xml         Connection con = Jsoup.connect(FileServlet.urlTo("/htmltests/test-rss.xml"));         con.data(FileServlet.ContentTypeParam, "application/rss+xml");         Document doc = con.get();         Element title = doc.selectFirst("title");         assertEquals("jsoup RSS news", title.text());         assertEquals("channel", title.parent().nodeName());         assertEquals("jsoup RSS news", doc.title());         assertEquals(3, doc.select("link").size());         assertEquals("application/rss+xml", con.response().contentType());         assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax());     }      @Test     public void canFetchBinaryAsBytes() throws IOException {         Connection.Response res = Jsoup.connect(FileServlet.urlTo("/htmltests/thumb.jpg"))             .data(FileServlet.ContentTypeParam, "image/jpeg")             .ignoreContentType(true)             .execute();          byte[] bytes = res.bodyAsBytes();         assertEquals(1052, bytes.length);     }      @Test     public void handlesUnknownEscapesAcrossBuffer() throws IOException {         String localPath = "/htmltests/escapes-across-buffer.html";         String url =             "https://gist.githubusercontent.com/krystiangorecki/d3bad50ef5615f06b077438607423533/raw/71adfdf81121282ea936510ed6cfe440adeb2d83/JsoupIssue1218.html";         String localUrl = FileServlet.urlTo(localPath);          Document docFromGithub = Jsoup.connect(url).get(); // different chunks meant GH would error but local not...         Document docFromLocalServer = Jsoup.connect(localUrl).get();         Document docFromFileRead = Jsoup.parse(ParseTest.getFile(localPath), "UTF-8");          String text = docFromGithub.body().text();         assertEquals(14766, text.length());         assertEquals(text, docFromLocalServer.body().text());         assertEquals(text, docFromFileRead.body().text());     } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.TestServer; import org.jsoup.parser.CharacterReaderTest;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException;  public class InterruptedServlet extends BaseServlet {     public static final String Url = TestServer.map(InterruptedServlet.class);     public static final String Magnitude = "magnitude";     public static final String Larger = "larger";       @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {         String magnitude = req.getParameter(Magnitude);         magnitude  = magnitude == null ? "" : magnitude;         res.setContentType(TextHtml);         res.setStatus(HttpServletResponse.SC_OK);          StringBuilder sb = new StringBuilder();         sb.append("<title>Something</title>");         while (sb.length() <= CharacterReaderTest.maxBufferLen) {             sb.append("A suitable amount of data. \n");         }         sb.append("<p>Finale.</p>");         String data = sb.toString();          int contentLength = magnitude.equals(Larger) ? data.length() * 2 : data.length() / 2;         res.setContentLength(contentLength);          res.getWriter().write(data);      } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.ParseTest; import org.jsoup.integration.TestServer;  import javax.servlet.ServletOutputStream; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.File; import java.io.IOException; import java.nio.file.Files;   public class FileServlet extends BaseServlet {     public static final String Url = TestServer.map(FileServlet.class);     public static final String ContentTypeParam = "contentType";     public static final String DefaultType = "text/html";      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {         String contentType = req.getParameter(ContentTypeParam);         if (contentType == null)             contentType = DefaultType;         String location = req.getPathInfo();          File file = ParseTest.getFile(location);         if (file.exists()) {             res.setContentType(contentType);             res.setStatus(HttpServletResponse.SC_OK);              ServletOutputStream out = res.getOutputStream();             Files.copy(file.toPath(), out);             out.flush();         } else {             res.setStatus(HttpServletResponse.SC_NOT_FOUND);         }     }      public static String urlTo(String path) {         return Url + path;     }      @Override     protected void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {         doGet(req, res);     } } 
package org.jsoup.integration.servlets;  import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException;  public abstract class BaseServlet extends HttpServlet {     static final String TextHtml = "text/html; charset=UTF-8";      // these are overridden just to get the response name to be 'res' not 'resp'     @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         super.doGet(req, res);     }      @Override     protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         super.doPost(req, res);     }      @Override     protected void doPut(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         super.doPut(req, res);     } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.TestServer;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException;  public class HelloServlet extends BaseServlet {     public static final String Url = TestServer.map(HelloServlet.class);      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {         res.setContentType(TextHtml);         res.setStatus(HttpServletResponse.SC_OK);          String doc = "<p>Hello, World!";         res.getWriter().write(doc);     } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.TestServer;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.zip.Deflater; import java.util.zip.DeflaterOutputStream;  public class Deflateservlet extends BaseServlet {     public static final String Url = TestServer.map(Deflateservlet.class);      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {         res.setContentType(TextHtml);         res.setStatus(HttpServletResponse.SC_OK);         res.setHeader("Content-Encoding", "deflate");          String doc = "<p>Hello, World!<p>That should be enough, right?<p>Hello, World!<p>That should be enough, right?";          DeflaterOutputStream stream = new DeflaterOutputStream(             res.getOutputStream(),             new Deflater(Deflater.BEST_COMPRESSION, true)); // true = nowrap zlib headers         stream.write(doc.getBytes(StandardCharsets.UTF_8));        stream.close();     }      // allow the servlet to run as a main program, for local test     public static void main(String[] args) {         TestServer.start();         System.out.println(Url);     } } 
package org.jsoup.integration.servlets;  import org.eclipse.jetty.server.Request; import org.jsoup.helper.DataUtil; import org.jsoup.internal.StringUtil; import org.jsoup.integration.TestServer;  import javax.servlet.MultipartConfigElement; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; import java.io.IOException; import java.io.PrintWriter; import java.nio.ByteBuffer; import java.nio.charset.StandardCharsets; import java.util.Collection; import java.util.Enumeration;  import static org.jsoup.nodes.Entities.escape;  public class EchoServlet extends BaseServlet {     public static final String CodeParam = "code";     public static final String Url = TestServer.map(EchoServlet.class);     private static final int DefaultCode = HttpServletResponse.SC_OK;      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         doIt(req, res);     }      @Override     protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         doIt(req, res);     }      @Override     protected void doPut(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {         doIt(req, res);     }      private void doIt(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {         int intCode = DefaultCode;         String code = req.getHeader(CodeParam);         if (code != null)             intCode = Integer.parseInt(code);          boolean isMulti = maybeEnableMultipart(req);          res.setContentType(TextHtml);         res.setStatus(intCode);         PrintWriter w = res.getWriter();          w.write("<title>Webserver Environment Variables</title>\n" +             "    <style type=\"text/css\">\n" +             "      body, td, th {font: 10pt Verdana, Arial, sans-serif; text-align: left}\n" +             "      th {font-weight: bold}        \n" +             "    </style>\n" +             "    <body>\n" +             "    <table border=\"0\">");          // some get items         write(w, "Method", req.getMethod());         write(w, "Request URI", req.getRequestURI());         write(w, "Query String", req.getQueryString());          // request headers (why is it an enumeration?)         Enumeration<String> headerNames = req.getHeaderNames();         while (headerNames.hasMoreElements()) {             String header = headerNames.nextElement();             Enumeration<String> headers = req.getHeaders(header);             while (headers.hasMoreElements()) {                 write(w, header, headers.nextElement());             }         }          // the request params         Enumeration<String> parameterNames = req.getParameterNames();         while (parameterNames.hasMoreElements()) {             String name = parameterNames.nextElement();             String[] values = req.getParameterValues(name);             write(w, name, StringUtil.join(values, ", "));         }          // post body         ByteBuffer byteBuffer = DataUtil.readToByteBuffer(req.getInputStream(), 0);         String postData = new String(byteBuffer.array(), StandardCharsets.UTF_8);         if (!StringUtil.isBlank(postData)) {             write(w, "Post Data", postData);         }          // file uploads         if (isMulti) {             Collection<Part> parts = req.getParts();             write(w, "Parts", String.valueOf(parts.size()));              for (Part part : parts) {                 String name = part.getName();                 write(w, "Part " + name + " ContentType", part.getContentType());                 write(w, "Part " + name + " Name", name);                 write(w, "Part " + name + " Filename", part.getSubmittedFileName());                 write(w, "Part " + name + " Size", String.valueOf(part.getSize()));                 part.delete();             }         }          w.println("</table>");     }      private static void write(PrintWriter w, String key, String val) {         w.println("<tr><th>" + escape(key) + "</th><td>" + escape(val) + "</td></tr>");     }      // allow the servlet to run as a main program, for local test     public static void main(String[] args) {         TestServer.start();         System.out.println(Url);     }      private static boolean maybeEnableMultipart(HttpServletRequest req) {         boolean isMulti = req.getContentType() != null             && req.getContentType().startsWith("multipart/form-data");          if (isMulti) {             req.setAttribute(Request.MULTIPART_CONFIG_ELEMENT, new MultipartConfigElement(                 System.getProperty("java.io.tmpdir")));         }         return isMulti;     } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.TestServer;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter;  /**  * Slowly, interminably writes output. For the purposes of testing timeouts and interrupts.  */ public class SlowRider extends BaseServlet {     public static final String Url = TestServer.map(SlowRider.class);     private static final int SleepTime = 2000;     public static final String MaxTimeParam = "maxTime";      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {         pause(1000);         res.setContentType(TextHtml);         res.setStatus(HttpServletResponse.SC_OK);         PrintWriter w = res.getWriter();          int maxTime = -1;         String maxTimeP = req.getParameter(MaxTimeParam);         if (maxTimeP != null) {             maxTime = Integer.parseInt(maxTimeP);         }          long startTime = System.currentTimeMillis();         while (true) {             w.println("<p>Are you still there?");             boolean err = w.checkError(); // flush, and check still ok             if (err) {                 log("Remote connection lost");                 break;             }             if (pause(SleepTime)) break;              if (maxTime > 0 && System.currentTimeMillis() > startTime + maxTime) {                 w.println("<h1>outatime</h1>");                 break;             }         }     }      private static boolean pause(int sleepTime) {         try {             Thread.sleep(sleepTime);         } catch (InterruptedException e) {             return true;         }         return false;     }      // allow the servlet to run as a main program, for local test     public static void main(String[] args) {         TestServer.start();         System.out.println(Url);     } } 
package org.jsoup.integration.servlets;  import org.jsoup.integration.TestServer;  import javax.servlet.http.Cookie; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  public class RedirectServlet extends BaseServlet {     public static final String Url = TestServer.map(RedirectServlet.class);     public static final String LocationParam = "loc";     public static final String CodeParam = "code";     public static final String SetCookiesParam = "setCookies";     private static final int DefaultCode = HttpServletResponse.SC_MOVED_TEMPORARILY;      @Override     protected void doGet(HttpServletRequest req, HttpServletResponse res) {         String location = req.getParameter(LocationParam);         if (location == null)             location = "";          int intCode = DefaultCode;         String code = req.getParameter(CodeParam);         if (code != null)             intCode = Integer.parseInt(code);          if (req.getParameter(SetCookiesParam) != null) {             res.addCookie(new Cookie("token", "asdfg123"));             res.addCookie(new Cookie("uid", "jhy"));         }          res.setHeader("Location", location);         res.setStatus(intCode);     }      @Override     protected void doPost(HttpServletRequest req, HttpServletResponse res) {         doGet(req, res);     } } 
package org.jsoup.integration;  import org.jsoup.Connection; import org.jsoup.Jsoup; import org.jsoup.UnsupportedMimeTypeException; import org.jsoup.helper.W3CDom; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Document; import org.jsoup.nodes.FormElement; import org.jsoup.parser.HtmlTreeBuilder; import org.jsoup.parser.Parser; import org.jsoup.parser.XmlTreeBuilder; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.net.ConnectException; import java.net.InetSocketAddress; import java.net.Proxy; import java.net.URL; import java.util.List;  import static org.junit.jupiter.api.Assertions.*;  /**  Tests the URL connection. Not enabled by default, so tests don't require network connection.   @author Jonathan Hedley, jonathan@hedley.net */ @Disabled // ignored by default so tests don't require network access. comment out to enable. // todo: rebuild these into a local Jetty test server, so not reliant on the vagaries of the internet. public class UrlConnectTest {     private static final String WEBSITE_WITH_INVALID_CERTIFICATE = "https://certs.cac.washington.edu/CAtest/";     private static final String WEBSITE_WITH_SNI = "https://jsoup.org/";     public static String browserUa = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36";      @Test     public void fetchBaidu() throws IOException {         Connection.Response res = Jsoup.connect("http://www.baidu.com/").timeout(10*1000).execute();         Document doc = res.parse();          assertEquals("GBK", doc.outputSettings().charset().displayName());         assertEquals("GBK", res.charset());         assert(res.hasCookie("BAIDUID"));         assertEquals("text/html;charset=gbk", res.contentType());     }      @Test     public void exceptOnUnknownContentType() {         String url = "http://direct.jsoup.org/rez/osi_logo.png"; // not text/* but image/png, should throw         boolean threw = false;         try {             Document doc = Jsoup.parse(new URL(url), 3000);         } catch (UnsupportedMimeTypeException e) {             threw = true;             assertEquals("org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://direct.jsoup.org/rez/osi_logo.png", e.toString());             assertEquals(url, e.getUrl());             assertEquals("image/png", e.getMimeType());         } catch (IOException e) {         }         assertTrue(threw);     }      @Test     public void ignoresContentTypeIfSoConfigured() throws IOException {         Document doc = Jsoup.connect("https://jsoup.org/rez/osi_logo.png").ignoreContentType(true).get();         assertEquals("", doc.title()); // this will cause an ugly parse tree     }      private static String ihVal(String key, Document doc) {         return doc.select("th:contains("+key+") + td").first().text();     }      @Test     public void followsTempRedirect() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302.pl"); // http://jsoup.org         Document doc = con.get();         assertTrue(doc.title().contains("jsoup"));     }      @Test     public void followsNewTempRedirect() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/307.pl"); // http://jsoup.org         Document doc = con.get();         assertTrue(doc.title().contains("jsoup"));         assertEquals("https://jsoup.org/", con.response().url().toString());     }      @Test     public void postRedirectsFetchWithGet() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302.pl")                 .data("Argument", "Riposte")                 .method(Connection.Method.POST);         Connection.Response res = con.execute();         assertEquals("https://jsoup.org/", res.url().toExternalForm());         assertEquals(Connection.Method.GET, res.method());     }      @Test     public void followsRedirectToHttps() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302-secure.pl"); // https://www.google.com         con.data("id", "5");         Document doc = con.get();         assertTrue(doc.title().contains("Google"));     }      @Test     public void followsRelativeRedirect() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302-rel.pl"); // to /tidy/         Document doc = con.post();         assertTrue(doc.title().contains("HTML Tidy Online"));     }      @Test     public void followsRelativeDotRedirect() throws IOException {         // redirects to "./ok.html", should resolve to http://direct.infohound.net/tools/ok.html         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302-rel-dot.pl"); // to ./ok.html         Document doc = con.post();         assertTrue(doc.title().contains("OK"));         assertEquals(doc.location(), "http://direct.infohound.net/tools/ok.html");     }      @Test     public void followsRelativeDotRedirect2() throws IOException {         //redirects to "esportspenedes.cat/./ep/index.php", should resolve to "esportspenedes.cat/ep/index.php"         Connection con = Jsoup.connect("http://esportspenedes.cat")  // note lack of trailing / - server should redir to / first, then to ./ep/...; but doesn't'                 .timeout(10000);         Document doc = con.post();         assertEquals(doc.location(), "http://esportspenedes.cat/ep/index.php");     }      @Test     public void followsRedirectsWithWithespaces() throws IOException {         Connection con = Jsoup.connect("http://tinyurl.com/kgofxl8"); // to http://www.google.com/?q=white spaces         Document doc = con.get();         assertTrue(doc.title().contains("Google"));     }      @Test     public void gracefullyHandleBrokenLocationRedirect() throws IOException {         Connection con = Jsoup.connect("http://aag-ye.com"); // has Location: http:/temp/AAG_New/en/index.php         con.get(); // would throw exception on error         assertTrue(true);     }      @Test     public void ignores500tExceptionIfSoConfigured() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/500.pl").ignoreHttpErrors(true);         Connection.Response res = con.execute();         Document doc = res.parse();         assertEquals(500, res.statusCode());         assertEquals("Application Error", res.statusMessage());         assertEquals("Woops", doc.select("h1").first().text());     }      @Test     public void ignores500WithNoContentExceptionIfSoConfigured() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/500-no-content.pl").ignoreHttpErrors(true);         Connection.Response res = con.execute();         Document doc = res.parse();         assertEquals(500, res.statusCode());         assertEquals("Application Error", res.statusMessage());     }      @Test     public void ignores200WithNoContentExceptionIfSoConfigured() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/200-no-content.pl").ignoreHttpErrors(true);         Connection.Response res = con.execute();         Document doc = res.parse();         assertEquals(200, res.statusCode());         assertEquals("All Good", res.statusMessage());     }      @Test     public void handles200WithNoContent() throws IOException {         Connection con = Jsoup             .connect("http://direct.infohound.net/tools/200-no-content.pl")             .userAgent(browserUa);         Connection.Response res = con.execute();         Document doc = res.parse();         assertEquals(200, res.statusCode());          con = Jsoup             .connect("http://direct.infohound.net/tools/200-no-content.pl")             .parser(Parser.xmlParser())             .userAgent(browserUa);         res = con.execute();         doc = res.parse();         assertEquals(200, res.statusCode());     }      @Test     public void doesntRedirectIfSoConfigured() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302.pl").followRedirects(false);         Connection.Response res = con.execute();         assertEquals(302, res.statusCode());         assertEquals("http://jsoup.org", res.header("Location"));     }      @Test     public void redirectsResponseCookieToNextResponse() throws IOException {         Connection con = Jsoup.connect("http://direct.infohound.net/tools/302-cookie.pl");         Connection.Response res = con.execute();         assertEquals("asdfg123", res.cookie("token")); // confirms that cookies set on 1st hit are presented in final result         Document doc = res.parse();         assertEquals("token=asdfg123; uid=jhy", ihVal("HTTP_COOKIE", doc)); // confirms that redirected hit saw cookie     }      @Test     public void maximumRedirects() {         boolean threw = false;         try {             Document doc = Jsoup.connect("http://direct.infohound.net/tools/loop.pl").get();         } catch (IOException e) {             assertTrue(e.getMessage().contains("Too many redirects"));             threw = true;         }         assertTrue(threw);     }      @Test     public void handlesDodgyCharset() throws IOException {         // tests that when we get back "UFT8", that it is recognised as unsupported, and falls back to default instead         String url = "http://direct.infohound.net/tools/bad-charset.pl";         Connection.Response res = Jsoup.connect(url).execute();         assertEquals("text/html; charset=UFT8", res.header("Content-Type")); // from the header         assertNull(res.charset()); // tried to get from header, not supported, so returns null         Document doc = res.parse(); // would throw an error if charset unsupported         assertTrue(doc.text().contains("Hello!"));         assertEquals("UTF-8", res.charset()); // set from default on parse     }      @Test     public void maxBodySize() throws IOException {         String url = "http://direct.infohound.net/tools/large.html"; // 280 K          Connection.Response defaultRes = Jsoup.connect(url).execute();         Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops         Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops         Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop         Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();          int actualDocText = 269541;         assertEquals(actualDocText, defaultRes.parse().text().length());         assertEquals(49165, smallRes.parse().text().length());         assertEquals(196577, mediumRes.parse().text().length());         assertEquals(actualDocText, largeRes.parse().text().length());         assertEquals(actualDocText, unlimitedRes.parse().text().length());     }      /**      * Verify that security disabling feature works properly.      * <p/>      * 1. try to hit url with invalid certificate and evaluate that exception is thrown      *      * @throws Exception      */     @Test     public void testUnsafeFail() throws Exception {         String url = WEBSITE_WITH_INVALID_CERTIFICATE;         assertThrows(IOException.class, () -> Jsoup.connect(url).execute());     }       /**      * Verify that requests to websites with SNI fail on jdk 1.6      * <p/>      * read for more details:      * http://en.wikipedia.org/wiki/Server_Name_Indication      *      * Test is ignored independent from others as it requires JDK 1.6      * @throws Exception      */     @Test     public void testSNIFail() throws Exception {         assertThrows(IOException.class, () -> Jsoup.connect(WEBSITE_WITH_SNI).execute());     }      @Test     public void shouldWorkForCharsetInExtraAttribute() throws IOException {         Connection.Response res = Jsoup.connect("https://www.creditmutuel.com/groupe/fr/").execute();         Document doc = res.parse(); // would throw an error if charset unsupported         assertEquals("ISO-8859-1", res.charset());     }      // The following tests were added to test specific domains if they work. All code paths     // which make the following test green are tested in other unit or integration tests, so the following lines     // could be deleted      @Test     public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {         Connection.Response res = Jsoup.connect("http://aamo.info/").execute();         res.parse(); // would throw an error if charset unsupported         assertEquals("ISO-8859-1", res.charset());     }      @Test     public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {         Connection.Response res = Jsoup.connect("http://9kuhkep.net").execute();         res.parse(); // would throw an error if charset unsupported         assertEquals("UTF-8", res.charset());     }      @Test     public void shouldEmptyMetaCharsetCorrectly() throws IOException {         Connection.Response res = Jsoup.connect("http://aastmultimedia.com").execute();         res.parse(); // would throw an error if charset unsupported         assertEquals("UTF-8", res.charset());     }      @Test     public void shouldWorkForDuplicateCharsetInTag() throws IOException {         Connection.Response res = Jsoup.connect("http://aaptsdassn.org").execute();         Document doc = res.parse(); // would throw an error if charset unsupported         assertEquals("ISO-8859-1", res.charset());     }      @Test     public void baseHrefCorrectAfterHttpEquiv() throws IOException {         // https://github.com/jhy/jsoup/issues/440         Connection.Response res = Jsoup.connect("http://direct.infohound.net/tools/charset-base.html").execute();         Document doc = res.parse();         assertEquals("http://example.com/foo.jpg", doc.select("img").first().absUrl("src"));     }      /**      * Test fetching a form, and submitting it with a file attached.      */     @Test     public void postHtmlFile() throws IOException {         Document index = Jsoup.connect("http://direct.infohound.net/tidy/").get();         FormElement form = index.select("[name=tidy]").forms().get(0);         Connection post = form.submit();          File uploadFile = ParseTest.getFile("/htmltests/google-ipod.html");         FileInputStream stream = new FileInputStream(uploadFile);          Connection.KeyVal fileData = post.data("_file");         fileData.value("check.html");         fileData.inputStream(stream);          Connection.Response res;         try {             res = post.execute();         } finally {             stream.close();         }          Document out = res.parse();         assertTrue(out.text().contains("HTML Tidy Complete"));     }      @Test     public void handles201Created() throws IOException {         Document doc = Jsoup.connect("http://direct.infohound.net/tools/201.pl").get(); // 201, location=jsoup         assertEquals("https://jsoup.org/", doc.location());     }      @Test     public void fetchToW3c() throws IOException {         String url = "https://jsoup.org";         Document doc = Jsoup.connect(url).get();          W3CDom dom = new W3CDom();         org.w3c.dom.Document wDoc = dom.fromJsoup(doc);         assertEquals(url, wDoc.getDocumentURI());         String html = dom.asString(wDoc);         assertTrue(html.contains("jsoup"));     }      @Test     public void fetchHandlesXml() throws IOException {         // should auto-detect xml and use XML parser, unless explicitly requested the html parser         String xmlUrl = "http://direct.infohound.net/tools/parse-xml.xml";         Connection con = Jsoup.connect(xmlUrl);         Document doc = con.get();         Connection.Request req = con.request();         assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder);         assertEquals("<xml> <link> one </link> <table> Two </table> </xml>", StringUtil.normaliseWhitespace(doc.outerHtml()));     }      @Test     public void fetchHandlesXmlAsHtmlWhenParserSet() throws IOException {         // should auto-detect xml and use XML parser, unless explicitly requested the html parser         String xmlUrl = "http://direct.infohound.net/tools/parse-xml.xml";         Connection con = Jsoup.connect(xmlUrl).parser(Parser.htmlParser());         Document doc = con.get();         Connection.Request req = con.request();         assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder);         assertEquals("<html> <head></head> <body> <xml> <link>one <table> Two </table> </xml> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml()));     }      @Test     public void combinesSameHeadersWithComma() throws IOException {         // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2         String url = "http://direct.infohound.net/tools/q.pl";         Connection con = Jsoup.connect(url);         con.get();          Connection.Response res = con.response();         assertEquals("text/html", res.header("Content-Type"));         assertEquals("no-cache, no-store", res.header("Cache-Control"));          List<String> header = res.headers("Cache-Control");         assertEquals(2, header.size());         assertEquals("no-cache", header.get(0));         assertEquals("no-store", header.get(1));     }      @Test     public void sendHeadRequest() throws IOException {         String url = "http://direct.infohound.net/tools/parse-xml.xml";         Connection con = Jsoup.connect(url).method(Connection.Method.HEAD);         final Connection.Response response = con.execute();         assertEquals("text/xml", response.header("Content-Type"));         assertEquals("", response.body()); // head ought to have no body         Document doc = response.parse();         assertEquals("", doc.text());     }       /*      Proxy tests. Assumes local proxy running on 8888, without system propery set (so that specifying it is required).      */      @Test     public void fetchViaHttpProxy() throws IOException {         String url = "https://jsoup.org";         Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved("localhost", 8888));         Document doc = Jsoup.connect(url).proxy(proxy).get();         assertTrue(doc.title().contains("jsoup"));     }      @Test     public void fetchViaHttpProxySetByArgument() throws IOException {         String url = "https://jsoup.org";         Document doc = Jsoup.connect(url).proxy("localhost", 8888).get();         assertTrue(doc.title().contains("jsoup"));     }      @Test     public void invalidProxyFails() {         boolean caught = false;         String url = "https://jsoup.org";         try {             Document doc = Jsoup.connect(url).proxy("localhost", 8889).get();         } catch (IOException e) {             caught = e instanceof ConnectException;         }         assertTrue(caught);     }      @Test     public void proxyGetAndSet() throws IOException {         String url = "https://jsoup.org";         Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved("localhost", 8889)); // invalid         final Connection con = Jsoup.connect(url).proxy(proxy);          assert con.request().proxy() == proxy;         con.request().proxy(null); // disable         Document doc = con.get();         assertTrue(doc.title().contains("jsoup")); // would fail if actually went via proxy     }      @Test     public void throwsIfRequestBodyForGet() throws IOException {         boolean caught = false;         String url = "https://jsoup.org";         try {             Document doc = Jsoup.connect(url).requestBody("fail").get();         } catch (IllegalArgumentException e) {             caught = true;         }         assertTrue(caught);     }      @Test     public void canSpecifyResponseCharset() throws IOException {         // both these docs have <80> in there as euro/control char depending on charset         String noCharsetUrl = "http://direct.infohound.net/tools/Windows-1252-nocharset.html";         String charsetUrl = "http://direct.infohound.net/tools/Windows-1252-charset.html";          // included in meta         Connection.Response res1 = Jsoup.connect(charsetUrl).execute();         assertNull(res1.charset()); // not set in headers         final Document doc1 = res1.parse();         assertEquals("windows-1252", doc1.charset().displayName()); // but determined at parse time         assertEquals("Cost is €100", doc1.select("p").text());         assertTrue(doc1.text().contains("€"));          // no meta, no override         Connection.Response res2 = Jsoup.connect(noCharsetUrl).execute();         assertNull(res2.charset()); // not set in headers         final Document doc2 = res2.parse();         assertEquals("UTF-8", doc2.charset().displayName()); // so defaults to utf-8         assertEquals("Cost is �100", doc2.select("p").text());         assertTrue(doc2.text().contains("�"));          // no meta, let's override         Connection.Response res3 = Jsoup.connect(noCharsetUrl).execute();         assertNull(res3.charset()); // not set in headers         res3.charset("windows-1252");         assertEquals("windows-1252", res3.charset()); // read back         final Document doc3 = res3.parse();         assertEquals("windows-1252", doc3.charset().displayName()); // from override         assertEquals("Cost is €100", doc3.select("p").text());         assertTrue(doc3.text().contains("€"));     }      @Test     public void handlesUnescapedRedirects() throws IOException {         // URL locations should be url safe (ascii) but are often not, so we should try to guess         // in this case the location header is utf-8, but defined in spec as iso8859, so detect, convert, encode         String url = "http://direct.infohound.net/tools/302-utf.pl";         String urlEscaped = "http://direct.infohound.net/tools/test%F0%9F%92%A9.html";          Connection.Response res = Jsoup.connect(url).execute();         Document doc = res.parse();         assertEquals(doc.body().text(), "\uD83D\uDCA9!");         assertEquals(doc.location(), urlEscaped);          Connection.Response res2 = Jsoup.connect(url).followRedirects(false).execute();         assertEquals("/tools/test\uD83D\uDCA9.html", res2.header("Location"));         // if we didn't notice it was utf8, would look like: Location: /tools/testð©.html     }      @Test public void handlesEscapesInRedirecct() throws IOException {         Document doc = Jsoup.connect("http://infohound.net/tools/302-escaped.pl").get();         assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location());          doc = Jsoup.connect("http://infohound.net/tools/302-white.pl").get();         assertEquals("http://infohound.net/tools/q.pl?q=one%20two", doc.location());     }      @Test     public void handlesUt8fInUrl() throws IOException {         String url = "http://direct.infohound.net/tools/test\uD83D\uDCA9.html";         String urlEscaped = "http://direct.infohound.net/tools/test%F0%9F%92%A9.html";          Connection.Response res = Jsoup.connect(url).execute();         Document doc = res.parse();         assertEquals("\uD83D\uDCA9!", doc.body().text());         assertEquals(urlEscaped, doc.location());     }      @Test     public void inWildUtfRedirect() throws IOException {         Connection.Response res = Jsoup.connect("http://brabantn.ws/Q4F").execute();         Document doc = res.parse();         assertEquals(             "http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx",             doc.location()             );     }      @Test     public void inWildUtfRedirect2() throws IOException {         Connection.Response res = Jsoup.connect("https://ssl.souq.com/sa-en/2724288604627/s").execute();         Document doc = res.parse();         assertEquals(             "https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch",             doc.location()         );     }     @Test public void handlesEscapedRedirectUrls() throws IOException {         String url = "http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione";         // sends: Location:http://shop.wki.it/shared/sso/sso.aspx?sso=&url=http%3a%2f%2fwww.altalex.com%2fsession%2fset%2f%3freturnurl%3dhttp%253a%252f%252fwww.altalex.com%253a80%252fdocuments%252fnews%252f2016%252f12%252f06%252fquestioni-civilistiche-conseguenti-alla-depenalizzazione         // then to: http://www.altalex.com/session/set/?returnurl=http%3a%2f%2fwww.altalex.com%3a80%2fdocuments%2fnews%2f2016%2f12%2f06%2fquestioni-civilistiche-conseguenti-alla-depenalizzazione&sso=RDRG6T684G4AK2E7U591UGR923         // then : http://www.altalex.com:80/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione          // bug is that jsoup goes to         // 	GET /shared/sso/sso.aspx?sso=&url=http%253a%252f%252fwww.altalex.com%252fsession%252fset%252f%253freturnurl%253dhttp%25253a%25252f%25252fwww.altalex.com%25253a80%25252fdocuments%25252fnews%25252f2016%25252f12%25252f06%25252fquestioni-civilistiche-conseguenti-alla-depenalizzazione HTTP/1.1         // i.e. double escaped          Connection.Response res = Jsoup.connect(url)                 .proxy("localhost", 8888)                 .execute();         Document doc = res.parse();         assertEquals(200, res.statusCode());     }      @Test public void handlesUnicodeInQuery() throws IOException {         Document doc = Jsoup.connect("https://www.google.pl/search?q=gąska").get();         assertEquals("gąska - Szukaj w Google", doc.title());          doc = Jsoup.connect("http://mov-world.net/archiv/TV/A/%23No.Title/").get();         assertEquals("Index of /archiv/TV/A/%23No.Title", doc.title());     }      @Test public void handlesSuperDeepPage() throws IOException {         // https://github.com/jhy/jsoup/issues/955          long start = System.currentTimeMillis();         String url = "http://sv.stargate.wikia.com/wiki/M2J";         Document doc = Jsoup.connect(url).get();         assertEquals("M2J | Sv.stargate Wiki | FANDOM powered by Wikia", doc.title());         assertEquals(110160, doc.select("dd").size());         // those are all <dl><dd> stacked in each other. wonder how that got generated?         assertTrue(System.currentTimeMillis() - start < 1000);     }      @Test public void handles966() throws IOException {         // http://szshb.nxszs.gov.cn/         // https://github.com/jhy/jsoup/issues/966          Document doc = Jsoup.connect("http://szshb.nxszs.gov.cn/").get();          assertEquals("石嘴山市环境保护局", doc.title());     }  } 
package org.jsoup.integration;  import org.eclipse.jetty.server.Server; import org.eclipse.jetty.server.ServerConnector; import org.eclipse.jetty.servlet.ServletHandler; import org.jsoup.integration.servlets.BaseServlet;  import java.util.concurrent.atomic.AtomicInteger;  public class TestServer {     private static final Server jetty = new Server(0);     private static final ServletHandler handler = new ServletHandler();     private static AtomicInteger latch = new AtomicInteger(0);      static {         jetty.setHandler(handler);     }      private TestServer() {     }      public static void start() {         synchronized (jetty) {             int count = latch.getAndIncrement();             if (count == 0) {                 try {                     jetty.start();                 } catch (Exception e) {                     throw new IllegalStateException(e);                 }             }         }     }      public static void stop() {         synchronized (jetty) {             int count = latch.decrementAndGet();             if (count == 0) {                 try {                     jetty.stop();                 } catch (Exception e) {                     throw new IllegalStateException(e);                 }             }         }     }      public static String map(Class<? extends BaseServlet> servletClass) {         synchronized (jetty) {             if (!jetty.isStarted())                 start(); // if running out of the test cases              String path = "/" + servletClass.getSimpleName();             handler.addServletWithMapping(servletClass, path + "/*");             int port = ((ServerConnector) jetty.getConnectors()[0]).getLocalPort();             return "http://localhost:" + port + path;         }     } } 
package org.jsoup.integration;  import org.jsoup.Connection; import org.jsoup.Jsoup; import org.jsoup.integration.servlets.SlowRider; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.junit.jupiter.api.Test;  import java.io.IOException; import java.net.SocketTimeoutException;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue;  /**  * Failsafe integration tests for Connect methods. These take a bit longer to run, so included as Integ, not Unit, tests.  */ public class ConnectIT {     // Slow Rider tests. Ignored by default so tests don't take aaages     @Test     public void canInterruptBodyStringRead() throws InterruptedException {         // todo - implement in interruptable channels, so it's immediate         final String[] body = new String[1];         Thread runner = new Thread(() -> {             try {                 Connection.Response res = Jsoup.connect(SlowRider.Url)                     .timeout(15 * 1000)                     .execute();                 body[0] = res.body();             } catch (IOException e) {                 throw new RuntimeException(e);             }          });          runner.start();         Thread.sleep(1000 * 3);         runner.interrupt();         assertTrue(runner.isInterrupted());         runner.join();          assertTrue(body[0].length() > 0);         assertTrue(body[0].contains("<p>Are you still there?"));     }      @Test     public void canInterruptDocumentRead() throws InterruptedException {         // todo - implement in interruptable channels, so it's immediate         final String[] body = new String[1];         Thread runner = new Thread(() -> {             try {                 Connection.Response res = Jsoup.connect(SlowRider.Url)                     .timeout(15 * 1000)                     .execute();                 body[0] = res.parse().text();             } catch (IOException e) {                 throw new RuntimeException(e);             }          });          runner.start();         Thread.sleep(1000 * 3);         runner.interrupt();         assertTrue(runner.isInterrupted());         runner.join();          assertEquals(0, body[0].length()); // doesn't ready a failed doc     }      @Test     public void totalTimeout() throws IOException {         int timeout = 3 * 1000;         long start = System.currentTimeMillis();         boolean threw = false;         try {             Jsoup.connect(SlowRider.Url).timeout(timeout).get();         } catch (SocketTimeoutException e) {             long end = System.currentTimeMillis();             long took = end - start;             assertTrue(took > timeout, ("Time taken was " + took));             assertTrue(took < timeout * 1.8, ("Time taken was " + took));             threw = true;         }          assertTrue(threw);     }      @Test     public void slowReadOk() throws IOException {         // make sure that a slow read that is under the request timeout is still OK         Document doc = Jsoup.connect(SlowRider.Url)             .data(SlowRider.MaxTimeParam, "2000") // the request completes in 2 seconds             .get();          Element h1 = doc.selectFirst("h1");         assertEquals("outatime", h1.text());     }      @Test     public void infiniteReadSupported() throws IOException {         Document doc = Jsoup.connect(SlowRider.Url)             .timeout(0)             .data(SlowRider.MaxTimeParam, "2000")             .get();          Element h1 = doc.selectFirst("h1");         assertEquals("outatime", h1.text());     } } 
